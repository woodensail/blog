{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462394086000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462394086000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462394086000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462394086000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462394086000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462394086000},{"_id":"themes/next/_config.yml","hash":"93ef2f1f88858735a9333cbb0bf04c840cb957fe","modified":1462503984829},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462394086000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462394086000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462394086000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462394086000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462394086000},{"_id":"source/_posts/76.md","hash":"b889496913c0bed928870efd456318da382b167b","modified":1462502071351},{"_id":"source/_posts/Python3实现基于模板及逆向数据库的代码生成器.md","hash":"c84dcfec9a57b1cfb0cc03437f9b5bd27d91940b","modified":1462503767345},{"_id":"source/_posts/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e4-b8-ba-e8-87-aa-e5-8a-a8-e5-ae-8c-e6-88-90-e5-8a-9f-e8-83-bd-e5-a2-9e-e5-8a-a0-e5-a4-9a-e5-ad-97-e6-ae-b5-e5-92-8c-e5-9b-9e.md","hash":"2c1c444c34b9d9ce32b3e0a608385b94af76c79d","modified":1462502071355},{"_id":"source/_posts/e3-80-90-e6-88-91-e4-bb-ac-e4-b8-80-e8-b5-b7-e5-ad-a6python-e5-90-a7-e3-80-91-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac4-e6-9c-9f.md","hash":"26260b483f5617abfe8156db356935cf731298dd","modified":1462502071344},{"_id":"source/_posts/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e9-98-b2-e6-ad-a2-e6-8e-a7-e4-bb-b6-e5-88-9d-e5-a7-8b-e5-8c-96-e6-97-b6-e4-b8-a2-e5-a4-b1-e5-b1-9e-e6-80-a7-e3-80-82.md","hash":"9429d0342c981134cc4d30e58d78dc7290ea1796","modified":1462502071354},{"_id":"source/_posts/e4-bb-bb-e6-84-8f-e6-8c-89-e9-94-ae-e5-ae-9e-e7-8e-b0tab-e5-92-8cshifttab-e9-81-8d-e5-8e-86html-e5-85-83-e7-b4-a0-e7-9a-84-e5-8a-9f-e8-83-bd.md","hash":"fa648a8acfc886243b1be18a20053aefb58ac2e5","modified":1462502071366},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s01-ef-bc-9a-e4-bb-8emht-e6-96-87-e4-bb-b6-e4-b8-ad-e6-8f-90-e5-8f-96qq-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80.md","hash":"4f9c0d961da6ebae067000e19b0bc597e1375760","modified":1462502071360},{"_id":"source/_posts/e6-8f-90-e5-8f-96-e5-b9-b6-e4-bf-ae-e6-94-b9class-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-b8-b8-e9-87-8f.md","hash":"296188e8c7f12d4bc49a51ffbf1a0eb2e99516b6","modified":1462502071350},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s104-ef-bc-9a-e5-88-86-e6-9e-90-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80-e5-9c-a8-e6-af-8f-e5-b0-8f-e6-97-b6-e6-af-8f-e5-a4-a9-e7-ad-89-e7-b2-92-e5-ba-a6-e4-b8-8a.md","hash":"45e6b0bca8ad5a934293633dc5a6349b40485309","modified":1462502071354},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s103-ef-bc-9a-e4-bd-bf-e7-94-a8-e7-bb-93-e5-b7-b4-e5-88-86-e8-af-8d-e5-b7-a5-e5-85-b7-e6-8f-90-e5-8f-96-e5-85-b3-e9-94-ae-e8-af-8d.md","hash":"8dcfe8d54565d28b512b99eecb88f999506d3aa9","modified":1462502071355},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s106-ef-bc-9a-e5-be-ae-e4-bf-a1-e8-90-a5-e8-bf-90-e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90.md","hash":"6db5d46c9f05deb58380469dcae811fced83c6a9","modified":1462502071351},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s107-ef-bc-9a-e5-ae-8c-e6-88-90-e5-be-ae-e4-bf-a1-e8-bf-90-e8-90-a5-e8-af-84-e4-bc-b0-e6-a8-a1-e5-9e-8b.md","hash":"58ec8d348177640fda5c8c08dd015d72b57c0de4","modified":1462502071355},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s108-ef-bc-9a-e5-be-ae-e4-bf-a1-e6-96-87-e7-ab-a0-e5-af-86-e5-ba-a6-e7-9a-84-e5-bd-b1-e5-93-8d.md","hash":"723d22dd0e048f22a7d4f6c5f8566d5a2972f8de","modified":1462502071356},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s109-ef-bc-9a-e5-88-86-e7-b1-bb-e8-af-8d-e9-a2-91-e5-88-86-e6-9e-90.md","hash":"51dc69f4cc3182e8cb438ed7db0e4e4fff00ef8c","modified":1462502071356},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s110-ef-bc-9a-e7-bd-91-e7-ab-99-e9-93-be-e6-8e-a5-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89.md","hash":"a26c8983db09c2afb6a1fd6b18c92c009f05d628","modified":1462502071357},{"_id":"source/_posts/e6-a0-b9-e6-8d-aerequest-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip.md","hash":"93642437ad2c6809a88a5fae34bfb81ac7b4fe5f","modified":1462502071351},{"_id":"source/_posts/e8-a7-a3-e5-86-b3-e9-83-a8-e5-88-86jquery-e6-8f-92-e4-bb-b6-e6-b8-b2-e6-9f-93-e6-97-b6-e5-88-a0-e9-99-a4-e5-8e-9f-e6-a0-87-e7-ad-be-e5-b8-a6-e6-9d-a5-e7-9a-84-e4-ba-8b-e4-bb-b6-e5-a4-b1-e6-95-88.md","hash":"9e61f8cb718769e8e90337335edd3ba553168b8e","modified":1462502071356},{"_id":"source/_posts/easyui-validatebox-e7-9a-84-e7-ac-ac-e4-b8-89-e7-a7-8d-e6-8c-87-e5-ae-9avalidtype-e6-96-b9-e5-bc-8f-e6-97-a0-e6-95-88.md","hash":"eda24182bb84498e8ae032f1fa79b7d90b5c5c5c","modified":1462502071351},{"_id":"source/_posts/easyui-window-e7-bb-84-e4-bb-b6-e4-b8-ad-e5-8c-85-e5-90-abiframe-e5-8f-af-e8-83-bd-e5-bc-95-e5-8f-91-e9-87-8d-e5-a4-8d-e8-af-b7-e6-b1-82-e5-92-8cjquery-e5-bc-82-e5-b8-b8.md","hash":"ab45ed63d7563c1c92f991976b4e3d8f1e28dc99","modified":1462502071345},{"_id":"source/_posts/java8-lambda-e8-a1-a8-e8-be-be-e5-bc-8f-e4-bd-93-e9-aa-8c.md","hash":"fcd2e2dae7db35bc94bb5d5c2a52f4fa3d48edca","modified":1462502071355},{"_id":"source/_posts/jvm-e7-9a-84-e7-bc-96-e8-af-91-e6-97-b6-e5-a4-9a-e6-80-81-e4-b8-8e-e7-b1-bb-e5-9e-8b-e6-93-a6-e9-99-a4.md","hash":"0917758ef385c8b5fd958470b16b47ca8c3cb4be","modified":1462502071359},{"_id":"source/_posts/python-e5-ae-9e-e7-8e-b0lambda-switch-lambda-e7-bb-93-e6-9e-84-ef-bc-8c-e5-90-91lambda-e5-86-85-e6-8f-92-e5-85-a5-e5-88-86-e6-94-af-e7-bb-93-e6-9e-84.md","hash":"fa7bc9029fd9e12546de47ca63759567e004f05f","modified":1462502071354},{"_id":"source/_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac2-e6-9c-9f.md","hash":"44832f32711f088a57b3ef56980ebf68baa30f81","modified":1462502071345},{"_id":"source/_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac3-e6-9c-9f.md","hash":"01f332eb9fbf49410550746bca959262574beb3b","modified":1462502071343},{"_id":"source/_posts/python3-e5-ad-a6-e4-b9-a0-e6-b3-a8-e5-86-8c-e6-9c-ba-e7-9a-84-e5-ae-9e-e7-8e-b0.md","hash":"cc40e64fc9dae07aa7e5ce26c5046cc3a9bfe90a","modified":1462502071348},{"_id":"source/_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98.md","hash":"fa1d67c79f7ebd63126effa01036fe348cdd1258","modified":1462502071347},{"_id":"source/_posts/pythonchallenge-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-950-17.md","hash":"7313fb707516aa714fd20c04d3fa65aae1a94525","modified":1462502071351},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462394086000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462394086000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462394086000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462394086000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462394086000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462394086000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462394086000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462394086000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462394086000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462394086000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1462394086000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462394086000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462394086000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1462394086000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1462394086000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1462394086000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1462394086000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1462394086000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1462394086000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1462394086000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462394086000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462394086000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462394086000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462394086000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421128},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462394086000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1462394086000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462394086000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1462394086000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462394086000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462394086000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462394086000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462394086000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1462394086000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462394086000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462394086000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462394086000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462394086000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462394086000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462394086000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462394086000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462394086000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462394086000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462394086000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462394086000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462394086000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462394086000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462394086000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502420702},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502420702},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421043},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421043},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421050},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421116},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462502421124},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462394086000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462394086000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462394086000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462394086000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462394086000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462394086000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462394086000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462394086000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462394086000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462394086000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462394086000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462394086000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462394086000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462394086000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462394086000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462394086000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462394086000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462394086000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462394086000},{"_id":"public/2015/05/06/e8-a7-a3-e5-86-b3-e9-83-a8-e5-88-86jquery-e6-8f-92-e4-bb-b6-e6-b8-b2-e6-9f-93-e6-97-b6-e5-88-a0-e9-99-a4-e5-8e-9f-e6-a0-87-e7-ad-be-e5-b8-a6-e6-9d-a5-e7-9a-84-e4-ba-8b-e4-bb-b6-e5-a4-b1-e6-95-88/index.html","hash":"31970c9781cd1921017a88f7673abec0afd68ecd","modified":1462506223218},{"_id":"public/2015/05/04/jvm-e7-9a-84-e7-bc-96-e8-af-91-e6-97-b6-e5-a4-9a-e6-80-81-e4-b8-8e-e7-b1-bb-e5-9e-8b-e6-93-a6-e9-99-a4/index.html","hash":"c0d43dc964b590b07558250179ee1a0bf5b69514","modified":1462506223218},{"_id":"public/2015/04/23/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s109-ef-bc-9a-e5-88-86-e7-b1-bb-e8-af-8d-e9-a2-91-e5-88-86-e6-9e-90/index.html","hash":"294bfc480ab267f6ae9279155097ec5db04c5f7d","modified":1462506223218},{"_id":"public/2015/04/16/java8-lambda-e8-a1-a8-e8-be-be-e5-bc-8f-e4-bd-93-e9-aa-8c/index.html","hash":"e980e5a836467cbb4caf49eb1c763dc97ee74b99","modified":1462506223218},{"_id":"public/2015/04/12/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s107-ef-bc-9a-e5-ae-8c-e6-88-90-e5-be-ae-e4-bf-a1-e8-bf-90-e8-90-a5-e8-af-84-e4-bc-b0-e6-a8-a1-e5-9e-8b/index.html","hash":"a186c0d79627a70ec85153c12da33d4f6807f015","modified":1462506223219},{"_id":"public/2015/04/08/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e9-98-b2-e6-ad-a2-e6-8e-a7-e4-bb-b6-e5-88-9d-e5-a7-8b-e5-8c-96-e6-97-b6-e4-b8-a2-e5-a4-b1-e5-b1-9e-e6-80-a7-e3-80-82/index.html","hash":"8b4b8a57f8fff531d6d566e79b0617f4e78d90bb","modified":1462506223219},{"_id":"public/2015/04/08/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e4-b8-ba-e8-87-aa-e5-8a-a8-e5-ae-8c-e6-88-90-e5-8a-9f-e8-83-bd-e5-a2-9e-e5-8a-a0-e5-a4-9a-e5-ad-97-e6-ae-b5-e5-92-8c-e5-9b-9e/index.html","hash":"b6570cdbefd0642741d49d2ecb6a25fa46ccaeca","modified":1462506223219},{"_id":"public/2015/04/07/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s106-ef-bc-9a-e5-be-ae-e4-bf-a1-e8-90-a5-e8-bf-90-e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90/index.html","hash":"e3e6e359e2f0d54425568a09f342e905a0c2ae03","modified":1462506223219},{"_id":"public/2015/04/07/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s104-ef-bc-9a-e5-88-86-e6-9e-90-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80-e5-9c-a8-e6-af-8f-e5-b0-8f-e6-97-b6-e6-af-8f-e5-a4-a9-e7-ad-89-e7-b2-92-e5-ba-a6-e4-b8-8a/index.html","hash":"c75f890fa21efc56248bd6575d315199c6e27111","modified":1462506223219},{"_id":"public/2015/03/31/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s103-ef-bc-9a-e4-bd-bf-e7-94-a8-e7-bb-93-e5-b7-b4-e5-88-86-e8-af-8d-e5-b7-a5-e5-85-b7-e6-8f-90-e5-8f-96-e5-85-b3-e9-94-ae-e8-af-8d/index.html","hash":"2f94c07e08df4cd9d735f8cd656e0c47dcc9e436","modified":1462506223219},{"_id":"public/2015/02/07/e6-8f-90-e5-8f-96-e5-b9-b6-e4-bf-ae-e6-94-b9class-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-b8-b8-e9-87-8f/index.html","hash":"e7fef1c72103a582ff6b9a98a5b5eb44d7fe6a95","modified":1462506223219},{"_id":"public/2015/02/05/e6-a0-b9-e6-8d-aerequest-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip/index.html","hash":"5e0fd402db54a9c79a8aa2b9c4814e63024259b2","modified":1462506223219},{"_id":"public/2015/01/19/Python3实现基于模板及逆向数据库的代码生成器/index.html","hash":"1cab861ff95b1bedf3169b410457f2847f077d2f","modified":1462506223220},{"_id":"public/2015/01/06/easyui-window-e7-bb-84-e4-bb-b6-e4-b8-ad-e5-8c-85-e5-90-abiframe-e5-8f-af-e8-83-bd-e5-bc-95-e5-8f-91-e9-87-8d-e5-a4-8d-e8-af-b7-e6-b1-82-e5-92-8cjquery-e5-bc-82-e5-b8-b8/index.html","hash":"93d5075d8143716575fbb0e5fcee77a00c209747","modified":1462506223219},{"_id":"public/2014/12/15/e3-80-90-e6-88-91-e4-bb-ac-e4-b8-80-e8-b5-b7-e5-ad-a6python-e5-90-a7-e3-80-91-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac4-e6-9c-9f/index.html","hash":"04289f3f9f47a9751b90d4e874780833e20c0943","modified":1462506223220},{"_id":"public/2014/12/11/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac3-e6-9c-9f/index.html","hash":"cbabd3c7842f6ecb50a405d8edaf29cfe81df221","modified":1462506223220},{"_id":"public/2014/12/11/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac2-e6-9c-9f/index.html","hash":"bc994783781bef33f137e8f16db1a216ff3a8101","modified":1462506223221},{"_id":"public/2014/12/11/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98/index.html","hash":"94b0e53754a6962bda470c86cca346f781d173b3","modified":1462506223221},{"_id":"public/archives/page/3/index.html","hash":"ac294e090a5101e75ebe1920d2ea3bb0991b8ccb","modified":1462506223221},{"_id":"public/archives/2014/index.html","hash":"4e095c8bafbc4375b06d5ebec8f8379c77b4998a","modified":1462506223221},{"_id":"public/archives/2014/12/index.html","hash":"c1c873dae9335be784c05218a32f8671c1d68daf","modified":1462506223222},{"_id":"public/archives/2015/page/3/index.html","hash":"2a1ffc1c147498eea881994c0394c5e6851c1b1f","modified":1462506223222},{"_id":"public/archives/2015/01/index.html","hash":"f197d9ebb2b832ddc802a9ed7ae9ac6aa05c7802","modified":1462506223222},{"_id":"public/archives/2015/02/index.html","hash":"3a324f82e44b592b456387ee8e04a432f67e5d1c","modified":1462506223222},{"_id":"public/archives/2015/03/index.html","hash":"33b552162f7d12b02bb354b8b8d997b5ba4ef5bd","modified":1462506223222},{"_id":"public/archives/2015/04/page/2/index.html","hash":"1c9b76b4617ad4e91867095cc08ce2119829b319","modified":1462506223222},{"_id":"public/archives/2015/05/index.html","hash":"ae9749baa3f48c0cdd6ff54f010ba33095be5d8b","modified":1462506223222},{"_id":"public/categories/java/index.html","hash":"19cc7834a454460ba9ce2a9f6e8b787782a900e4","modified":1462506223222},{"_id":"public/categories/python/index.html","hash":"2be874c8ecc2f4107139f469243addf8f0e15eb8","modified":1462506223223},{"_id":"public/categories/python/page/2/index.html","hash":"aba221d0911fe254b8ac6b4d61178bae7bb352a0","modified":1462506223222},{"_id":"public/categories/JavaScript/index.html","hash":"0309c5a96acff30aa92d7e03a93ac50e049b86ff","modified":1462506223222},{"_id":"public/categories/未分类/index.html","hash":"965ab63366e178fb68f42612307f5f3fecbfc3b6","modified":1462506223222},{"_id":"public/categories/JavaScript/前端/index.html","hash":"4b7c7dcfcc0da85f578328b07c478dac4cc0357e","modified":1462506223222},{"_id":"public/tags/java/index.html","hash":"a188050bbfbb369ff6450a1df870a1ceaf0390a4","modified":1462506223222},{"_id":"public/tags/JVM/index.html","hash":"d6821b1880723352bed054ffd1ba479e7d2b2bf1","modified":1462506223222},{"_id":"public/tags/python/index.html","hash":"87078aab219204f88feda05751d92040e53a2944","modified":1462506223224},{"_id":"public/tags/python/page/2/index.html","hash":"e32b28fc0ca48e3ba4fe606081a649d52a91d9f3","modified":1462506223222},{"_id":"public/tags/练习/index.html","hash":"b4b18c41c3f155865ad02f46b4fd34a5d9a5766e","modified":1462506223222},{"_id":"public/tags/每日一题/index.html","hash":"72c347def87169905c6ec4de620a86e9775cafb7","modified":1462506223222},{"_id":"public/tags/bootstrap/index.html","hash":"17aef78c27d32a3b23b1959a1633c60ebbe5b690","modified":1462506223223},{"_id":"public/tags/javaScript/index.html","hash":"a2e9a468c52cf8203d7b85886dfe899afa2cae52","modified":1462506223223},{"_id":"public/tags/jQuery/index.html","hash":"00eca7d8f94a3dc5b36326dab05981dc5c7f5150","modified":1462506223223},{"_id":"public/tags/数据分析/index.html","hash":"402a80cc5cdcc817b3a2059b3f6b4ade9b9e9707","modified":1462506223223},{"_id":"public/tags/ip/index.html","hash":"8fe85af5f4305ac4a7e07ac1f46ac9570069cc37","modified":1462506223223},{"_id":"public/tags/j2ee/index.html","hash":"16855932be2c2779f7395b496972033842a4df23","modified":1462506223223},{"_id":"public/tags/keygen/index.html","hash":"dfb2057abaf18b64e31f77ab9a9fa7e358828125","modified":1462506223223},{"_id":"public/tags/加密/index.html","hash":"deacb5e6bc963d49c328db7628e1a8f282268e0d","modified":1462506223223},{"_id":"public/tags/rsa/index.html","hash":"90b20cc5470ef2d2d9e244401e7de1468cc1d0d8","modified":1462506223223},{"_id":"public/tags/PythonChallenge/index.html","hash":"2e792e0a801e9a67223136d37486532aa842ce12","modified":1462506223223},{"_id":"public/2015/04/24/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s110-ef-bc-9a-e7-bd-91-e7-ab-99-e9-93-be-e6-8e-a5-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89/index.html","hash":"c06163583e200df7ab17d389624cf1488f6fd7a3","modified":1462506223218},{"_id":"public/2015/04/17/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s108-ef-bc-9a-e5-be-ae-e4-bf-a1-e6-96-87-e7-ab-a0-e5-af-86-e5-ba-a6-e7-9a-84-e5-bd-b1-e5-93-8d/index.html","hash":"5f8c1d6961732291534ba4aa8b46f90e187a7487","modified":1462506223218},{"_id":"public/2015/04/10/python-e5-ae-9e-e7-8e-b0lambda-switch-lambda-e7-bb-93-e6-9e-84-ef-bc-8c-e5-90-91lambda-e5-86-85-e6-8f-92-e5-85-a5-e5-88-86-e6-94-af-e7-bb-93-e6-9e-84/index.html","hash":"fb7c0d6ae18e0655a76e17ae5dc99ef14f501498","modified":1462506223223},{"_id":"public/2015/04/01/e4-bb-bb-e6-84-8f-e6-8c-89-e9-94-ae-e5-ae-9e-e7-8e-b0tab-e5-92-8cshifttab-e9-81-8d-e5-8e-86html-e5-85-83-e7-b4-a0-e7-9a-84-e5-8a-9f-e8-83-bd/index.html","hash":"5aa616848382ad4b194c884ef8ce5896c0225f5b","modified":1462506223219},{"_id":"public/2015/03/20/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s01-ef-bc-9a-e4-bb-8emht-e6-96-87-e4-bb-b6-e4-b8-ad-e6-8f-90-e5-8f-96qq-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80/index.html","hash":"865fbf5cdd34c8d1d7746d1bc0e4a67d6a4a191f","modified":1462506223219},{"_id":"public/2015/03/11/easyui-validatebox-e7-9a-84-e7-ac-ac-e4-b8-89-e7-a7-8d-e6-8c-87-e5-ae-9avalidtype-e6-96-b9-e5-bc-8f-e6-97-a0-e6-95-88/index.html","hash":"7acf59ab9912daed9feed1ae3c71c9d88c4a84a0","modified":1462506223219},{"_id":"public/2015/02/07/76/index.html","hash":"0adc25a8734822c15ab032be672d33e233e14678","modified":1462506223223},{"_id":"public/2014/12/24/pythonchallenge-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-950-17/index.html","hash":"86715a1a72a4c22c48d771df19ab1d02df5d8816","modified":1462506223223},{"_id":"public/2014/12/10/python3-e5-ad-a6-e4-b9-a0-e6-b3-a8-e5-86-8c-e6-9c-ba-e7-9a-84-e5-ae-9e-e7-8e-b0/index.html","hash":"c0d459dd60dc253540ef99eccea5836dcec41ccc","modified":1462506223223},{"_id":"public/archives/index.html","hash":"50e55e6c54f16f24db83bd8d5af845ab1444a7f6","modified":1462506223223},{"_id":"public/archives/page/2/index.html","hash":"5062dd1345eea3be8bc1a45dafff4e1fd21bf65f","modified":1462506223223},{"_id":"public/archives/2015/index.html","hash":"9620502d201cabf4d572debf080db0c63be7f8bc","modified":1462506223223},{"_id":"public/archives/2015/page/2/index.html","hash":"28630cf7b046abc99cba7ea35bf4117a3a9e1ab6","modified":1462506223223},{"_id":"public/archives/2015/04/index.html","hash":"5171add4311dbd912489fbc711e54a24a01c9ca6","modified":1462506223223},{"_id":"public/index.html","hash":"b5f00ad58935bf6b341e71966f51e943c30e62bf","modified":1462506223223},{"_id":"public/page/2/index.html","hash":"8b1030c6ca42b8c64d1b9e2e05084841c569d531","modified":1462506223223},{"_id":"public/page/3/index.html","hash":"c9ad9897054f57d3e3bc84831631440a6794d62d","modified":1462506223224},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462504057723},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462504057723},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462504057723},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462504057723},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462504057723},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462504057723},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462504057723},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462504057723},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462504057723},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462504057723},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462504057723},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462504057723},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462504057723},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462504057723},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462504057723},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462504057723},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462504057723},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462504057723},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462504057723},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462504057723},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462504057723},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462504057723},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462504057723},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462504057724},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462504058257},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462504058261},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462504058262},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1462504058268},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1462504058268},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1462504058268},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1462504058268},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1462504058268},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462504058268},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462504058268},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1462504058268},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1462504058268},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462504058268},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462504058268},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462504058268},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462504058268},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462504058268},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462504058269},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462504058269},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462504058269},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462504058269},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462504058269},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462504058269},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462504058269},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462504058269},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462504058269},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462504058269},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462504058269},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462504058269},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462504058269},{"_id":"public/css/main.css","hash":"32327d6566b32e92f1db0faaaa2109e82152ddbe","modified":1462504058269},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462504058269},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462504058269},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462504058269},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462504058269},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462504058269},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462504058269},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462504058269},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462504058269},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1462504058269},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462504058269},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462504058282},{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1459279410000},{"_id":"themes/yilia/_config.yml","hash":"43883234beb50f2a3b3d50918bf1e5ab2910fdf5","modified":1462506219309},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1459279410000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1459279410000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459279410000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1459279410000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1459279410000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1459279410000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459279410000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459279410000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1459279410000},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1459279410000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1459279410000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1459279410000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1459279410000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1459279410000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1459279410000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1459279410000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1459279410000},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1459279410000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1459279410000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1459279410000},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1459279410000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1459279410000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1459279410000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1459279410000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1459279410000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1459279410000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1459279410000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1459279410000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1459279410000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1459279410000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1459279410000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1459279410000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1459279410000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1459279410000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1459279410000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1459279410000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1459279410000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1459279410000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1459279410000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1459279410000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1459279410000},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1459279410000},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1459279410000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1459279410000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1459279410000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1459279410000},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462504356992},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462504356992},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462504356992},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462504356992},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462504356992},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1462504356992},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1462504356992},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462504356992},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1462504356992},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1462504356992},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1462504356992},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1462504356992},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1462504356993},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1462504356993},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1462504356993},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1462504356993},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1462504356993},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1462504356993},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1462504356993},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1462504356993},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1462504356993},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1462504356993},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1462504356993},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1462504356993},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1462504356993},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1462504356993},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462504356993},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1462504356993},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1462504356993},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1462504357703},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1462504357705},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1462504357705},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1462504357705},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1462504357705},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1462504357705},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1462504357705},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1462504357705},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462504357705},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1462504357705},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462504357705},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1462504357705},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1462504357705},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1462504357705},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1462504357705},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1459279410000}],"Category":[{"name":"java","_id":"cinv54z1n0003d0chrexkb3n3"},{"name":"python","_id":"cinv54z1r0008d0ch3isaz4b0"},{"name":"JavaScript","_id":"cinv54z2b000jd0chop644o8k"},{"name":"未分类","_id":"cinv54z2p0011d0ch8iplvo1d"},{"name":"前端","parent":"cinv54z2b000jd0chop644o8k","_id":"cinv54z32001gd0chlsq96px1"}],"Data":[],"Page":[],"Post":[{"title":"Class文件内容及常量池","id":"76","date":"2015-02-07T07:14:15.000Z","_content":"\n当JVM运行Java程序的时候，它会加载对应的class文件，并提取class文件中的信息存放在JVM开辟出来的<span style=\"color: #0000ff;\">方法区</span> 内存中。那么这个class文件里面到底有些什么内容呢？\n\n&nbsp;\n\n**<span style=\"color: #800080;\">一、class文件内容概述</span> **\n\n&nbsp;\n\nclass文件是由8bits的字节流组成，全部字节构成了15个有意义的项目。这些项目之间没有任何无意义的字节，因此class文件非常紧凑。占据多字节空间的项目按照高位在前的顺序存放。下面我们详细讨论这些项目：\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ magic(魔数)**   <span style=\"color: #000000;\"> 每个class文件的前4个字节称为魔数，值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ minor_version、major_version(次、主版本号)  ** <span style=\"color: #000000;\">各占2个字节。随着Java技术的发展，class文件的格式会发生变化。版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ constant_pool_count ** **、constance_pool（常量池）  ** <span style=\"color: #000000;\">从这里开始的字节组成了<span style=\"color: #0000ff;\"><span style=\"color: #000000;\">常量池</span> <span style=\"color: #000000;\">。</span> </span> 存储了诸如符号常量、final常量值、基本数据类型的字面值等内容。JVM会将每一个常量构成一个常量表，每个常量表都有自己的入口地址。而实际上在JVM会将这些常量表存储在方法区中一块连续的内存空间中，因此class文件会根据常量表在常量池中的位置对其进行索引。比如常量池中的第一个常量表的索引值就是1，第二个就是2。有的时候常量表A需要常量表B的内容，则在常量表A中会存储常量表B的索引值x。而constant_pool_count就记录了有多少个常量表，或则所有多少个索引值。实际上，常量池中没有索引值为0的常量表，但这缺失的索引值也被记录在</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count中，因此</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count等于常量表的数量加1。关于常量池的具体内容，我们会在下面详细讲述，并用一个例子来显示整个class文件的内容。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ access_flags(访问标志)   ** <span style=\"color: #000000;\">占用2个字节。用来表明该class文件中定义的是类还是接口，访问修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ this_class** </span>     占用2个字节。  它是一个对常量池的索引。指向的是常量池中存储类名符号引用的CONSTANT_Class_info常量表(见下面常量池具体结构)。比如this_class=0x0001。则表示指向常量池中的第一个常量表。通常这个表是指向当前class文件所定义的类名。\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ super_class  占用2个字节<span style=\"color: #000000;\">  </span> ** <span style=\"color: #000000;\">与this_class类似，指向存放当前class文件所定义类的超类名字的索引的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表。</span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ inteface_count、interfaces  ** <span style=\"color: #000000;\">interface_count是class文件所定义的类直接实现的接口或父类实现的接口的数量。占2个字节。intefaces包含了对每个接口的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表的索引。</span> <span style=\"color: #800080;\">\n</span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★fields_count、fields   ** <span style=\"color: #000000;\">fields_count表明了类中字段的数量</span> </span> <span style=\"color: #000000;\">。fields是不同长度的field_info表的序列。这些field_info表中并不包含超类或父接口继承而来的字段。field_info表展示了一个字段的信息，包括字段的名字，描述符和修饰符。如果该字段是final的，那么还会展示其常量值。注意，这些信息有些存放在field_info里面，有些则存放在field_info所指向的常量池中。下面我们阐述一下这个field_info表的格式：</span>\n\naccess_flags(2byte 访问修饰符)\n\nname_index(2byte 存储字段名的常量表在常量池中的索引)\n\ndescription_index(2byte 存储字段的所属类型的常量表在常量池中的索引)\n\nattribute_count(2byte 属性表的数量)\n\nattribute (属性)\n\n其中attribute是由多个attribute_info组成。而JVM规范定义了字段的三种属性：ConstanceValue、Deprecated和Synthetic。\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★method_count、<span style=\"color: #800080;\">methods </span> ** <span style=\"color: #000000;\">与字段类似，method_count表明类中方法的数量和每个方法的常量表的索引。methods表明了不同长度的method_info表的序列。该表格式如下：</span> </span>\n\naccess_flags(2byte 访问修饰符)\n\nname_index(2byte 存储方法名的常量表在常量池中的索引)\n\ndescription_index(2byte 存储方法的返回类型和参数类型的常量表在常量池中的索引)\n\nattribute_count(2byte 属性表的数量)\n\nattribute (属性)\n\n其中方法的属性JVM规定了四种：Code，Deprecated，Exceptions，Synthetic。\n\n&nbsp;\n\n&nbsp;\n\n**<span style=\"color: #800080;\">二、常量池的具体结构</span> **\n\n在Java程序中，有很多的东西是永恒的，不会在运行过程中变化。比如一个类的名字，一个类字段的名字/所属类型，一个类方法的名字/返回类型/参数名与所属类型，一个常量，还有在程序中出现的大量的字面值。比如下面小段源码红色显示的东西。\n\npublic class <span style=\"color: #ff0000;\">ClassTest</span> {\n\nprivate <span style=\"color: #ff0000;\">String</span> <span style=\"color: #ff0000;\">itemS</span> =\"<span style=\"color: #ff0000;\">我们</span> \";\n\nprivate final <span style=\"color: #ff0000;\">int itemI</span> =<span style=\"color: #ff0000;\">100</span> ;\n\npublic <span style=\"color: #ff0000;\">void setItemS</span> (<span style=\"color: #ff0000;\">String para</span> ){...}\n\n}\n\n而这些在JVM解释执行程序的时候是非常重要的。那么编译器将源程序编译成class文件后，会用一部分字节分类存储这些永恒不变的红色东西。而这些字节我们就成为常量池。事实上，只有JVM加载class后，在方法区中为它们开辟了空间才更像一个“池”。\n\n&nbsp;\n\n正如上面所示，一个程序中有很多永恒的红色东西。每一个都是常量池中的一个常量表(常量项)。而这些常量表之间又有不同，class文件共有11种常量表，如下所示：\n<table style=\"border: 0pt solid #2a27d8; height: 248px;\" border=\"0\" width=\"541\">\n<tbody>\n<tr>\n<td><span style=\"color: #0000ff;\">常量表类型</span></td>\n<td><span style=\"color: #0000ff;\">标志值(占1 byte)</span></td>\n<td><span style=\"color: #0000ff;\">描述</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Utf8</span></td>\n<td><span style=\"color: #0000ff;\">1</span></td>\n<td><span style=\"color: #0000ff;\">UTF-8编码的Unicode字符串</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Integer</span></td>\n<td><span style=\"color: #0000ff;\">3</span></td>\n<td><span style=\"color: #0000ff;\">int类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Float</span></td>\n<td><span style=\"color: #0000ff;\">4</span></td>\n<td><span style=\"color: #0000ff;\">float类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Long</span></td>\n<td><span style=\"color: #0000ff;\">5</span></td>\n<td><span style=\"color: #0000ff;\">long类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Double</span></td>\n<td><span style=\"color: #0000ff;\">6</span></td>\n<td><span style=\"color: #0000ff;\">double类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Class</span></td>\n<td><span style=\"color: #0000ff;\">7</span></td>\n<td><span style=\"color: #0000ff;\">对一个类或接口的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_String</span></td>\n<td><span style=\"color: #0000ff;\">8</span></td>\n<td><span style=\"color: #0000ff;\">String类型字面值的引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Fieldref</span></td>\n<td><span style=\"color: #0000ff;\">9</span></td>\n<td><span style=\"color: #0000ff;\">对一个字段的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Methodref</span></td>\n<td><span style=\"color: #0000ff;\">10</span></td>\n<td><span style=\"color: #0000ff;\">对一个类中方法的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_InterfaceMethodref</span></td>\n<td><span style=\"color: #0000ff;\">11</span></td>\n<td><span style=\"color: #0000ff;\">对一个接口中方法的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_NameAndType</span></td>\n<td><span style=\"color: #0000ff;\">12</span></td>\n<td><span style=\"color: #0000ff;\">对一个字段或方法的部分符号引用</span></td>\n</tr>\n</tbody>\n</table>\n<span style=\"color: #ff0000;\">(1) </span> <span style=\"color: #ff0000;\">CONSTANT_Utf8   用UTF-8编码方式来表示程序中所有的重要常量字符串。<span style=\"color: #000000;\">这些字符串包括：</span> </span> ①类或接口的全限定名， ②超类的全限定名，③父接口的全限定名， ④类字段名和所属类型名，⑤类方法名和返回类型名、以及参数名和所属类型名。⑥字符串字面值\n\n表格式：   tag(标志1：占1byte)       length(字符串所占字节的长度，占2byte)      bytes(字符串字节序列)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(2) </span> <span style=\"color: #ff0000;\">CONSTANT_Integer、</span> <span style=\"color: #ff0000;\">CONSTANT_Float、</span> <span style=\"color: #ff0000;\">CONSTANT_Long、</span> <span style=\"color: #ff0000;\">CONSTANT_Double  所有基本数据类型的字面值。<span style=\"color: #000000;\">比如在程序中出现的1用CONSTANT_Integer表示。<span style=\"color: #000000;\">3.1415926F用</span> </span> </span> <span style=\"color: #000000;\">CONSTANT_Float表示。</span> <span style=\"color: #ff0000;\">\n</span>\n\n表格式：   tag             bytes(基本数据类型所需使用的字节序列)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(3) </span> <span style=\"color: #ff0000;\">CONSTANT_Class  使用符号引用来表示类或接口。<span style=\"color: #000000;\">我们知道所有类名都以</span> </span> <span style=\"color: #000000;\">CONSTANT_Utf8表的形式存储。但是我们并不知道</span> <span style=\"color: #000000;\">CONSTANT_Utf8表中哪些字符串是类名，那些是方法名。因此我们必须用一个指向类名字符串的符号引用常量来表明。</span>\n\n表格式：   tag    name_index(给出表示类或接口名的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(4)</span> <span style=\"color: #ff0000;\">CONSTANT_String  同</span> <span style=\"color: #ff0000;\">CONSTANT_Class，指向包含字符串字面值的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span>\n\n表格式：   tag    string_index(给出表示字符串字面值的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(5)</span> <span style=\"color: #ff0000;\">CONSTANT_Fieldref</span> <span style=\"color: #ff0000;\">、</span> <span style=\"color: #ff0000;\">CONSTANT_Methodref、</span> <span style=\"color: #ff0000;\">CONSTANT_InterfaceMethodref</span> <span style=\"color: #ff0000;\">  </span> <span style=\"color: #ff0000;\">  指向包含该字段或方法所属类名的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表，以及指向包含该字段或方法的名字和描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType</span> <span style=\"color: #ff0000;\">表</span>\n\n表格式：   tag   class _index(给出包含所属类名的CONSTANT_Utf8表的索引)  name_and_type_index(包含字段名或方法名以及描<span style=\"color: #000000;\">述符的</span> <span style=\"color: #000000;\">CONSTANT_NameAndType表</span> <span style=\"color: #000000;\">的索引)</span>\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(6)</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType </span> <span style=\"color: #ff0000;\">指向包含字段名或方法名以及描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span>\n\n表格式：   tag    name_index(给出表示字段名或方法名的CONSTANT_Utf8表的索引)  type_index(给出表示描述符的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n下面是我将一个源程序编译成class文件后，对文件中的每一个字节的分析，可以更好的理解class文件的内容以及常量池的组成。\n\n&nbsp;\n\n&nbsp;\n\n**<span style=\"color: #800080;\">三、TestClass.class 文件实例分析</span> **\n\n[java]\n//源代码\npackage hr.test;\n//ClassTest类\npublic class ClassTest {\n\tprivate int itemI=0;  //itemI类字段\n\tprivate static String itemS=&quot;我们&quot;; //itemS类字段\n\tprivate final float PI=3.1415926F;  //PI类字段\n\t//构造器方法\n\tpublic ClassTest(){\n\t}\n\t//getItemI方法\n\tpublic int getItemI(){\n\t\treturn this.itemI;\n\t}\n\t//getItemS方法\n\tpublic static String getItemS(){\n\t\treturn itemS;\n\t}\n\t//main主方法\n\tpublic static void main(String[] args) {\n\t\tClassTest ct=new ClassTest();\n\t}\n}\n[/java]\n\n<pre class=\"java\" style=\"display: none;\" title=\"Class文件内容及常量池\">//源代码\npackage hr.test;\n//ClassTest类\npublic class ClassTest {\n\tprivate int itemI=0;  //itemI类字段\n\tprivate static String itemS=\"我们\"; //itemS类字段\n\tprivate final float PI=3.1415926F;  //PI类字段\n\t//构造器方法\n\tpublic ClassTest(){\n\t}\n\t//getItemI方法\n\tpublic int getItemI(){\n\t\treturn this.itemI;\n\t}\n\t//getItemS方法\n\tpublic static String getItemS(){\n\t\treturn itemS;\n\t}\n\t//main主方法\n\tpublic static void main(String[] args) {\n\t\tClassTest ct=new ClassTest();\n\t}\n}\n</pre>\n&nbsp;\n\n<span style=\"color: #800080;\">TestClass.class 字节码分析<span style=\"color: #000000;\">(字节顺序从上到下，从左到右。每个字节用一个0-255的十进制整数表示)</span> </span>\n\n&nbsp;\n\n<span style=\"background-color: #fbe3fc;\">     **202 254 186 190**   <span style=\"color: #000000;\">-- 魔数</span> <span style=\"color: #000000;\">             </span>                                                                                      </span> \n<span style=\"background-color: #fbe3fc;\">     **0 0**     <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">-- 次版本号</span>  </span>                                                                                                              </span>                    \n<span style=\"background-color: #fbe3fc;\">     **0 50**   <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">-- 主版本号   </span>   </span>                                                                                                          </span>\n\n<span style=\"background-color: #d6d6ff;\">     **0 43**   <span style=\"color: #000000;\">-- 常量池中常量表的数量有42个，下面红色括号中的数据表明该常量表所在常量池中的索引，从索引1开始</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(1) </span> **7 0 2 ** </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 对类ClassTest的符号引用(7为标志  02指向了常量池的索引2的位置) </span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(2) **<span style=\"color: #000000;\">1</span> ** </span> </span> **<span style=\"background-color: #d6d6ff;\">0 17 104 114 47 116 101 115 116 47 67 108 97 115 115 84 101 115 116  </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 类全限定名hr\\test\\ClassTest</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(3) </span> </span> <span style=\"background-color: #d6d6ff;\">**7 0 4 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- 对类Object的符号引用</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(4) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 16 106 97 118 97 47 108 97 110 103 47 79 98 106 101 99 116**   <span style=\"color: #000000;\">-- 超类全限定名 java/lang/Object   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(5) </span> </span> <span style=\"background-color: #d6d6ff;\">**1** ** 0 5 105 116 101 109 73 **   <span style=\"color: #000000;\">--  第1个类字段名 itemI   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(6) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 1 73**    <span style=\"color: #000000;\">--  I  第1个类字段类型为整型</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(7) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 5 105 116 101 109 83 **   <span style=\"color: #000000;\">--  第2个类字段名 itemS</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(8) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 18 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 **   <span style=\"color: #000000;\">--  第2个类字段类型的全限定名 Ljava/lang/String</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(9) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 2 80 73** <span style=\"color: #000000;\">-- 第3个类字段名PI</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(10) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 1 70 ** <span style=\"color: #000000;\">-- 第3个类字段类型为float</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(11) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 13 67 111 110 115 116 97 110 116 86 97 108 117 101 **   <span style=\"color: #000000;\">---  第3个类字段为常量ConstantValue</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(12) </span> </span> <span style=\"background-color: #d6d6ff;\">**4 64 73 15 218**   <span style=\"color: #000000;\">-- 第3个类字段float字面值,占4bytes(3.1415926)</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(13) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 8 60 99 108 105 110 105 116 62 **   <span style=\"color: #000000;\">-- &lt;clinit&gt;  初始化方法名</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(14) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 3 40 41 86**    <span style=\"color: #000000;\"> -- </span> <span style=\"color: #000000;\">()V 方法的返回类型为void</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(15) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 4 67 111 100 101  ** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">-- Code</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(16) </span> </span> <span style=\"background-color: #d6d6ff;\">**8 0 17** <span style=\"color: #000000;\">-- String字符串字面值（0 17表示索引1 7） </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(17) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 6 230 136 145 228 187 172**  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- \"我们\"</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(18) </span> </span> <span style=\"background-color: #d6d6ff;\">**9 0 1 0 19 ** <span style=\"color: #000000;\"> -- 指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的引用(0 1指向索引1，0 19指向索引19） </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(19) </span> </span> <span style=\"background-color: #d6d6ff;\">**12 0 7 0 8** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">--指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的名字和描述符的索引， </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(20) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 15 76 105 110 101 78 117 109 98 101 114 84 97 98 108 101 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- LineNumberTable</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(21) </span> </span> <span style=\"background-color: #d6d6ff;\">**0 18 76 111 99 97 108 86 97 114 105 97 98 108 101 84 97 98 108 101 **   <span style=\"color: #0000ff;\">-<span style=\"color: #000000;\">- LocalVariableTable</span> </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(22) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 6 60 105 110 105 116 62**   <span style=\"color: #000000;\">-- &lt;init&gt;   表示初始化方法名 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(23) </span> </span> <span style=\"background-color: #d6d6ff;\">**10 0 3 0 24** <span style=\"color: #000000;\"> --  指向父类Object的构造器方法，0 3表示父类名常量表的索引，0 24表示存放该方法名称和描述符的引用的常量表的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(24) </span> </span> <span style=\"background-color: #d6d6ff;\">**12 0 22 0 14 ** <span style=\"color: #000000;\">--  指向方法名和描述符的常量表的索引。0 22是方法名的常量表索引，0 14是描述符的常量表索引</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(25) </span> </span> **<span style=\"background-color: #d6d6ff;\">9 0 1 0 26    </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第1个字段的引用， 0 1表示字段所属类型的索引，0 26表示字段名和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(26) </span> </span> **<span style=\"background-color: #d6d6ff;\">12 0 5 0 6  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">--</span> </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\"> 指向第1个字段的名字和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(27) </span> </span> **<span style=\"background-color: #d6d6ff;\">9 0 1 0 28    </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第3个字段的引用， 0 1表示字段所属类型的索引，0 28表示字段名和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(28) </span> </span> **<span style=\"background-color: #d6d6ff;\">12 0 9 0 10  </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第3个字段的名字和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(29)</span> **1 0 4 116 104 105 115**    <span style=\"color: #000000;\">--  隐含参数符号this</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(30)</span> **1 0 11 76 67 108 97 115 115 84 101 115 116 59**    <span style=\"color: #000000;\">--  LClassTest;</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(31)</span> **1 0 8 103 101 116 73 116 101 109 73**    <span style=\"color: #000000;\">-</span> <span style=\"color: #000000;\">- 方法名 getItemI</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(32)</span> **1 0 3 40 41 73**    <span style=\"color: #000000;\">-- </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">()I  </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">方法描述符:返回类型int </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(33)</span> **1 0 8 103 101 116 73 116 101 109 83** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">--  方法名 getItemS</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(34)</span> **1 0 20 40 41 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 **    <span style=\"color: #000000;\">--- 方法描述符()Ljava/lang/String;</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(35)</span> **1 0 4 109 97 105 110 **    <span style=\"color: #000000;\">--  主方法名main</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(36)</span> **1 0 22 40 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 41 86**    <span style=\"color: #000000;\">---  ()Ljava/lang/String;)V  主方法中的参数的字符串数组类型名</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(37)</span> ** 10 0 1 0 24    ** <span style=\"color: #000000;\">指向当前</span> </span> <span style=\"color: #0000ff;\"><span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">ClassTest </span> </span> <span style=\"background-color: #d6d6ff;\"><span style=\"color: #000000;\">类的构造器方法，0 1表示存放当前类名的常量表的索引。0 24是存放方法名和描述符的符号引用的常量表索引。</span>   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(38)</span> **1 0 4 97 114 103 115 ** <span style=\"color: #000000;\">-- 参数args</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(39)</span> **1 0 19 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59**   <span style=\"color: #000000;\">-- 字符串数组 [Ljava/lang/String; </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(40)</span> **1 0 2 99 116**    <span style=\"color: #000000;\">---  对象符号ct</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(41)</span> **1 0 10 83 111 117 114 99 101 70 105 108 101 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- SourceFile</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(42)</span> **1 0 14 67 108 97 115 115 84 101 115 116 46 106 97 118 97**    <span style=\"color: #000000;\">-- ClassTest.java    </span> </span>\n\n&nbsp;\n\n<span style=\"background-color: #ffffd6; color: #000000;\">**       0 33** ---- access_flag 访问标志  public\n**       ** **0 1**   ---- this_class  指向当前类的符号引用在常量池中的索引\n**       ** **0 3 ** ---- super_class</span> \n**       ** **0 0 ** <span style=\"background-color: #ffffd6;\">---- inteface_count接口的数量</span> \n\n<span style=\"background-color: #d6ead6; color: #000000;\">**       0 3**   ---  field_count字段的数量</span>\n\n<span style=\"background-color: #d6ead6; color: #000000;\">       // </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemI</span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 2 ** ---- private 修饰符\n**       0 5 ** ---- 字段名在常量池中的索引，字段itemI\n**       0 6**   ---- 字段的描述符(所属类型)在常量池中的索引\n**       0 0**   ---  字段的属性信息表(attribute_info)的数量\n</span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemS</span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 10**   ----  private static 修饰符\n**       0 7 ** ---字段名在常量池中的索引，字段itemS\n**       0 8 ** ---字段的描述符(所属类型)在常量池中的索引\n**       0 0 ** ---  字段的属性信息表(attribute_info)的数量\n</span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 PI  </span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 18**   -- private final 修饰符\n**       0 9** ---字段名在常量池中的索引，//字段PI\n**       0 10** ---字段的描述符(所属类型)在常量池中的索引\n**       0 1 ** --- 字段的属性信息表(attribute_info)的数量\n**       0 11**   --- 属性名在常量池中的索引。即ConstantValue\n**       0 0 0 2** --- 属性所占的字节长度\n**       0 12**   --- 属性值在常量池中的索引。即常量字面值</span> \n\n**       0 5  -- ** <span style=\"background-color: #ccd6e0;\">Method_count方法的数量</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//类的静态数据初始化方法&lt;clinit&gt;</span> \n**       0 8 ** <span style=\"background-color: #ccd6e0;\">---- static 修饰符(所有的初始化方法都是static的)</span> \n**       0 13 ** <span style=\"background-color: #ccd6e0;\">--- 在常量池中的索引。初始化方法名&lt;clinit&gt;，该方法直接由JVM在特定的时候调用，并非由字节码生成。</span> \n**       0 14 --- ** <span style=\"background-color: #ccd6e0;\">在常量池中的索引。返回类型为void。</span>\n\n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 -- ** <span style=\"background-color: #ccd6e0;\">属性名</span> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。即code</span> \n**       0 0 0 42 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度2</span> \n**       0 1 0 0 0 0 0 6 18 16 179 0 18 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 5 0 5 0 2 0 21 0 0 0 2 0 0 ** <span style=\"background-color: #ccd6e0;\">---该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//类的普通实例数据的初始化方法，针对类构造器生成的&lt;init&gt;方法。</span> \n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">public 修饰符</span> \n**       0 22 ** <span style=\"background-color: #ccd6e0;\">--- 构初始化方法名&lt;init&gt;</span> \n**       0 14 --- ** <span style=\"background-color: #ccd6e0;\">构造器的返回类型为void</span> \n**       0 1  --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 ** <span style=\"background-color: #ccd6e0;\">---  属性名在常量池中的索引。即Code</span> \n**       0 0 0 70 --** <span style=\"background-color: #ccd6e0;\">属性所占的字节长度70</span> \n**       0 2 0 1 0 0 0 16 42 183 0 23 42 3 181 0 25 42 18 12 181 0 27 177 0 0 0 2 0 200 0 0 18 0 4 0 0 0 ** **8 0 4 0 4 0 9 0 6 0 15 0 9 0 21 0 0 0 12 0 10 0 0 16 0 29 0 30 0 0** <span style=\"background-color: #ccd6e0;\">---该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//getItemI方法</span> \n**       0 1 ** <span style=\"background-color: #ccd6e0;\">--- public 修饰符</span> \n**       0 31 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法名getItemI</span> \n**       0 32 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法返回类型为int</span> \n**       0 1 -- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15  ** <span style=\"background-color: #ccd6e0;\">--- 属性名在常量池中的索引。即Code</span> \n**       0 0 0 47 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度70</span> \n**       0 1 0 1 0 0 0 5 42 180 0 25 172 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 12 0 21 0 0 0 12 0 1 0 0 0 5 0 29 0 30 0 0  --- ** <span style=\"background-color: #ccd6e0;\">该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//getItemS方法</span> \n**       0 9 ** <span style=\"background-color: #ccd6e0;\">--- public static 修饰符</span> \n**       0 33 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法名getItemS</span> \n**       0 34 -** <span style=\"background-color: #ccd6e0;\">-- 在常量池中的索引。方法返回类型为String</span> \n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 -- ** <span style=\"background-color: #ccd6e0;\">属性名在常量池中的索引。即Code</span> \n**       0 0 0 36 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度36</span> \n**       0 1 0 0 0 0 0 4 178 0 18 176 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 16 0 21 0 0 0 2 0 0** <span style=\"background-color: #ccd6e0;\">--该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//main方法</span> \n**       0 9 ** <span style=\"background-color: #ccd6e0;\">--- public static 修饰符</span> \n**       0 35 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。主方法名main</span> \n**       0 36** <span style=\"background-color: #ccd6e0;\">-- 在常量池中的索引。方法返回类型为String[]</span> \n**       0 1** <span style=\"background-color: #ccd6e0;\"> ---  属性数量</span> \n**       0 15  ** <span style=\"background-color: #ccd6e0;\">---  属性名在常量池中的索引。即Code</span> \n**       0 0 0  65 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度36</span> \n**       0 2 0 2 0 0 0 9 187 0 1 89 183 0 37 76 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 20 0 8 0 21 0 21 0 0 0 22 0 2 0 0 0 9 0 38 0 39 0 0 0 8 0 1 0 40 0 30 0 1 0 1 0 41 0 0 0 2 0 42 **\n\n&nbsp;\n\n&nbsp;\n\n我们分析上面的字节码例子，不难看出：\n\n&nbsp;\n\n蓝色背景的常量池字节码区域：\n\n(1) <span style=\"color: #ff0000;\">所有的字面值都是存放在常量池中的。</span> 特别注意的是“我们”这个字符串常量也是在常量池中的。如果一个程序出现多个“我们”，那么常量池中也只会有一个。另外，也正是因为“我们”存放在常量池中，使得一些字符串的==比较变的需要琢磨了。\n\n(2)<span style=\"color: #ff0000;\">ClassTest并没有任何显示的父类。但在常量池中，我们发现有Object的符号常量存在。</span> 这也证实了在Java中，任何类都直接或间接继承了Object的，而Object并不需要在代码中显示继承，JVM会帮我们做到这一点。\n\n(3)<span style=\"background-color: #ffffff; color: #ff0000;\">常量池中有一个隐含参数this的符号常量。<span style=\"color: #000000;\">即使程序中不存在this，JVM也会悄悄的设置一个这样的对象。</span> </span>\n\n&nbsp;\n\n绿色背景的类字段字节码区域：\n\n(1)字段PI是浮点型常量，<span style=\"color: #ff0000;\">在编译期的字节码中就已经指定好了PI的字面值存储在常量池中的某个索引内</span> 。这一点也证实了Java中的常量在编译期就已经得到了值，在运行过程中是无法改变的。\n\n&nbsp;\n\n灰背景的类方法字节码区域：\n\n(1)<span style=\"color: #ff0000;\">主方法main是作为ClassTest的类方法存在的，在字节码中main和其他的类方法并没有什么区别。</span> 实际上，我们也确实可以通过ClassTest.main(..)来调用ClassTest中的main方法。\n\n&nbsp;\n\n(2)在class文件常量池字节码中有两个比较特别的方法名符号：&lt;clinit&gt;和&lt;init&gt;。其中&lt;clinit&gt;方法是编译器自己生成的，<span style=\"color: #ff0000;\">编译器会把类静态变量的直接初始化语句和静态初始化语句块的代码都放到了class文件的&lt;clinit&gt;方法中。而对所有非静态非常量数据域的初始化工作要靠&lt;init&gt;方法来完成。<span style=\"color: #000000;\">针对每一个类的构造方法，编译器都会产生一个&lt;init&gt;方法。即使是缺省构造器也不例外。</span></span>","source":"_posts/76.md","raw":"---\ntitle: Class文件内容及常量池\ntags:\n  - java\n  - JVM\nid: 76\ncategories:\n  - java\ndate: 2015-02-07 15:14:15\n---\n\n当JVM运行Java程序的时候，它会加载对应的class文件，并提取class文件中的信息存放在JVM开辟出来的<span style=\"color: #0000ff;\">方法区</span> 内存中。那么这个class文件里面到底有些什么内容呢？\n\n&nbsp;\n\n**<span style=\"color: #800080;\">一、class文件内容概述</span> **\n\n&nbsp;\n\nclass文件是由8bits的字节流组成，全部字节构成了15个有意义的项目。这些项目之间没有任何无意义的字节，因此class文件非常紧凑。占据多字节空间的项目按照高位在前的顺序存放。下面我们详细讨论这些项目：\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ magic(魔数)**   <span style=\"color: #000000;\"> 每个class文件的前4个字节称为魔数，值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ minor_version、major_version(次、主版本号)  ** <span style=\"color: #000000;\">各占2个字节。随着Java技术的发展，class文件的格式会发生变化。版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ constant_pool_count ** **、constance_pool（常量池）  ** <span style=\"color: #000000;\">从这里开始的字节组成了<span style=\"color: #0000ff;\"><span style=\"color: #000000;\">常量池</span> <span style=\"color: #000000;\">。</span> </span> 存储了诸如符号常量、final常量值、基本数据类型的字面值等内容。JVM会将每一个常量构成一个常量表，每个常量表都有自己的入口地址。而实际上在JVM会将这些常量表存储在方法区中一块连续的内存空间中，因此class文件会根据常量表在常量池中的位置对其进行索引。比如常量池中的第一个常量表的索引值就是1，第二个就是2。有的时候常量表A需要常量表B的内容，则在常量表A中会存储常量表B的索引值x。而constant_pool_count就记录了有多少个常量表，或则所有多少个索引值。实际上，常量池中没有索引值为0的常量表，但这缺失的索引值也被记录在</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count中，因此</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count等于常量表的数量加1。关于常量池的具体内容，我们会在下面详细讲述，并用一个例子来显示整个class文件的内容。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ access_flags(访问标志)   ** <span style=\"color: #000000;\">占用2个字节。用来表明该class文件中定义的是类还是接口，访问修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。</span> </span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ this_class** </span>     占用2个字节。  它是一个对常量池的索引。指向的是常量池中存储类名符号引用的CONSTANT_Class_info常量表(见下面常量池具体结构)。比如this_class=0x0001。则表示指向常量池中的第一个常量表。通常这个表是指向当前class文件所定义的类名。\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ super_class  占用2个字节<span style=\"color: #000000;\">  </span> ** <span style=\"color: #000000;\">与this_class类似，指向存放当前class文件所定义类的超类名字的索引的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表。</span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★ inteface_count、interfaces  ** <span style=\"color: #000000;\">interface_count是class文件所定义的类直接实现的接口或父类实现的接口的数量。占2个字节。intefaces包含了对每个接口的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表的索引。</span> <span style=\"color: #800080;\">\n</span>\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★fields_count、fields   ** <span style=\"color: #000000;\">fields_count表明了类中字段的数量</span> </span> <span style=\"color: #000000;\">。fields是不同长度的field_info表的序列。这些field_info表中并不包含超类或父接口继承而来的字段。field_info表展示了一个字段的信息，包括字段的名字，描述符和修饰符。如果该字段是final的，那么还会展示其常量值。注意，这些信息有些存放在field_info里面，有些则存放在field_info所指向的常量池中。下面我们阐述一下这个field_info表的格式：</span>\n\naccess_flags(2byte 访问修饰符)\n\nname_index(2byte 存储字段名的常量表在常量池中的索引)\n\ndescription_index(2byte 存储字段的所属类型的常量表在常量池中的索引)\n\nattribute_count(2byte 属性表的数量)\n\nattribute (属性)\n\n其中attribute是由多个attribute_info组成。而JVM规范定义了字段的三种属性：ConstanceValue、Deprecated和Synthetic。\n\n&nbsp;\n\n<span style=\"color: #800080;\">**★method_count、<span style=\"color: #800080;\">methods </span> ** <span style=\"color: #000000;\">与字段类似，method_count表明类中方法的数量和每个方法的常量表的索引。methods表明了不同长度的method_info表的序列。该表格式如下：</span> </span>\n\naccess_flags(2byte 访问修饰符)\n\nname_index(2byte 存储方法名的常量表在常量池中的索引)\n\ndescription_index(2byte 存储方法的返回类型和参数类型的常量表在常量池中的索引)\n\nattribute_count(2byte 属性表的数量)\n\nattribute (属性)\n\n其中方法的属性JVM规定了四种：Code，Deprecated，Exceptions，Synthetic。\n\n&nbsp;\n\n&nbsp;\n\n**<span style=\"color: #800080;\">二、常量池的具体结构</span> **\n\n在Java程序中，有很多的东西是永恒的，不会在运行过程中变化。比如一个类的名字，一个类字段的名字/所属类型，一个类方法的名字/返回类型/参数名与所属类型，一个常量，还有在程序中出现的大量的字面值。比如下面小段源码红色显示的东西。\n\npublic class <span style=\"color: #ff0000;\">ClassTest</span> {\n\nprivate <span style=\"color: #ff0000;\">String</span> <span style=\"color: #ff0000;\">itemS</span> =\"<span style=\"color: #ff0000;\">我们</span> \";\n\nprivate final <span style=\"color: #ff0000;\">int itemI</span> =<span style=\"color: #ff0000;\">100</span> ;\n\npublic <span style=\"color: #ff0000;\">void setItemS</span> (<span style=\"color: #ff0000;\">String para</span> ){...}\n\n}\n\n而这些在JVM解释执行程序的时候是非常重要的。那么编译器将源程序编译成class文件后，会用一部分字节分类存储这些永恒不变的红色东西。而这些字节我们就成为常量池。事实上，只有JVM加载class后，在方法区中为它们开辟了空间才更像一个“池”。\n\n&nbsp;\n\n正如上面所示，一个程序中有很多永恒的红色东西。每一个都是常量池中的一个常量表(常量项)。而这些常量表之间又有不同，class文件共有11种常量表，如下所示：\n<table style=\"border: 0pt solid #2a27d8; height: 248px;\" border=\"0\" width=\"541\">\n<tbody>\n<tr>\n<td><span style=\"color: #0000ff;\">常量表类型</span></td>\n<td><span style=\"color: #0000ff;\">标志值(占1 byte)</span></td>\n<td><span style=\"color: #0000ff;\">描述</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Utf8</span></td>\n<td><span style=\"color: #0000ff;\">1</span></td>\n<td><span style=\"color: #0000ff;\">UTF-8编码的Unicode字符串</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Integer</span></td>\n<td><span style=\"color: #0000ff;\">3</span></td>\n<td><span style=\"color: #0000ff;\">int类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Float</span></td>\n<td><span style=\"color: #0000ff;\">4</span></td>\n<td><span style=\"color: #0000ff;\">float类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Long</span></td>\n<td><span style=\"color: #0000ff;\">5</span></td>\n<td><span style=\"color: #0000ff;\">long类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Double</span></td>\n<td><span style=\"color: #0000ff;\">6</span></td>\n<td><span style=\"color: #0000ff;\">double类型的字面值</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Class</span></td>\n<td><span style=\"color: #0000ff;\">7</span></td>\n<td><span style=\"color: #0000ff;\">对一个类或接口的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_String</span></td>\n<td><span style=\"color: #0000ff;\">8</span></td>\n<td><span style=\"color: #0000ff;\">String类型字面值的引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Fieldref</span></td>\n<td><span style=\"color: #0000ff;\">9</span></td>\n<td><span style=\"color: #0000ff;\">对一个字段的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_Methodref</span></td>\n<td><span style=\"color: #0000ff;\">10</span></td>\n<td><span style=\"color: #0000ff;\">对一个类中方法的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_InterfaceMethodref</span></td>\n<td><span style=\"color: #0000ff;\">11</span></td>\n<td><span style=\"color: #0000ff;\">对一个接口中方法的符号引用</span></td>\n</tr>\n<tr>\n<td><span style=\"color: #0000ff;\">CONSTANT_NameAndType</span></td>\n<td><span style=\"color: #0000ff;\">12</span></td>\n<td><span style=\"color: #0000ff;\">对一个字段或方法的部分符号引用</span></td>\n</tr>\n</tbody>\n</table>\n<span style=\"color: #ff0000;\">(1) </span> <span style=\"color: #ff0000;\">CONSTANT_Utf8   用UTF-8编码方式来表示程序中所有的重要常量字符串。<span style=\"color: #000000;\">这些字符串包括：</span> </span> ①类或接口的全限定名， ②超类的全限定名，③父接口的全限定名， ④类字段名和所属类型名，⑤类方法名和返回类型名、以及参数名和所属类型名。⑥字符串字面值\n\n表格式：   tag(标志1：占1byte)       length(字符串所占字节的长度，占2byte)      bytes(字符串字节序列)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(2) </span> <span style=\"color: #ff0000;\">CONSTANT_Integer、</span> <span style=\"color: #ff0000;\">CONSTANT_Float、</span> <span style=\"color: #ff0000;\">CONSTANT_Long、</span> <span style=\"color: #ff0000;\">CONSTANT_Double  所有基本数据类型的字面值。<span style=\"color: #000000;\">比如在程序中出现的1用CONSTANT_Integer表示。<span style=\"color: #000000;\">3.1415926F用</span> </span> </span> <span style=\"color: #000000;\">CONSTANT_Float表示。</span> <span style=\"color: #ff0000;\">\n</span>\n\n表格式：   tag             bytes(基本数据类型所需使用的字节序列)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(3) </span> <span style=\"color: #ff0000;\">CONSTANT_Class  使用符号引用来表示类或接口。<span style=\"color: #000000;\">我们知道所有类名都以</span> </span> <span style=\"color: #000000;\">CONSTANT_Utf8表的形式存储。但是我们并不知道</span> <span style=\"color: #000000;\">CONSTANT_Utf8表中哪些字符串是类名，那些是方法名。因此我们必须用一个指向类名字符串的符号引用常量来表明。</span>\n\n表格式：   tag    name_index(给出表示类或接口名的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(4)</span> <span style=\"color: #ff0000;\">CONSTANT_String  同</span> <span style=\"color: #ff0000;\">CONSTANT_Class，指向包含字符串字面值的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span>\n\n表格式：   tag    string_index(给出表示字符串字面值的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(5)</span> <span style=\"color: #ff0000;\">CONSTANT_Fieldref</span> <span style=\"color: #ff0000;\">、</span> <span style=\"color: #ff0000;\">CONSTANT_Methodref、</span> <span style=\"color: #ff0000;\">CONSTANT_InterfaceMethodref</span> <span style=\"color: #ff0000;\">  </span> <span style=\"color: #ff0000;\">  指向包含该字段或方法所属类名的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表，以及指向包含该字段或方法的名字和描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType</span> <span style=\"color: #ff0000;\">表</span>\n\n表格式：   tag   class _index(给出包含所属类名的CONSTANT_Utf8表的索引)  name_and_type_index(包含字段名或方法名以及描<span style=\"color: #000000;\">述符的</span> <span style=\"color: #000000;\">CONSTANT_NameAndType表</span> <span style=\"color: #000000;\">的索引)</span>\n\n&nbsp;\n\n<span style=\"color: #ff0000;\">(6)</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType </span> <span style=\"color: #ff0000;\">指向包含字段名或方法名以及描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span>\n\n表格式：   tag    name_index(给出表示字段名或方法名的CONSTANT_Utf8表的索引)  type_index(给出表示描述符的CONSTANT_Utf8表的索引)\n\n&nbsp;\n\n下面是我将一个源程序编译成class文件后，对文件中的每一个字节的分析，可以更好的理解class文件的内容以及常量池的组成。\n\n&nbsp;\n\n&nbsp;\n\n**<span style=\"color: #800080;\">三、TestClass.class 文件实例分析</span> **\n\n[java]\n//源代码\npackage hr.test;\n//ClassTest类\npublic class ClassTest {\n\tprivate int itemI=0;  //itemI类字段\n\tprivate static String itemS=&quot;我们&quot;; //itemS类字段\n\tprivate final float PI=3.1415926F;  //PI类字段\n\t//构造器方法\n\tpublic ClassTest(){\n\t}\n\t//getItemI方法\n\tpublic int getItemI(){\n\t\treturn this.itemI;\n\t}\n\t//getItemS方法\n\tpublic static String getItemS(){\n\t\treturn itemS;\n\t}\n\t//main主方法\n\tpublic static void main(String[] args) {\n\t\tClassTest ct=new ClassTest();\n\t}\n}\n[/java]\n\n<pre class=\"java\" style=\"display: none;\" title=\"Class文件内容及常量池\">//源代码\npackage hr.test;\n//ClassTest类\npublic class ClassTest {\n\tprivate int itemI=0;  //itemI类字段\n\tprivate static String itemS=\"我们\"; //itemS类字段\n\tprivate final float PI=3.1415926F;  //PI类字段\n\t//构造器方法\n\tpublic ClassTest(){\n\t}\n\t//getItemI方法\n\tpublic int getItemI(){\n\t\treturn this.itemI;\n\t}\n\t//getItemS方法\n\tpublic static String getItemS(){\n\t\treturn itemS;\n\t}\n\t//main主方法\n\tpublic static void main(String[] args) {\n\t\tClassTest ct=new ClassTest();\n\t}\n}\n</pre>\n&nbsp;\n\n<span style=\"color: #800080;\">TestClass.class 字节码分析<span style=\"color: #000000;\">(字节顺序从上到下，从左到右。每个字节用一个0-255的十进制整数表示)</span> </span>\n\n&nbsp;\n\n<span style=\"background-color: #fbe3fc;\">     **202 254 186 190**   <span style=\"color: #000000;\">-- 魔数</span> <span style=\"color: #000000;\">             </span>                                                                                      </span> \n<span style=\"background-color: #fbe3fc;\">     **0 0**     <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">-- 次版本号</span>  </span>                                                                                                              </span>                    \n<span style=\"background-color: #fbe3fc;\">     **0 50**   <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">-- 主版本号   </span>   </span>                                                                                                          </span>\n\n<span style=\"background-color: #d6d6ff;\">     **0 43**   <span style=\"color: #000000;\">-- 常量池中常量表的数量有42个，下面红色括号中的数据表明该常量表所在常量池中的索引，从索引1开始</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(1) </span> **7 0 2 ** </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 对类ClassTest的符号引用(7为标志  02指向了常量池的索引2的位置) </span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(2) **<span style=\"color: #000000;\">1</span> ** </span> </span> **<span style=\"background-color: #d6d6ff;\">0 17 104 114 47 116 101 115 116 47 67 108 97 115 115 84 101 115 116  </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 类全限定名hr\\test\\ClassTest</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(3) </span> </span> <span style=\"background-color: #d6d6ff;\">**7 0 4 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- 对类Object的符号引用</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(4) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 16 106 97 118 97 47 108 97 110 103 47 79 98 106 101 99 116**   <span style=\"color: #000000;\">-- 超类全限定名 java/lang/Object   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(5) </span> </span> <span style=\"background-color: #d6d6ff;\">**1** ** 0 5 105 116 101 109 73 **   <span style=\"color: #000000;\">--  第1个类字段名 itemI   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(6) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 1 73**    <span style=\"color: #000000;\">--  I  第1个类字段类型为整型</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(7) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 5 105 116 101 109 83 **   <span style=\"color: #000000;\">--  第2个类字段名 itemS</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(8) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 18 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 **   <span style=\"color: #000000;\">--  第2个类字段类型的全限定名 Ljava/lang/String</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(9) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 2 80 73** <span style=\"color: #000000;\">-- 第3个类字段名PI</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(10) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 1 70 ** <span style=\"color: #000000;\">-- 第3个类字段类型为float</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(11) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 13 67 111 110 115 116 97 110 116 86 97 108 117 101 **   <span style=\"color: #000000;\">---  第3个类字段为常量ConstantValue</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(12) </span> </span> <span style=\"background-color: #d6d6ff;\">**4 64 73 15 218**   <span style=\"color: #000000;\">-- 第3个类字段float字面值,占4bytes(3.1415926)</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(13) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 8 60 99 108 105 110 105 116 62 **   <span style=\"color: #000000;\">-- &lt;clinit&gt;  初始化方法名</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(14) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 3 40 41 86**    <span style=\"color: #000000;\"> -- </span> <span style=\"color: #000000;\">()V 方法的返回类型为void</span> </span>\n\n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(15) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 4 67 111 100 101  ** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">-- Code</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(16) </span> </span> <span style=\"background-color: #d6d6ff;\">**8 0 17** <span style=\"color: #000000;\">-- String字符串字面值（0 17表示索引1 7） </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(17) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 6 230 136 145 228 187 172**  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- \"我们\"</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(18) </span> </span> <span style=\"background-color: #d6d6ff;\">**9 0 1 0 19 ** <span style=\"color: #000000;\"> -- 指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的引用(0 1指向索引1，0 19指向索引19） </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(19) </span> </span> <span style=\"background-color: #d6d6ff;\">**12 0 7 0 8** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">--指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的名字和描述符的索引， </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(20) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 15 76 105 110 101 78 117 109 98 101 114 84 97 98 108 101 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- LineNumberTable</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(21) </span> </span> <span style=\"background-color: #d6d6ff;\">**0 18 76 111 99 97 108 86 97 114 105 97 98 108 101 84 97 98 108 101 **   <span style=\"color: #0000ff;\">-<span style=\"color: #000000;\">- LocalVariableTable</span> </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(22) </span> </span> <span style=\"background-color: #d6d6ff;\">**1 0 6 60 105 110 105 116 62**   <span style=\"color: #000000;\">-- &lt;init&gt;   表示初始化方法名 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(23) </span> </span> <span style=\"background-color: #d6d6ff;\">**10 0 3 0 24** <span style=\"color: #000000;\"> --  指向父类Object的构造器方法，0 3表示父类名常量表的索引，0 24表示存放该方法名称和描述符的引用的常量表的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(24) </span> </span> <span style=\"background-color: #d6d6ff;\">**12 0 22 0 14 ** <span style=\"color: #000000;\">--  指向方法名和描述符的常量表的索引。0 22是方法名的常量表索引，0 14是描述符的常量表索引</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(25) </span> </span> **<span style=\"background-color: #d6d6ff;\">9 0 1 0 26    </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第1个字段的引用， 0 1表示字段所属类型的索引，0 26表示字段名和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(26) </span> </span> **<span style=\"background-color: #d6d6ff;\">12 0 5 0 6  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">--</span> </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\"> 指向第1个字段的名字和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(27) </span> </span> **<span style=\"background-color: #d6d6ff;\">9 0 1 0 28    </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第3个字段的引用， 0 1表示字段所属类型的索引，0 28表示字段名和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(28) </span> </span> **<span style=\"background-color: #d6d6ff;\">12 0 9 0 10  </span> ** <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">-- 指向第3个字段的名字和描述符的索引 </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(29)</span> **1 0 4 116 104 105 115**    <span style=\"color: #000000;\">--  隐含参数符号this</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(30)</span> **1 0 11 76 67 108 97 115 115 84 101 115 116 59**    <span style=\"color: #000000;\">--  LClassTest;</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(31)</span> **1 0 8 103 101 116 73 116 101 109 73**    <span style=\"color: #000000;\">-</span> <span style=\"color: #000000;\">- 方法名 getItemI</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(32)</span> **1 0 3 40 41 73**    <span style=\"color: #000000;\">-- </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">()I  </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">方法描述符:返回类型int </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(33)</span> **1 0 8 103 101 116 73 116 101 109 83** <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">--  方法名 getItemS</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(34)</span> **1 0 20 40 41 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 **    <span style=\"color: #000000;\">--- 方法描述符()Ljava/lang/String;</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(35)</span> **1 0 4 109 97 105 110 **    <span style=\"color: #000000;\">--  主方法名main</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(36)</span> **1 0 22 40 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 41 86**    <span style=\"color: #000000;\">---  ()Ljava/lang/String;)V  主方法中的参数的字符串数组类型名</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(37)</span> ** 10 0 1 0 24    ** <span style=\"color: #000000;\">指向当前</span> </span> <span style=\"color: #0000ff;\"><span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">ClassTest </span> </span> <span style=\"background-color: #d6d6ff;\"><span style=\"color: #000000;\">类的构造器方法，0 1表示存放当前类名的常量表的索引。0 24是存放方法名和描述符的符号引用的常量表索引。</span>   </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(38)</span> **1 0 4 97 114 103 115 ** <span style=\"color: #000000;\">-- 参数args</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(39)</span> **1 0 19 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59**   <span style=\"color: #000000;\">-- 字符串数组 [Ljava/lang/String; </span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(40)</span> **1 0 2 99 116**    <span style=\"color: #000000;\">---  对象符号ct</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(41)</span> **1 0 10 83 111 117 114 99 101 70 105 108 101 ** <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">-- SourceFile</span> </span> \n<span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(42)</span> **1 0 14 67 108 97 115 115 84 101 115 116 46 106 97 118 97**    <span style=\"color: #000000;\">-- ClassTest.java    </span> </span>\n\n&nbsp;\n\n<span style=\"background-color: #ffffd6; color: #000000;\">**       0 33** ---- access_flag 访问标志  public\n**       ** **0 1**   ---- this_class  指向当前类的符号引用在常量池中的索引\n**       ** **0 3 ** ---- super_class</span> \n**       ** **0 0 ** <span style=\"background-color: #ffffd6;\">---- inteface_count接口的数量</span> \n\n<span style=\"background-color: #d6ead6; color: #000000;\">**       0 3**   ---  field_count字段的数量</span>\n\n<span style=\"background-color: #d6ead6; color: #000000;\">       // </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemI</span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 2 ** ---- private 修饰符\n**       0 5 ** ---- 字段名在常量池中的索引，字段itemI\n**       0 6**   ---- 字段的描述符(所属类型)在常量池中的索引\n**       0 0**   ---  字段的属性信息表(attribute_info)的数量\n</span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemS</span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 10**   ----  private static 修饰符\n**       0 7 ** ---字段名在常量池中的索引，字段itemS\n**       0 8 ** ---字段的描述符(所属类型)在常量池中的索引\n**       0 0 ** ---  字段的属性信息表(attribute_info)的数量\n</span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 PI  </span> <span style=\"background-color: #d6ead6; color: #000000;\">\n**       0 18**   -- private final 修饰符\n**       0 9** ---字段名在常量池中的索引，//字段PI\n**       0 10** ---字段的描述符(所属类型)在常量池中的索引\n**       0 1 ** --- 字段的属性信息表(attribute_info)的数量\n**       0 11**   --- 属性名在常量池中的索引。即ConstantValue\n**       0 0 0 2** --- 属性所占的字节长度\n**       0 12**   --- 属性值在常量池中的索引。即常量字面值</span> \n\n**       0 5  -- ** <span style=\"background-color: #ccd6e0;\">Method_count方法的数量</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//类的静态数据初始化方法&lt;clinit&gt;</span> \n**       0 8 ** <span style=\"background-color: #ccd6e0;\">---- static 修饰符(所有的初始化方法都是static的)</span> \n**       0 13 ** <span style=\"background-color: #ccd6e0;\">--- 在常量池中的索引。初始化方法名&lt;clinit&gt;，该方法直接由JVM在特定的时候调用，并非由字节码生成。</span> \n**       0 14 --- ** <span style=\"background-color: #ccd6e0;\">在常量池中的索引。返回类型为void。</span>\n\n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 -- ** <span style=\"background-color: #ccd6e0;\">属性名</span> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。即code</span> \n**       0 0 0 42 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度2</span> \n**       0 1 0 0 0 0 0 6 18 16 179 0 18 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 5 0 5 0 2 0 21 0 0 0 2 0 0 ** <span style=\"background-color: #ccd6e0;\">---该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//类的普通实例数据的初始化方法，针对类构造器生成的&lt;init&gt;方法。</span> \n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">public 修饰符</span> \n**       0 22 ** <span style=\"background-color: #ccd6e0;\">--- 构初始化方法名&lt;init&gt;</span> \n**       0 14 --- ** <span style=\"background-color: #ccd6e0;\">构造器的返回类型为void</span> \n**       0 1  --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 ** <span style=\"background-color: #ccd6e0;\">---  属性名在常量池中的索引。即Code</span> \n**       0 0 0 70 --** <span style=\"background-color: #ccd6e0;\">属性所占的字节长度70</span> \n**       0 2 0 1 0 0 0 16 42 183 0 23 42 3 181 0 25 42 18 12 181 0 27 177 0 0 0 2 0 200 0 0 18 0 4 0 0 0 ** **8 0 4 0 4 0 9 0 6 0 15 0 9 0 21 0 0 0 12 0 10 0 0 16 0 29 0 30 0 0** <span style=\"background-color: #ccd6e0;\">---该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//getItemI方法</span> \n**       0 1 ** <span style=\"background-color: #ccd6e0;\">--- public 修饰符</span> \n**       0 31 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法名getItemI</span> \n**       0 32 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法返回类型为int</span> \n**       0 1 -- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15  ** <span style=\"background-color: #ccd6e0;\">--- 属性名在常量池中的索引。即Code</span> \n**       0 0 0 47 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度70</span> \n**       0 1 0 1 0 0 0 5 42 180 0 25 172 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 12 0 21 0 0 0 12 0 1 0 0 0 5 0 29 0 30 0 0  --- ** <span style=\"background-color: #ccd6e0;\">该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//getItemS方法</span> \n**       0 9 ** <span style=\"background-color: #ccd6e0;\">--- public static 修饰符</span> \n**       0 33 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。方法名getItemS</span> \n**       0 34 -** <span style=\"background-color: #ccd6e0;\">-- 在常量池中的索引。方法返回类型为String</span> \n**       0 1 --- ** <span style=\"background-color: #ccd6e0;\">属性数量</span> \n**       0 15 -- ** <span style=\"background-color: #ccd6e0;\">属性名在常量池中的索引。即Code</span> \n**       0 0 0 36 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度36</span> \n**       0 1 0 0 0 0 0 4 178 0 18 176 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 16 0 21 0 0 0 2 0 0** <span style=\"background-color: #ccd6e0;\">--该方法的字节码指令序列和其他信息</span> \n**       ** <span style=\"background-color: #ccd6e0;\">//main方法</span> \n**       0 9 ** <span style=\"background-color: #ccd6e0;\">--- public static 修饰符</span> \n**       0 35 ** <span style=\"background-color: #ccd6e0;\">---  在常量池中的索引。主方法名main</span> \n**       0 36** <span style=\"background-color: #ccd6e0;\">-- 在常量池中的索引。方法返回类型为String[]</span> \n**       0 1** <span style=\"background-color: #ccd6e0;\"> ---  属性数量</span> \n**       0 15  ** <span style=\"background-color: #ccd6e0;\">---  属性名在常量池中的索引。即Code</span> \n**       0 0 0  65 ** <span style=\"background-color: #ccd6e0;\">---  属性所占的字节长度36</span> \n**       0 2 0 2 0 0 0 9 187 0 1 89 183 0 37 76 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 20 0 8 0 21 0 21 0 0 0 22 0 2 0 0 0 9 0 38 0 39 0 0 0 8 0 1 0 40 0 30 0 1 0 1 0 41 0 0 0 2 0 42 **\n\n&nbsp;\n\n&nbsp;\n\n我们分析上面的字节码例子，不难看出：\n\n&nbsp;\n\n蓝色背景的常量池字节码区域：\n\n(1) <span style=\"color: #ff0000;\">所有的字面值都是存放在常量池中的。</span> 特别注意的是“我们”这个字符串常量也是在常量池中的。如果一个程序出现多个“我们”，那么常量池中也只会有一个。另外，也正是因为“我们”存放在常量池中，使得一些字符串的==比较变的需要琢磨了。\n\n(2)<span style=\"color: #ff0000;\">ClassTest并没有任何显示的父类。但在常量池中，我们发现有Object的符号常量存在。</span> 这也证实了在Java中，任何类都直接或间接继承了Object的，而Object并不需要在代码中显示继承，JVM会帮我们做到这一点。\n\n(3)<span style=\"background-color: #ffffff; color: #ff0000;\">常量池中有一个隐含参数this的符号常量。<span style=\"color: #000000;\">即使程序中不存在this，JVM也会悄悄的设置一个这样的对象。</span> </span>\n\n&nbsp;\n\n绿色背景的类字段字节码区域：\n\n(1)字段PI是浮点型常量，<span style=\"color: #ff0000;\">在编译期的字节码中就已经指定好了PI的字面值存储在常量池中的某个索引内</span> 。这一点也证实了Java中的常量在编译期就已经得到了值，在运行过程中是无法改变的。\n\n&nbsp;\n\n灰背景的类方法字节码区域：\n\n(1)<span style=\"color: #ff0000;\">主方法main是作为ClassTest的类方法存在的，在字节码中main和其他的类方法并没有什么区别。</span> 实际上，我们也确实可以通过ClassTest.main(..)来调用ClassTest中的main方法。\n\n&nbsp;\n\n(2)在class文件常量池字节码中有两个比较特别的方法名符号：&lt;clinit&gt;和&lt;init&gt;。其中&lt;clinit&gt;方法是编译器自己生成的，<span style=\"color: #ff0000;\">编译器会把类静态变量的直接初始化语句和静态初始化语句块的代码都放到了class文件的&lt;clinit&gt;方法中。而对所有非静态非常量数据域的初始化工作要靠&lt;init&gt;方法来完成。<span style=\"color: #000000;\">针对每一个类的构造方法，编译器都会产生一个&lt;init&gt;方法。即使是缺省构造器也不例外。</span></span>","slug":"76","published":1,"updated":"2016-05-06T02:34:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1c0000d0chdco737cc","content":"<p>当JVM运行Java程序的时候，它会加载对应的class文件，并提取class文件中的信息存放在JVM开辟出来的<span style=\"color: #0000ff;\">方法区</span> 内存中。那么这个class文件里面到底有些什么内容呢？</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">一、class文件内容概述</span> </strong></p>\n<p>&nbsp;</p>\n<p>class文件是由8bits的字节流组成，全部字节构成了15个有意义的项目。这些项目之间没有任何无意义的字节，因此class文件非常紧凑。占据多字节空间的项目按照高位在前的顺序存放。下面我们详细讨论这些项目：</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ magic(魔数)</strong>   <span style=\"color: #000000;\"> 每个class文件的前4个字节称为魔数，值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ minor_version、major_version(次、主版本号)  </strong> <span style=\"color: #000000;\">各占2个字节。随着Java技术的发展，class文件的格式会发生变化。版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ constant_pool_count </strong> <strong>、constance_pool（常量池）  </strong> <span style=\"color: #000000;\">从这里开始的字节组成了<span style=\"color: #0000ff;\"><span style=\"color: #000000;\">常量池</span> <span style=\"color: #000000;\">。</span> </span> 存储了诸如符号常量、final常量值、基本数据类型的字面值等内容。JVM会将每一个常量构成一个常量表，每个常量表都有自己的入口地址。而实际上在JVM会将这些常量表存储在方法区中一块连续的内存空间中，因此class文件会根据常量表在常量池中的位置对其进行索引。比如常量池中的第一个常量表的索引值就是1，第二个就是2。有的时候常量表A需要常量表B的内容，则在常量表A中会存储常量表B的索引值x。而constant_pool_count就记录了有多少个常量表，或则所有多少个索引值。实际上，常量池中没有索引值为0的常量表，但这缺失的索引值也被记录在</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count中，因此</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count等于常量表的数量加1。关于常量池的具体内容，我们会在下面详细讲述，并用一个例子来显示整个class文件的内容。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ access_flags(访问标志)   </strong> <span style=\"color: #000000;\">占用2个字节。用来表明该class文件中定义的是类还是接口，访问修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ this_class</strong> </span>     占用2个字节。  它是一个对常量池的索引。指向的是常量池中存储类名符号引用的CONSTANT_Class_info常量表(见下面常量池具体结构)。比如this_class=0x0001。则表示指向常量池中的第一个常量表。通常这个表是指向当前class文件所定义的类名。</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ super_class  占用2个字节<span style=\"color: #000000;\">  </span> </strong> <span style=\"color: #000000;\">与this_class类似，指向存放当前class文件所定义类的超类名字的索引的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ inteface_count、interfaces  </strong> <span style=\"color: #000000;\">interface_count是class文件所定义的类直接实现的接口或父类实现的接口的数量。占2个字节。intefaces包含了对每个接口的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表的索引。</span> <span style=\"color: #800080;\"><br></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★fields_count、fields   </strong> <span style=\"color: #000000;\">fields_count表明了类中字段的数量</span> </span> <span style=\"color: #000000;\">。fields是不同长度的field_info表的序列。这些field_info表中并不包含超类或父接口继承而来的字段。field_info表展示了一个字段的信息，包括字段的名字，描述符和修饰符。如果该字段是final的，那么还会展示其常量值。注意，这些信息有些存放在field_info里面，有些则存放在field_info所指向的常量池中。下面我们阐述一下这个field_info表的格式：</span></p>\n<p>access_flags(2byte 访问修饰符)</p>\n<p>name_index(2byte 存储字段名的常量表在常量池中的索引)</p>\n<p>description_index(2byte 存储字段的所属类型的常量表在常量池中的索引)</p>\n<p>attribute_count(2byte 属性表的数量)</p>\n<p>attribute (属性)</p>\n<p>其中attribute是由多个attribute_info组成。而JVM规范定义了字段的三种属性：ConstanceValue、Deprecated和Synthetic。</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★method_count、<span style=\"color: #800080;\">methods </span> </strong> <span style=\"color: #000000;\">与字段类似，method_count表明类中方法的数量和每个方法的常量表的索引。methods表明了不同长度的method_info表的序列。该表格式如下：</span> </span></p>\n<p>access_flags(2byte 访问修饰符)</p>\n<p>name_index(2byte 存储方法名的常量表在常量池中的索引)</p>\n<p>description_index(2byte 存储方法的返回类型和参数类型的常量表在常量池中的索引)</p>\n<p>attribute_count(2byte 属性表的数量)</p>\n<p>attribute (属性)</p>\n<p>其中方法的属性JVM规定了四种：Code，Deprecated，Exceptions，Synthetic。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">二、常量池的具体结构</span> </strong></p>\n<p>在Java程序中，有很多的东西是永恒的，不会在运行过程中变化。比如一个类的名字，一个类字段的名字/所属类型，一个类方法的名字/返回类型/参数名与所属类型，一个常量，还有在程序中出现的大量的字面值。比如下面小段源码红色显示的东西。</p>\n<p>public class <span style=\"color: #ff0000;\">ClassTest</span> {</p>\n<p>private <span style=\"color: #ff0000;\">String</span> <span style=\"color: #ff0000;\">itemS</span> =”<span style=\"color: #ff0000;\">我们</span> “;</p>\n<p>private final <span style=\"color: #ff0000;\">int itemI</span> =<span style=\"color: #ff0000;\">100</span> ;</p>\n<p>public <span style=\"color: #ff0000;\">void setItemS</span> (<span style=\"color: #ff0000;\">String para</span> ){…}</p>\n<p>}</p>\n<p>而这些在JVM解释执行程序的时候是非常重要的。那么编译器将源程序编译成class文件后，会用一部分字节分类存储这些永恒不变的红色东西。而这些字节我们就成为常量池。事实上，只有JVM加载class后，在方法区中为它们开辟了空间才更像一个“池”。</p>\n<p>&nbsp;</p>\n<p>正如上面所示，一个程序中有很多永恒的红色东西。每一个都是常量池中的一个常量表(常量项)。而这些常量表之间又有不同，class文件共有11种常量表，如下所示：</p>\n<p><table style=\"border: 0pt solid #2a27d8; height: 248px;\" border=\"0\" width=\"541\"></table></p>\n<p><tbody></tbody></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">常量表类型</span></td></p>\n<p><td><span style=\"color: #0000ff;\">标志值(占1 byte)</span></td></p>\n<p><td><span style=\"color: #0000ff;\">描述</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Utf8</span></td></p>\n<p><td><span style=\"color: #0000ff;\">1</span></td></p>\n<p><td><span style=\"color: #0000ff;\">UTF-8编码的Unicode字符串</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Integer</span></td></p>\n<p><td><span style=\"color: #0000ff;\">3</span></td></p>\n<p><td><span style=\"color: #0000ff;\">int类型的字面值</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Float</span></td></p>\n<p><td><span style=\"color: #0000ff;\">4</span></td></p>\n<p><td><span style=\"color: #0000ff;\">float类型的字面值</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Long</span></td></p>\n<p><td><span style=\"color: #0000ff;\">5</span></td></p>\n<p><td><span style=\"color: #0000ff;\">long类型的字面值</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Double</span></td></p>\n<p><td><span style=\"color: #0000ff;\">6</span></td></p>\n<p><td><span style=\"color: #0000ff;\">double类型的字面值</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Class</span></td></p>\n<p><td><span style=\"color: #0000ff;\">7</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个类或接口的符号引用</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_String</span></td></p>\n<p><td><span style=\"color: #0000ff;\">8</span></td></p>\n<p><td><span style=\"color: #0000ff;\">String类型字面值的引用</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Fieldref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">9</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个字段的符号引用</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Methodref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">10</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个类中方法的符号引用</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_InterfaceMethodref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">11</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个接口中方法的符号引用</span></td><br></p>\n<p><tr></tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_NameAndType</span></td></p>\n<p><td><span style=\"color: #0000ff;\">12</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个字段或方法的部分符号引用</span></td><br><br><br><br><span style=\"color: #ff0000;\">(1) </span> <span style=\"color: #ff0000;\">CONSTANT_Utf8   用UTF-8编码方式来表示程序中所有的重要常量字符串。<span style=\"color: #000000;\">这些字符串包括：</span> </span> ①类或接口的全限定名， ②超类的全限定名，③父接口的全限定名， ④类字段名和所属类型名，⑤类方法名和返回类型名、以及参数名和所属类型名。⑥字符串字面值</p>\n<p>表格式：   tag(标志1：占1byte)       length(字符串所占字节的长度，占2byte)      bytes(字符串字节序列)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(2) </span> <span style=\"color: #ff0000;\">CONSTANT_Integer、</span> <span style=\"color: #ff0000;\">CONSTANT_Float、</span> <span style=\"color: #ff0000;\">CONSTANT_Long、</span> <span style=\"color: #ff0000;\">CONSTANT_Double  所有基本数据类型的字面值。<span style=\"color: #000000;\">比如在程序中出现的1用CONSTANT_Integer表示。<span style=\"color: #000000;\">3.1415926F用</span> </span> </span> <span style=\"color: #000000;\">CONSTANT_Float表示。</span> <span style=\"color: #ff0000;\"><br></span></p>\n<p>表格式：   tag             bytes(基本数据类型所需使用的字节序列)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(3) </span> <span style=\"color: #ff0000;\">CONSTANT_Class  使用符号引用来表示类或接口。<span style=\"color: #000000;\">我们知道所有类名都以</span> </span> <span style=\"color: #000000;\">CONSTANT_Utf8表的形式存储。但是我们并不知道</span> <span style=\"color: #000000;\">CONSTANT_Utf8表中哪些字符串是类名，那些是方法名。因此我们必须用一个指向类名字符串的符号引用常量来表明。</span></p>\n<p>表格式：   tag    name_index(给出表示类或接口名的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(4)</span> <span style=\"color: #ff0000;\">CONSTANT_String  同</span> <span style=\"color: #ff0000;\">CONSTANT_Class，指向包含字符串字面值的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span></p>\n<p>表格式：   tag    string_index(给出表示字符串字面值的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(5)</span> <span style=\"color: #ff0000;\">CONSTANT_Fieldref</span> <span style=\"color: #ff0000;\">、</span> <span style=\"color: #ff0000;\">CONSTANT_Methodref、</span> <span style=\"color: #ff0000;\">CONSTANT_InterfaceMethodref</span> <span style=\"color: #ff0000;\">  </span> <span style=\"color: #ff0000;\">  指向包含该字段或方法所属类名的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表，以及指向包含该字段或方法的名字和描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType</span> <span style=\"color: #ff0000;\">表</span></p>\n<p>表格式：   tag   class _index(给出包含所属类名的CONSTANT_Utf8表的索引)  name_and_type_index(包含字段名或方法名以及描<span style=\"color: #000000;\">述符的</span> <span style=\"color: #000000;\">CONSTANT_NameAndType表</span> <span style=\"color: #000000;\">的索引)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(6)</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType </span> <span style=\"color: #ff0000;\">指向包含字段名或方法名以及描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span></p>\n<p>表格式：   tag    name_index(给出表示字段名或方法名的CONSTANT_Utf8表的索引)  type_index(给出表示描述符的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p>下面是我将一个源程序编译成class文件后，对文件中的每一个字节的分析，可以更好的理解class文件的内容以及常量池的组成。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">三、TestClass.class 文件实例分析</span> </strong></p>\n<p>[java]<br>//源代码<br>package hr.test;<br>//ClassTest类<br>public class ClassTest {<br>    private int itemI=0;  //itemI类字段<br>    private static String itemS=&quot;我们&quot;; //itemS类字段<br>    private final float PI=3.1415926F;  //PI类字段<br>    //构造器方法<br>    public ClassTest(){<br>    }<br>    //getItemI方法<br>    public int getItemI(){<br>        return this.itemI;<br>    }<br>    //getItemS方法<br>    public static String getItemS(){<br>        return itemS;<br>    }<br>    //main主方法<br>    public static void main(String[] args) {<br>        ClassTest ct=new ClassTest();<br>    }<br>}<br>[/java]</p>\n<p><pre class=\"java\" style=\"display: none;\" title=\"Class文件内容及常量池\">//源代码<br>package hr.test;<br>//ClassTest类<br>public class ClassTest {<br>    private int itemI=0;  //itemI类字段<br>    private static String itemS=”我们”; //itemS类字段<br>    private final float PI=3.1415926F;  //PI类字段<br>    //构造器方法<br>    public ClassTest(){<br>    }<br>    //getItemI方法<br>    public int getItemI(){<br>        return this.itemI;<br>    }<br>    //getItemS方法<br>    public static String getItemS(){<br>        return itemS;<br>    }<br>    //main主方法<br>    public static void main(String[] args) {<br>        ClassTest ct=new ClassTest();<br>    }<br>}<br></pre><br>&nbsp;</p>\n<p><span style=\"color: #800080;\">TestClass.class 字节码分析<span style=\"color: #000000;\">(字节顺序从上到下，从左到右。每个字节用一个0-255的十进制整数表示)</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #fbe3fc;\">     <strong>202 254 186 190</strong>   <span style=\"color: #000000;\">– 魔数</span> <span style=\"color: #000000;\">             </span>                                                                                      </span><br><span style=\"background-color: #fbe3fc;\">     <strong>0 0</strong>     <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">– 次版本号</span>  </span>                                                                                                              </span><br><span style=\"background-color: #fbe3fc;\">     <strong>0 50</strong>   <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">– 主版本号   </span>   </span>                                                                                                          </span></p>\n<p><span style=\"background-color: #d6d6ff;\">     <strong>0 43</strong>   <span style=\"color: #000000;\">– 常量池中常量表的数量有42个，下面红色括号中的数据表明该常量表所在常量池中的索引，从索引1开始</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(1) </span> <strong>7 0 2 </strong> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 对类ClassTest的符号引用(7为标志  02指向了常量池的索引2的位置) </span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(2) <strong><span style=\"color: #000000;\">1</span> </strong> </span> </span> <strong><span style=\"background-color: #d6d6ff;\">0 17 104 114 47 116 101 115 116 47 67 108 97 115 115 84 101 115 116  </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 类全限定名hr\\test\\ClassTest</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(3) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>7 0 4 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– 对类Object的符号引用</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(4) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 16 106 97 118 97 47 108 97 110 103 47 79 98 106 101 99 116</strong>   <span style=\"color: #000000;\">– 超类全限定名 java/lang/Object   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(5) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1</strong> <strong> 0 5 105 116 101 109 73 </strong>   <span style=\"color: #000000;\">–  第1个类字段名 itemI   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(6) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 1 73</strong>    <span style=\"color: #000000;\">–  I  第1个类字段类型为整型</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(7) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 5 105 116 101 109 83 </strong>   <span style=\"color: #000000;\">–  第2个类字段名 itemS</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(8) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 18 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 </strong>   <span style=\"color: #000000;\">–  第2个类字段类型的全限定名 Ljava/lang/String</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(9) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 2 80 73</strong> <span style=\"color: #000000;\">– 第3个类字段名PI</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(10) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 1 70 </strong> <span style=\"color: #000000;\">– 第3个类字段类型为float</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(11) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 13 67 111 110 115 116 97 110 116 86 97 108 117 101 </strong>   <span style=\"color: #000000;\">—  第3个类字段为常量ConstantValue</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(12) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>4 64 73 15 218</strong>   <span style=\"color: #000000;\">– 第3个类字段float字面值,占4bytes(3.1415926)</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(13) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 8 60 99 108 105 110 105 116 62 </strong>   <span style=\"color: #000000;\">– &lt;clinit&gt;  初始化方法名</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(14) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 3 40 41 86</strong>    <span style=\"color: #000000;\"> – </span> <span style=\"color: #000000;\">()V 方法的返回类型为void</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(15) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 4 67 111 100 101  </strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">– Code</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(16) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>8 0 17</strong> <span style=\"color: #000000;\">– String字符串字面值（0 17表示索引1 7） </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(17) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 6 230 136 145 228 187 172</strong>  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– “我们”</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(18) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>9 0 1 0 19 </strong> <span style=\"color: #000000;\"> – 指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的引用(0 1指向索引1，0 19指向索引19） </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(19) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>12 0 7 0 8</strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">–指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的名字和描述符的索引， </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(20) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 15 76 105 110 101 78 117 109 98 101 114 84 97 98 108 101 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– LineNumberTable</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(21) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>0 18 76 111 99 97 108 86 97 114 105 97 98 108 101 84 97 98 108 101 </strong>   <span style=\"color: #0000ff;\">-<span style=\"color: #000000;\">- LocalVariableTable</span> </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(22) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 6 60 105 110 105 116 62</strong>   <span style=\"color: #000000;\">– &lt;init&gt;   表示初始化方法名 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(23) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>10 0 3 0 24</strong> <span style=\"color: #000000;\"> –  指向父类Object的构造器方法，0 3表示父类名常量表的索引，0 24表示存放该方法名称和描述符的引用的常量表的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(24) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>12 0 22 0 14 </strong> <span style=\"color: #000000;\">–  指向方法名和描述符的常量表的索引。0 22是方法名的常量表索引，0 14是描述符的常量表索引</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(25) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">9 0 1 0 26    </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第1个字段的引用， 0 1表示字段所属类型的索引，0 26表示字段名和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(26) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">12 0 5 0 6  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">–</span> </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\"> 指向第1个字段的名字和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(27) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">9 0 1 0 28    </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第3个字段的引用， 0 1表示字段所属类型的索引，0 28表示字段名和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(28) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">12 0 9 0 10  </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第3个字段的名字和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(29)</span> <strong>1 0 4 116 104 105 115</strong>    <span style=\"color: #000000;\">–  隐含参数符号this</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(30)</span> <strong>1 0 11 76 67 108 97 115 115 84 101 115 116 59</strong>    <span style=\"color: #000000;\">–  LClassTest;</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(31)</span> <strong>1 0 8 103 101 116 73 116 101 109 73</strong>    <span style=\"color: #000000;\">-</span> <span style=\"color: #000000;\">- 方法名 getItemI</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(32)</span> <strong>1 0 3 40 41 73</strong>    <span style=\"color: #000000;\">– </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">()I  </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">方法描述符:返回类型int </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(33)</span> <strong>1 0 8 103 101 116 73 116 101 109 83</strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">–  方法名 getItemS</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(34)</span> <strong>1 0 20 40 41 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 </strong>    <span style=\"color: #000000;\">— 方法描述符()Ljava/lang/String;</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(35)</span> <strong>1 0 4 109 97 105 110 </strong>    <span style=\"color: #000000;\">–  主方法名main</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(36)</span> <strong>1 0 22 40 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 41 86</strong>    <span style=\"color: #000000;\">—  ()Ljava/lang/String;)V  主方法中的参数的字符串数组类型名</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(37)</span> <strong> 10 0 1 0 24    </strong> <span style=\"color: #000000;\">指向当前</span> </span> <span style=\"color: #0000ff;\"><span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">ClassTest </span> </span> <span style=\"background-color: #d6d6ff;\"><span style=\"color: #000000;\">类的构造器方法，0 1表示存放当前类名的常量表的索引。0 24是存放方法名和描述符的符号引用的常量表索引。</span>   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(38)</span> <strong>1 0 4 97 114 103 115 </strong> <span style=\"color: #000000;\">– 参数args</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(39)</span> <strong>1 0 19 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59</strong>   <span style=\"color: #000000;\">– 字符串数组 [Ljava/lang/String; </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(40)</span> <strong>1 0 2 99 116</strong>    <span style=\"color: #000000;\">—  对象符号ct</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(41)</span> <strong>1 0 10 83 111 117 114 99 101 70 105 108 101 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– SourceFile</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(42)</span> <strong>1 0 14 67 108 97 115 115 84 101 115 116 46 106 97 118 97</strong>    <span style=\"color: #000000;\">– ClassTest.java    </span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #ffffd6; color: #000000;\"><strong>       0 33</strong> —- access_flag 访问标志  public<br><strong>       </strong> <strong>0 1</strong>   —- this_class  指向当前类的符号引用在常量池中的索引<br><strong>       </strong> <strong>0 3 </strong> —- super_class</span><br><strong>       </strong> <strong>0 0 </strong> <span style=\"background-color: #ffffd6;\">—- inteface_count接口的数量</span> </p>\n<p><span style=\"background-color: #d6ead6; color: #000000;\"><strong>       0 3</strong>   —  field_count字段的数量</span></p>\n<p><span style=\"background-color: #d6ead6; color: #000000;\">       // </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemI</span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 2 </strong> —- private 修饰符<br><strong>       0 5 </strong> —- 字段名在常量池中的索引，字段itemI<br><strong>       0 6</strong>   —- 字段的描述符(所属类型)在常量池中的索引<br><strong>       0 0</strong>   —  字段的属性信息表(attribute_info)的数量<br></span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemS</span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 10</strong>   —-  private static 修饰符<br><strong>       0 7 </strong> —字段名在常量池中的索引，字段itemS<br><strong>       0 8 </strong> —字段的描述符(所属类型)在常量池中的索引<br><strong>       0 0 </strong> —  字段的属性信息表(attribute_info)的数量<br></span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 PI  </span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 18</strong>   – private final 修饰符<br><strong>       0 9</strong> —字段名在常量池中的索引，//字段PI<br><strong>       0 10</strong> —字段的描述符(所属类型)在常量池中的索引<br><strong>       0 1 </strong> — 字段的属性信息表(attribute_info)的数量<br><strong>       0 11</strong>   — 属性名在常量池中的索引。即ConstantValue<br><strong>       0 0 0 2</strong> — 属性所占的字节长度<br><strong>       0 12</strong>   — 属性值在常量池中的索引。即常量字面值</span> </p>\n<p><strong>       0 5  – </strong> <span style=\"background-color: #ccd6e0;\">Method_count方法的数量</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//类的静态数据初始化方法&lt;clinit&gt;</span><br><strong>       0 8 </strong> <span style=\"background-color: #ccd6e0;\">—- static 修饰符(所有的初始化方法都是static的)</span><br><strong>       0 13 </strong> <span style=\"background-color: #ccd6e0;\">— 在常量池中的索引。初始化方法名&lt;clinit&gt;，该方法直接由JVM在特定的时候调用，并非由字节码生成。</span><br><strong>       0 14 — </strong> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。返回类型为void。</span></p>\n<p><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 – </strong> <span style=\"background-color: #ccd6e0;\">属性名</span> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。即code</span><br><strong>       0 0 0 42 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度2</span><br><strong>       0 1 0 0 0 0 0 6 18 16 179 0 18 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 5 0 5 0 2 0 21 0 0 0 2 0 0 </strong> <span style=\"background-color: #ccd6e0;\">—该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//类的普通实例数据的初始化方法，针对类构造器生成的&lt;init&gt;方法。</span><br><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">public 修饰符</span><br><strong>       0 22 </strong> <span style=\"background-color: #ccd6e0;\">— 构初始化方法名&lt;init&gt;</span><br><strong>       0 14 — </strong> <span style=\"background-color: #ccd6e0;\">构造器的返回类型为void</span><br><strong>       0 1  — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 </strong> <span style=\"background-color: #ccd6e0;\">—  属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 70 –</strong> <span style=\"background-color: #ccd6e0;\">属性所占的字节长度70</span><br><strong>       0 2 0 1 0 0 0 16 42 183 0 23 42 3 181 0 25 42 18 12 181 0 27 177 0 0 0 2 0 200 0 0 18 0 4 0 0 0 </strong> <strong>8 0 4 0 4 0 9 0 6 0 15 0 9 0 21 0 0 0 12 0 10 0 0 16 0 29 0 30 0 0</strong> <span style=\"background-color: #ccd6e0;\">—该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//getItemI方法</span><br><strong>       0 1 </strong> <span style=\"background-color: #ccd6e0;\">— public 修饰符</span><br><strong>       0 31 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法名getItemI</span><br><strong>       0 32 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法返回类型为int</span><br><strong>       0 1 – </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15  </strong> <span style=\"background-color: #ccd6e0;\">— 属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 47 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度70</span><br><strong>       0 1 0 1 0 0 0 5 42 180 0 25 172 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 12 0 21 0 0 0 12 0 1 0 0 0 5 0 29 0 30 0 0  — </strong> <span style=\"background-color: #ccd6e0;\">该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//getItemS方法</span><br><strong>       0 9 </strong> <span style=\"background-color: #ccd6e0;\">— public static 修饰符</span><br><strong>       0 33 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法名getItemS</span><br><strong>       0 34 -</strong> <span style=\"background-color: #ccd6e0;\">– 在常量池中的索引。方法返回类型为String</span><br><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 – </strong> <span style=\"background-color: #ccd6e0;\">属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 36 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度36</span><br><strong>       0 1 0 0 0 0 0 4 178 0 18 176 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 16 0 21 0 0 0 2 0 0</strong> <span style=\"background-color: #ccd6e0;\">–该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//main方法</span><br><strong>       0 9 </strong> <span style=\"background-color: #ccd6e0;\">— public static 修饰符</span><br><strong>       0 35 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。主方法名main</span><br><strong>       0 36</strong> <span style=\"background-color: #ccd6e0;\">– 在常量池中的索引。方法返回类型为String[]</span><br><strong>       0 1</strong> <span style=\"background-color: #ccd6e0;\"> —  属性数量</span><br><strong>       0 15  </strong> <span style=\"background-color: #ccd6e0;\">—  属性名在常量池中的索引。即Code</span><br><strong>       0 0 0  65 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度36</span><br><strong>       0 2 0 2 0 0 0 9 187 0 1 89 183 0 37 76 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 20 0 8 0 21 0 21 0 0 0 22 0 2 0 0 0 9 0 38 0 39 0 0 0 8 0 1 0 40 0 30 0 1 0 1 0 41 0 0 0 2 0 42 </strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>我们分析上面的字节码例子，不难看出：</p>\n<p>&nbsp;</p>\n<p>蓝色背景的常量池字节码区域：</p>\n<p>(1) <span style=\"color: #ff0000;\">所有的字面值都是存放在常量池中的。</span> 特别注意的是“我们”这个字符串常量也是在常量池中的。如果一个程序出现多个“我们”，那么常量池中也只会有一个。另外，也正是因为“我们”存放在常量池中，使得一些字符串的==比较变的需要琢磨了。</p>\n<p>(2)<span style=\"color: #ff0000;\">ClassTest并没有任何显示的父类。但在常量池中，我们发现有Object的符号常量存在。</span> 这也证实了在Java中，任何类都直接或间接继承了Object的，而Object并不需要在代码中显示继承，JVM会帮我们做到这一点。</p>\n<p>(3)<span style=\"background-color: #ffffff; color: #ff0000;\">常量池中有一个隐含参数this的符号常量。<span style=\"color: #000000;\">即使程序中不存在this，JVM也会悄悄的设置一个这样的对象。</span> </span></p>\n<p>&nbsp;</p>\n<p>绿色背景的类字段字节码区域：</p>\n<p>(1)字段PI是浮点型常量，<span style=\"color: #ff0000;\">在编译期的字节码中就已经指定好了PI的字面值存储在常量池中的某个索引内</span> 。这一点也证实了Java中的常量在编译期就已经得到了值，在运行过程中是无法改变的。</p>\n<p>&nbsp;</p>\n<p>灰背景的类方法字节码区域：</p>\n<p>(1)<span style=\"color: #ff0000;\">主方法main是作为ClassTest的类方法存在的，在字节码中main和其他的类方法并没有什么区别。</span> 实际上，我们也确实可以通过ClassTest.main(..)来调用ClassTest中的main方法。</p>\n<p>&nbsp;</p>\n<p>(2)在class文件常量池字节码中有两个比较特别的方法名符号：&lt;clinit&gt;和&lt;init&gt;。其中&lt;clinit&gt;方法是编译器自己生成的，<span style=\"color: #ff0000;\">编译器会把类静态变量的直接初始化语句和静态初始化语句块的代码都放到了class文件的&lt;clinit&gt;方法中。而对所有非静态非常量数据域的初始化工作要靠&lt;init&gt;方法来完成。<span style=\"color: #000000;\">针对每一个类的构造方法，编译器都会产生一个&lt;init&gt;方法。即使是缺省构造器也不例外。</span></span></p>\n","excerpt":"","more":"<p>当JVM运行Java程序的时候，它会加载对应的class文件，并提取class文件中的信息存放在JVM开辟出来的<span style=\"color: #0000ff;\">方法区</span> 内存中。那么这个class文件里面到底有些什么内容呢？</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">一、class文件内容概述</span> </strong></p>\n<p>&nbsp;</p>\n<p>class文件是由8bits的字节流组成，全部字节构成了15个有意义的项目。这些项目之间没有任何无意义的字节，因此class文件非常紧凑。占据多字节空间的项目按照高位在前的顺序存放。下面我们详细讨论这些项目：</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ magic(魔数)</strong>   <span style=\"color: #000000;\"> 每个class文件的前4个字节称为魔数，值为0xCAFEBABE。作用在于轻松的辨别class文件与非class文件。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ minor_version、major_version(次、主版本号)  </strong> <span style=\"color: #000000;\">各占2个字节。随着Java技术的发展，class文件的格式会发生变化。版本号的作用在于使得虚拟机能够认识当前加载class的文件格式。从而准确的提取class文件信息。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ constant_pool_count </strong> <strong>、constance_pool（常量池）  </strong> <span style=\"color: #000000;\">从这里开始的字节组成了<span style=\"color: #0000ff;\"><span style=\"color: #000000;\">常量池</span> <span style=\"color: #000000;\">。</span> </span> 存储了诸如符号常量、final常量值、基本数据类型的字面值等内容。JVM会将每一个常量构成一个常量表，每个常量表都有自己的入口地址。而实际上在JVM会将这些常量表存储在方法区中一块连续的内存空间中，因此class文件会根据常量表在常量池中的位置对其进行索引。比如常量池中的第一个常量表的索引值就是1，第二个就是2。有的时候常量表A需要常量表B的内容，则在常量表A中会存储常量表B的索引值x。而constant_pool_count就记录了有多少个常量表，或则所有多少个索引值。实际上，常量池中没有索引值为0的常量表，但这缺失的索引值也被记录在</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count中，因此</span> </span> <span style=\"color: #800080;\"><span style=\"color: #000000;\">constant_pool_count等于常量表的数量加1。关于常量池的具体内容，我们会在下面详细讲述，并用一个例子来显示整个class文件的内容。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ access_flags(访问标志)   </strong> <span style=\"color: #000000;\">占用2个字节。用来表明该class文件中定义的是类还是接口，访问修饰符是public还是缺省。类或接口是否是抽象的。类是否是final的。</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ this_class</strong> </span>     占用2个字节。  它是一个对常量池的索引。指向的是常量池中存储类名符号引用的CONSTANT_Class_info常量表(见下面常量池具体结构)。比如this_class=0x0001。则表示指向常量池中的第一个常量表。通常这个表是指向当前class文件所定义的类名。</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ super_class  占用2个字节<span style=\"color: #000000;\">  </span> </strong> <span style=\"color: #000000;\">与this_class类似，指向存放当前class文件所定义类的超类名字的索引的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★ inteface_count、interfaces  </strong> <span style=\"color: #000000;\">interface_count是class文件所定义的类直接实现的接口或父类实现的接口的数量。占2个字节。intefaces包含了对每个接口的</span> </span> <span style=\"color: #000000;\">CONSTANT_Class_info常量表的索引。</span> <span style=\"color: #800080;\"><br></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★fields_count、fields   </strong> <span style=\"color: #000000;\">fields_count表明了类中字段的数量</span> </span> <span style=\"color: #000000;\">。fields是不同长度的field_info表的序列。这些field_info表中并不包含超类或父接口继承而来的字段。field_info表展示了一个字段的信息，包括字段的名字，描述符和修饰符。如果该字段是final的，那么还会展示其常量值。注意，这些信息有些存放在field_info里面，有些则存放在field_info所指向的常量池中。下面我们阐述一下这个field_info表的格式：</span></p>\n<p>access_flags(2byte 访问修饰符)</p>\n<p>name_index(2byte 存储字段名的常量表在常量池中的索引)</p>\n<p>description_index(2byte 存储字段的所属类型的常量表在常量池中的索引)</p>\n<p>attribute_count(2byte 属性表的数量)</p>\n<p>attribute (属性)</p>\n<p>其中attribute是由多个attribute_info组成。而JVM规范定义了字段的三种属性：ConstanceValue、Deprecated和Synthetic。</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #800080;\"><strong>★method_count、<span style=\"color: #800080;\">methods </span> </strong> <span style=\"color: #000000;\">与字段类似，method_count表明类中方法的数量和每个方法的常量表的索引。methods表明了不同长度的method_info表的序列。该表格式如下：</span> </span></p>\n<p>access_flags(2byte 访问修饰符)</p>\n<p>name_index(2byte 存储方法名的常量表在常量池中的索引)</p>\n<p>description_index(2byte 存储方法的返回类型和参数类型的常量表在常量池中的索引)</p>\n<p>attribute_count(2byte 属性表的数量)</p>\n<p>attribute (属性)</p>\n<p>其中方法的属性JVM规定了四种：Code，Deprecated，Exceptions，Synthetic。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">二、常量池的具体结构</span> </strong></p>\n<p>在Java程序中，有很多的东西是永恒的，不会在运行过程中变化。比如一个类的名字，一个类字段的名字/所属类型，一个类方法的名字/返回类型/参数名与所属类型，一个常量，还有在程序中出现的大量的字面值。比如下面小段源码红色显示的东西。</p>\n<p>public class <span style=\"color: #ff0000;\">ClassTest</span> {</p>\n<p>private <span style=\"color: #ff0000;\">String</span> <span style=\"color: #ff0000;\">itemS</span> =”<span style=\"color: #ff0000;\">我们</span> “;</p>\n<p>private final <span style=\"color: #ff0000;\">int itemI</span> =<span style=\"color: #ff0000;\">100</span> ;</p>\n<p>public <span style=\"color: #ff0000;\">void setItemS</span> (<span style=\"color: #ff0000;\">String para</span> ){…}</p>\n<p>}</p>\n<p>而这些在JVM解释执行程序的时候是非常重要的。那么编译器将源程序编译成class文件后，会用一部分字节分类存储这些永恒不变的红色东西。而这些字节我们就成为常量池。事实上，只有JVM加载class后，在方法区中为它们开辟了空间才更像一个“池”。</p>\n<p>&nbsp;</p>\n<p>正如上面所示，一个程序中有很多永恒的红色东西。每一个都是常量池中的一个常量表(常量项)。而这些常量表之间又有不同，class文件共有11种常量表，如下所示：</p>\n<p><table style=\"border: 0pt solid #2a27d8; height: 248px;\" border=\"0\" width=\"541\"></p>\n<p><tbody></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">常量表类型</span></td></p>\n<p><td><span style=\"color: #0000ff;\">标志值(占1 byte)</span></td></p>\n<p><td><span style=\"color: #0000ff;\">描述</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Utf8</span></td></p>\n<p><td><span style=\"color: #0000ff;\">1</span></td></p>\n<p><td><span style=\"color: #0000ff;\">UTF-8编码的Unicode字符串</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Integer</span></td></p>\n<p><td><span style=\"color: #0000ff;\">3</span></td></p>\n<p><td><span style=\"color: #0000ff;\">int类型的字面值</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Float</span></td></p>\n<p><td><span style=\"color: #0000ff;\">4</span></td></p>\n<p><td><span style=\"color: #0000ff;\">float类型的字面值</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Long</span></td></p>\n<p><td><span style=\"color: #0000ff;\">5</span></td></p>\n<p><td><span style=\"color: #0000ff;\">long类型的字面值</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Double</span></td></p>\n<p><td><span style=\"color: #0000ff;\">6</span></td></p>\n<p><td><span style=\"color: #0000ff;\">double类型的字面值</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Class</span></td></p>\n<p><td><span style=\"color: #0000ff;\">7</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个类或接口的符号引用</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_String</span></td></p>\n<p><td><span style=\"color: #0000ff;\">8</span></td></p>\n<p><td><span style=\"color: #0000ff;\">String类型字面值的引用</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Fieldref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">9</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个字段的符号引用</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_Methodref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">10</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个类中方法的符号引用</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_InterfaceMethodref</span></td></p>\n<p><td><span style=\"color: #0000ff;\">11</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个接口中方法的符号引用</span></td><br></tr></p>\n<p><tr></p>\n<p><td><span style=\"color: #0000ff;\">CONSTANT_NameAndType</span></td></p>\n<p><td><span style=\"color: #0000ff;\">12</span></td></p>\n<p><td><span style=\"color: #0000ff;\">对一个字段或方法的部分符号引用</span></td><br></tr><br></tbody><br></table><br><span style=\"color: #ff0000;\">(1) </span> <span style=\"color: #ff0000;\">CONSTANT_Utf8   用UTF-8编码方式来表示程序中所有的重要常量字符串。<span style=\"color: #000000;\">这些字符串包括：</span> </span> ①类或接口的全限定名， ②超类的全限定名，③父接口的全限定名， ④类字段名和所属类型名，⑤类方法名和返回类型名、以及参数名和所属类型名。⑥字符串字面值</p>\n<p>表格式：   tag(标志1：占1byte)       length(字符串所占字节的长度，占2byte)      bytes(字符串字节序列)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(2) </span> <span style=\"color: #ff0000;\">CONSTANT_Integer、</span> <span style=\"color: #ff0000;\">CONSTANT_Float、</span> <span style=\"color: #ff0000;\">CONSTANT_Long、</span> <span style=\"color: #ff0000;\">CONSTANT_Double  所有基本数据类型的字面值。<span style=\"color: #000000;\">比如在程序中出现的1用CONSTANT_Integer表示。<span style=\"color: #000000;\">3.1415926F用</span> </span> </span> <span style=\"color: #000000;\">CONSTANT_Float表示。</span> <span style=\"color: #ff0000;\"><br></span></p>\n<p>表格式：   tag             bytes(基本数据类型所需使用的字节序列)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(3) </span> <span style=\"color: #ff0000;\">CONSTANT_Class  使用符号引用来表示类或接口。<span style=\"color: #000000;\">我们知道所有类名都以</span> </span> <span style=\"color: #000000;\">CONSTANT_Utf8表的形式存储。但是我们并不知道</span> <span style=\"color: #000000;\">CONSTANT_Utf8表中哪些字符串是类名，那些是方法名。因此我们必须用一个指向类名字符串的符号引用常量来表明。</span></p>\n<p>表格式：   tag    name_index(给出表示类或接口名的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(4)</span> <span style=\"color: #ff0000;\">CONSTANT_String  同</span> <span style=\"color: #ff0000;\">CONSTANT_Class，指向包含字符串字面值的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span></p>\n<p>表格式：   tag    string_index(给出表示字符串字面值的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(5)</span> <span style=\"color: #ff0000;\">CONSTANT_Fieldref</span> <span style=\"color: #ff0000;\">、</span> <span style=\"color: #ff0000;\">CONSTANT_Methodref、</span> <span style=\"color: #ff0000;\">CONSTANT_InterfaceMethodref</span> <span style=\"color: #ff0000;\">  </span> <span style=\"color: #ff0000;\">  指向包含该字段或方法所属类名的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表，以及指向包含该字段或方法的名字和描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType</span> <span style=\"color: #ff0000;\">表</span></p>\n<p>表格式：   tag   class _index(给出包含所属类名的CONSTANT_Utf8表的索引)  name_and_type_index(包含字段名或方法名以及描<span style=\"color: #000000;\">述符的</span> <span style=\"color: #000000;\">CONSTANT_NameAndType表</span> <span style=\"color: #000000;\">的索引)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\">(6)</span> <span style=\"color: #ff0000;\">CONSTANT_NameAndType </span> <span style=\"color: #ff0000;\">指向包含字段名或方法名以及描述符的</span> <span style=\"color: #ff0000;\">CONSTANT_Utf8表。</span></p>\n<p>表格式：   tag    name_index(给出表示字段名或方法名的CONSTANT_Utf8表的索引)  type_index(给出表示描述符的CONSTANT_Utf8表的索引)</p>\n<p>&nbsp;</p>\n<p>下面是我将一个源程序编译成class文件后，对文件中的每一个字节的分析，可以更好的理解class文件的内容以及常量池的组成。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><span style=\"color: #800080;\">三、TestClass.class 文件实例分析</span> </strong></p>\n<p>[java]<br>//源代码<br>package hr.test;<br>//ClassTest类<br>public class ClassTest {<br>    private int itemI=0;  //itemI类字段<br>    private static String itemS=&quot;我们&quot;; //itemS类字段<br>    private final float PI=3.1415926F;  //PI类字段<br>    //构造器方法<br>    public ClassTest(){<br>    }<br>    //getItemI方法<br>    public int getItemI(){<br>        return this.itemI;<br>    }<br>    //getItemS方法<br>    public static String getItemS(){<br>        return itemS;<br>    }<br>    //main主方法<br>    public static void main(String[] args) {<br>        ClassTest ct=new ClassTest();<br>    }<br>}<br>[/java]</p>\n<p><pre class=\"java\" style=\"display: none;\" title=\"Class文件内容及常量池\">//源代码<br>package hr.test;<br>//ClassTest类<br>public class ClassTest {<br>    private int itemI=0;  //itemI类字段<br>    private static String itemS=”我们”; //itemS类字段<br>    private final float PI=3.1415926F;  //PI类字段<br>    //构造器方法<br>    public ClassTest(){<br>    }<br>    //getItemI方法<br>    public int getItemI(){<br>        return this.itemI;<br>    }<br>    //getItemS方法<br>    public static String getItemS(){<br>        return itemS;<br>    }<br>    //main主方法<br>    public static void main(String[] args) {<br>        ClassTest ct=new ClassTest();<br>    }<br>}<br></pre><br>&nbsp;</p>\n<p><span style=\"color: #800080;\">TestClass.class 字节码分析<span style=\"color: #000000;\">(字节顺序从上到下，从左到右。每个字节用一个0-255的十进制整数表示)</span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #fbe3fc;\">     <strong>202 254 186 190</strong>   <span style=\"color: #000000;\">– 魔数</span> <span style=\"color: #000000;\">             </span>                                                                                      </span><br><span style=\"background-color: #fbe3fc;\">     <strong>0 0</strong>     <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">– 次版本号</span>  </span>                                                                                                              </span><br><span style=\"background-color: #fbe3fc;\">     <strong>0 50</strong>   <span style=\"color: #0000ff;\"><span style=\"color: #000000;\">– 主版本号   </span>   </span>                                                                                                          </span></p>\n<p><span style=\"background-color: #d6d6ff;\">     <strong>0 43</strong>   <span style=\"color: #000000;\">– 常量池中常量表的数量有42个，下面红色括号中的数据表明该常量表所在常量池中的索引，从索引1开始</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(1) </span> <strong>7 0 2 </strong> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 对类ClassTest的符号引用(7为标志  02指向了常量池的索引2的位置) </span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(2) <strong><span style=\"color: #000000;\">1</span> </strong> </span> </span> <strong><span style=\"background-color: #d6d6ff;\">0 17 104 114 47 116 101 115 116 47 67 108 97 115 115 84 101 115 116  </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 类全限定名hr\\test\\ClassTest</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(3) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>7 0 4 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– 对类Object的符号引用</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(4) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 16 106 97 118 97 47 108 97 110 103 47 79 98 106 101 99 116</strong>   <span style=\"color: #000000;\">– 超类全限定名 java/lang/Object   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(5) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1</strong> <strong> 0 5 105 116 101 109 73 </strong>   <span style=\"color: #000000;\">–  第1个类字段名 itemI   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(6) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 1 73</strong>    <span style=\"color: #000000;\">–  I  第1个类字段类型为整型</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(7) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 5 105 116 101 109 83 </strong>   <span style=\"color: #000000;\">–  第2个类字段名 itemS</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(8) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 18 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 </strong>   <span style=\"color: #000000;\">–  第2个类字段类型的全限定名 Ljava/lang/String</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(9) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 2 80 73</strong> <span style=\"color: #000000;\">– 第3个类字段名PI</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(10) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 1 70 </strong> <span style=\"color: #000000;\">– 第3个类字段类型为float</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(11) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 13 67 111 110 115 116 97 110 116 86 97 108 117 101 </strong>   <span style=\"color: #000000;\">—  第3个类字段为常量ConstantValue</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(12) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>4 64 73 15 218</strong>   <span style=\"color: #000000;\">– 第3个类字段float字面值,占4bytes(3.1415926)</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(13) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 8 60 99 108 105 110 105 116 62 </strong>   <span style=\"color: #000000;\">– &lt;clinit&gt;  初始化方法名</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(14) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 3 40 41 86</strong>    <span style=\"color: #000000;\"> – </span> <span style=\"color: #000000;\">()V 方法的返回类型为void</span> </span></p>\n<p><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(15) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 4 67 111 100 101  </strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">– Code</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(16) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>8 0 17</strong> <span style=\"color: #000000;\">– String字符串字面值（0 17表示索引1 7） </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(17) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 6 230 136 145 228 187 172</strong>  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– “我们”</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(18) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>9 0 1 0 19 </strong> <span style=\"color: #000000;\"> – 指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的引用(0 1指向索引1，0 19指向索引19） </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(19) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>12 0 7 0 8</strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">–指向</span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">第2个 </span> <span style=\"background-color: #d6d6ff;\">字段的名字和描述符的索引， </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(20) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 15 76 105 110 101 78 117 109 98 101 114 84 97 98 108 101 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– LineNumberTable</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(21) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>0 18 76 111 99 97 108 86 97 114 105 97 98 108 101 84 97 98 108 101 </strong>   <span style=\"color: #0000ff;\">-<span style=\"color: #000000;\">- LocalVariableTable</span> </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(22) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>1 0 6 60 105 110 105 116 62</strong>   <span style=\"color: #000000;\">– &lt;init&gt;   表示初始化方法名 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(23) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>10 0 3 0 24</strong> <span style=\"color: #000000;\"> –  指向父类Object的构造器方法，0 3表示父类名常量表的索引，0 24表示存放该方法名称和描述符的引用的常量表的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(24) </span> </span> <span style=\"background-color: #d6d6ff;\"><strong>12 0 22 0 14 </strong> <span style=\"color: #000000;\">–  指向方法名和描述符的常量表的索引。0 22是方法名的常量表索引，0 14是描述符的常量表索引</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(25) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">9 0 1 0 26    </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第1个字段的引用， 0 1表示字段所属类型的索引，0 26表示字段名和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(26) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">12 0 5 0 6  <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">–</span> </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\"> 指向第1个字段的名字和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(27) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">9 0 1 0 28    </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第3个字段的引用， 0 1表示字段所属类型的索引，0 28表示字段名和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(28) </span> </span> <strong><span style=\"background-color: #d6d6ff;\">12 0 9 0 10  </span> </strong> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">– 指向第3个字段的名字和描述符的索引 </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(29)</span> <strong>1 0 4 116 104 105 115</strong>    <span style=\"color: #000000;\">–  隐含参数符号this</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(30)</span> <strong>1 0 11 76 67 108 97 115 115 84 101 115 116 59</strong>    <span style=\"color: #000000;\">–  LClassTest;</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(31)</span> <strong>1 0 8 103 101 116 73 116 101 109 73</strong>    <span style=\"color: #000000;\">-</span> <span style=\"color: #000000;\">- 方法名 getItemI</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(32)</span> <strong>1 0 3 40 41 73</strong>    <span style=\"color: #000000;\">– </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">()I  </span> </span> <span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">方法描述符:返回类型int </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(33)</span> <strong>1 0 8 103 101 116 73 116 101 109 83</strong> <span style=\"color: #000000;\">   </span> <span style=\"color: #000000;\">–  方法名 getItemS</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(34)</span> <strong>1 0 20 40 41 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 </strong>    <span style=\"color: #000000;\">— 方法描述符()Ljava/lang/String;</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(35)</span> <strong>1 0 4 109 97 105 110 </strong>    <span style=\"color: #000000;\">–  主方法名main</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(36)</span> <strong>1 0 22 40 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59 41 86</strong>    <span style=\"color: #000000;\">—  ()Ljava/lang/String;)V  主方法中的参数的字符串数组类型名</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(37)</span> <strong> 10 0 1 0 24    </strong> <span style=\"color: #000000;\">指向当前</span> </span> <span style=\"color: #0000ff;\"><span style=\"color: #000000;\"><span style=\"background-color: #d6d6ff;\">ClassTest </span> </span> <span style=\"background-color: #d6d6ff;\"><span style=\"color: #000000;\">类的构造器方法，0 1表示存放当前类名的常量表的索引。0 24是存放方法名和描述符的符号引用的常量表索引。</span>   </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(38)</span> <strong>1 0 4 97 114 103 115 </strong> <span style=\"color: #000000;\">– 参数args</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(39)</span> <strong>1 0 19 91 76 106 97 118 97 47 108 97 110 103 47 83 116 114 105 110 103 59</strong>   <span style=\"color: #000000;\">– 字符串数组 [Ljava/lang/String; </span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(40)</span> <strong>1 0 2 99 116</strong>    <span style=\"color: #000000;\">—  对象符号ct</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(41)</span> <strong>1 0 10 83 111 117 114 99 101 70 105 108 101 </strong> <span style=\"color: #000000;\">  </span> <span style=\"color: #000000;\">– SourceFile</span> </span><br><span style=\"background-color: #d6d6ff;\"><span style=\"color: #ff0000;\">(42)</span> <strong>1 0 14 67 108 97 115 115 84 101 115 116 46 106 97 118 97</strong>    <span style=\"color: #000000;\">– ClassTest.java    </span> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #ffffd6; color: #000000;\"><strong>       0 33</strong> —- access_flag 访问标志  public<br><strong>       </strong> <strong>0 1</strong>   —- this_class  指向当前类的符号引用在常量池中的索引<br><strong>       </strong> <strong>0 3 </strong> —- super_class</span><br><strong>       </strong> <strong>0 0 </strong> <span style=\"background-color: #ffffd6;\">—- inteface_count接口的数量</span> </p>\n<p><span style=\"background-color: #d6ead6; color: #000000;\"><strong>       0 3</strong>   —  field_count字段的数量</span></p>\n<p><span style=\"background-color: #d6ead6; color: #000000;\">       // </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemI</span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 2 </strong> —- private 修饰符<br><strong>       0 5 </strong> —- 字段名在常量池中的索引，字段itemI<br><strong>       0 6</strong>   —- 字段的描述符(所属类型)在常量池中的索引<br><strong>       0 0</strong>   —  字段的属性信息表(attribute_info)的数量<br></span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 itemS</span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 10</strong>   —-  private static 修饰符<br><strong>       0 7 </strong> —字段名在常量池中的索引，字段itemS<br><strong>       0 8 </strong> —字段的描述符(所属类型)在常量池中的索引<br><strong>       0 0 </strong> —  字段的属性信息表(attribute_info)的数量<br></span> <span style=\"background-color: #d6ead6; color: #000000;\">// </span> <span style=\"background-color: #d6ead6; color: #000000;\">字段 PI  </span> <span style=\"background-color: #d6ead6; color: #000000;\"><br><strong>       0 18</strong>   – private final 修饰符<br><strong>       0 9</strong> —字段名在常量池中的索引，//字段PI<br><strong>       0 10</strong> —字段的描述符(所属类型)在常量池中的索引<br><strong>       0 1 </strong> — 字段的属性信息表(attribute_info)的数量<br><strong>       0 11</strong>   — 属性名在常量池中的索引。即ConstantValue<br><strong>       0 0 0 2</strong> — 属性所占的字节长度<br><strong>       0 12</strong>   — 属性值在常量池中的索引。即常量字面值</span> </p>\n<p><strong>       0 5  – </strong> <span style=\"background-color: #ccd6e0;\">Method_count方法的数量</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//类的静态数据初始化方法&lt;clinit&gt;</span><br><strong>       0 8 </strong> <span style=\"background-color: #ccd6e0;\">—- static 修饰符(所有的初始化方法都是static的)</span><br><strong>       0 13 </strong> <span style=\"background-color: #ccd6e0;\">— 在常量池中的索引。初始化方法名&lt;clinit&gt;，该方法直接由JVM在特定的时候调用，并非由字节码生成。</span><br><strong>       0 14 — </strong> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。返回类型为void。</span></p>\n<p><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 – </strong> <span style=\"background-color: #ccd6e0;\">属性名</span> <span style=\"background-color: #ccd6e0;\">在常量池中的索引。即code</span><br><strong>       0 0 0 42 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度2</span><br><strong>       0 1 0 0 0 0 0 6 18 16 179 0 18 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 5 0 5 0 2 0 21 0 0 0 2 0 0 </strong> <span style=\"background-color: #ccd6e0;\">—该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//类的普通实例数据的初始化方法，针对类构造器生成的&lt;init&gt;方法。</span><br><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">public 修饰符</span><br><strong>       0 22 </strong> <span style=\"background-color: #ccd6e0;\">— 构初始化方法名&lt;init&gt;</span><br><strong>       0 14 — </strong> <span style=\"background-color: #ccd6e0;\">构造器的返回类型为void</span><br><strong>       0 1  — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 </strong> <span style=\"background-color: #ccd6e0;\">—  属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 70 –</strong> <span style=\"background-color: #ccd6e0;\">属性所占的字节长度70</span><br><strong>       0 2 0 1 0 0 0 16 42 183 0 23 42 3 181 0 25 42 18 12 181 0 27 177 0 0 0 2 0 200 0 0 18 0 4 0 0 0 </strong> <strong>8 0 4 0 4 0 9 0 6 0 15 0 9 0 21 0 0 0 12 0 10 0 0 16 0 29 0 30 0 0</strong> <span style=\"background-color: #ccd6e0;\">—该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//getItemI方法</span><br><strong>       0 1 </strong> <span style=\"background-color: #ccd6e0;\">— public 修饰符</span><br><strong>       0 31 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法名getItemI</span><br><strong>       0 32 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法返回类型为int</span><br><strong>       0 1 – </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15  </strong> <span style=\"background-color: #ccd6e0;\">— 属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 47 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度70</span><br><strong>       0 1 0 1 0 0 0 5 42 180 0 25 172 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 12 0 21 0 0 0 12 0 1 0 0 0 5 0 29 0 30 0 0  — </strong> <span style=\"background-color: #ccd6e0;\">该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//getItemS方法</span><br><strong>       0 9 </strong> <span style=\"background-color: #ccd6e0;\">— public static 修饰符</span><br><strong>       0 33 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。方法名getItemS</span><br><strong>       0 34 -</strong> <span style=\"background-color: #ccd6e0;\">– 在常量池中的索引。方法返回类型为String</span><br><strong>       0 1 — </strong> <span style=\"background-color: #ccd6e0;\">属性数量</span><br><strong>       0 15 – </strong> <span style=\"background-color: #ccd6e0;\">属性名在常量池中的索引。即Code</span><br><strong>       0 0 0 36 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度36</span><br><strong>       0 1 0 0 0 0 0 4 178 0 18 176 0 0 0 2 0 20 0 0 0 6 0 1 0 0 0 16 0 21 0 0 0 2 0 0</strong> <span style=\"background-color: #ccd6e0;\">–该方法的字节码指令序列和其他信息</span><br><strong>       </strong> <span style=\"background-color: #ccd6e0;\">//main方法</span><br><strong>       0 9 </strong> <span style=\"background-color: #ccd6e0;\">— public static 修饰符</span><br><strong>       0 35 </strong> <span style=\"background-color: #ccd6e0;\">—  在常量池中的索引。主方法名main</span><br><strong>       0 36</strong> <span style=\"background-color: #ccd6e0;\">– 在常量池中的索引。方法返回类型为String[]</span><br><strong>       0 1</strong> <span style=\"background-color: #ccd6e0;\"> —  属性数量</span><br><strong>       0 15  </strong> <span style=\"background-color: #ccd6e0;\">—  属性名在常量池中的索引。即Code</span><br><strong>       0 0 0  65 </strong> <span style=\"background-color: #ccd6e0;\">—  属性所占的字节长度36</span><br><strong>       0 2 0 2 0 0 0 9 187 0 1 89 183 0 37 76 177 0 0 0 2 0 20 0 0 0 10 0 2 0 0 0 20 0 8 0 21 0 21 0 0 0 22 0 2 0 0 0 9 0 38 0 39 0 0 0 8 0 1 0 40 0 30 0 1 0 1 0 41 0 0 0 2 0 42 </strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>我们分析上面的字节码例子，不难看出：</p>\n<p>&nbsp;</p>\n<p>蓝色背景的常量池字节码区域：</p>\n<p>(1) <span style=\"color: #ff0000;\">所有的字面值都是存放在常量池中的。</span> 特别注意的是“我们”这个字符串常量也是在常量池中的。如果一个程序出现多个“我们”，那么常量池中也只会有一个。另外，也正是因为“我们”存放在常量池中，使得一些字符串的==比较变的需要琢磨了。</p>\n<p>(2)<span style=\"color: #ff0000;\">ClassTest并没有任何显示的父类。但在常量池中，我们发现有Object的符号常量存在。</span> 这也证实了在Java中，任何类都直接或间接继承了Object的，而Object并不需要在代码中显示继承，JVM会帮我们做到这一点。</p>\n<p>(3)<span style=\"background-color: #ffffff; color: #ff0000;\">常量池中有一个隐含参数this的符号常量。<span style=\"color: #000000;\">即使程序中不存在this，JVM也会悄悄的设置一个这样的对象。</span> </span></p>\n<p>&nbsp;</p>\n<p>绿色背景的类字段字节码区域：</p>\n<p>(1)字段PI是浮点型常量，<span style=\"color: #ff0000;\">在编译期的字节码中就已经指定好了PI的字面值存储在常量池中的某个索引内</span> 。这一点也证实了Java中的常量在编译期就已经得到了值，在运行过程中是无法改变的。</p>\n<p>&nbsp;</p>\n<p>灰背景的类方法字节码区域：</p>\n<p>(1)<span style=\"color: #ff0000;\">主方法main是作为ClassTest的类方法存在的，在字节码中main和其他的类方法并没有什么区别。</span> 实际上，我们也确实可以通过ClassTest.main(..)来调用ClassTest中的main方法。</p>\n<p>&nbsp;</p>\n<p>(2)在class文件常量池字节码中有两个比较特别的方法名符号：&lt;clinit&gt;和&lt;init&gt;。其中&lt;clinit&gt;方法是编译器自己生成的，<span style=\"color: #ff0000;\">编译器会把类静态变量的直接初始化语句和静态初始化语句块的代码都放到了class文件的&lt;clinit&gt;方法中。而对所有非静态非常量数据域的初始化工作要靠&lt;init&gt;方法来完成。<span style=\"color: #000000;\">针对每一个类的构造方法，编译器都会产生一个&lt;init&gt;方法。即使是缺省构造器也不例外。</span></span></p>\n"},{"title":"Python3实现基于模板及逆向数据库的代码生成器","id":"69","date":"2015-01-19T07:24:24.000Z","_content":"\n这段时间由于有大量重复的代码工作，因此打算用代码生成器来提高工作效率。原理十分简单，根据数据库表名逆向工程得到表信息，利用得到的信息生成代码文件。\n需要提的是一开始我才用的是字符串拼接和参数的方式来完成的，但是第一效率太低，而且几乎没有通用性，每个类型的文件都得写大量代码来进行字符串操作。后来改成了利用正则表达式对template文件进行操作，这样就可以把输出内容与代码隔离。当需要导入新模板时，只需要将一篇现成的代码保存为template文件然后用标签将其中的关键词替换就可以了。\n\n主要代码分为两大块，一是核心的parser，利用正则表达式对标签进行解析；二是参数生成部分，主要是接受用户输入，然后逆向数据库得到字段信息，从用户输入和字段信息中提取关键信息，最后根据配置文件调用相应的模板文件和参数一起送入parser完成解析。因此如果想要增加参数，只需要在这部分添加代码即可。\n\n目前为止，生成器提供一下几种标签：\n1.```{name}```，简单替换。替换为name所对应的值。\n2.{% raw %}{{?name:content?}}{% endraw %}，可选内容。如果参数中的chosen数组不包含name则这段会被删除，否则将修饰用的标签删除保留content部分。\n3.{% raw %}{{!name:content!}}{% endraw %}，循环。这里的name应该是参数中所提供的dict list，parser将遍历lsit，同时用当前的dict中的参数对content进行置换，遍历完成后将所有content拼接在一起后置入文档中。另外，content内目前实现了````{!a|b!}```的语法，当不是最后一次循环时会调用啊，否则调用b，后期打算更改为根据输入条件来选择输出内容。\n\n具体代码就暂时不放了，现在的虽然能用，但是功能不够完善，2和3都需要改进，而且还有文档引用的功能没加，等全部完善了在放代码吧。","source":"_posts/Python3实现基于模板及逆向数据库的代码生成器.md","raw":"---\ntitle: Python3实现基于模板及逆向数据库的代码生成器\nid: 69\ncategories:\n  - python\ndate: 2015-01-19 15:24:24\ntags:\n  - python\n---\n\n这段时间由于有大量重复的代码工作，因此打算用代码生成器来提高工作效率。原理十分简单，根据数据库表名逆向工程得到表信息，利用得到的信息生成代码文件。\n需要提的是一开始我才用的是字符串拼接和参数的方式来完成的，但是第一效率太低，而且几乎没有通用性，每个类型的文件都得写大量代码来进行字符串操作。后来改成了利用正则表达式对template文件进行操作，这样就可以把输出内容与代码隔离。当需要导入新模板时，只需要将一篇现成的代码保存为template文件然后用标签将其中的关键词替换就可以了。\n\n主要代码分为两大块，一是核心的parser，利用正则表达式对标签进行解析；二是参数生成部分，主要是接受用户输入，然后逆向数据库得到字段信息，从用户输入和字段信息中提取关键信息，最后根据配置文件调用相应的模板文件和参数一起送入parser完成解析。因此如果想要增加参数，只需要在这部分添加代码即可。\n\n目前为止，生成器提供一下几种标签：\n1.```{name}```，简单替换。替换为name所对应的值。\n2.{% raw %}{{?name:content?}}{% endraw %}，可选内容。如果参数中的chosen数组不包含name则这段会被删除，否则将修饰用的标签删除保留content部分。\n3.{% raw %}{{!name:content!}}{% endraw %}，循环。这里的name应该是参数中所提供的dict list，parser将遍历lsit，同时用当前的dict中的参数对content进行置换，遍历完成后将所有content拼接在一起后置入文档中。另外，content内目前实现了````{!a|b!}```的语法，当不是最后一次循环时会调用啊，否则调用b，后期打算更改为根据输入条件来选择输出内容。\n\n具体代码就暂时不放了，现在的虽然能用，但是功能不够完善，2和3都需要改进，而且还有文档引用的功能没加，等全部完善了在放代码吧。","slug":"Python3实现基于模板及逆向数据库的代码生成器","published":1,"updated":"2016-05-06T03:02:47.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1i0001d0chktjqqthr","content":"<p>这段时间由于有大量重复的代码工作，因此打算用代码生成器来提高工作效率。原理十分简单，根据数据库表名逆向工程得到表信息，利用得到的信息生成代码文件。<br>需要提的是一开始我才用的是字符串拼接和参数的方式来完成的，但是第一效率太低，而且几乎没有通用性，每个类型的文件都得写大量代码来进行字符串操作。后来改成了利用正则表达式对template文件进行操作，这样就可以把输出内容与代码隔离。当需要导入新模板时，只需要将一篇现成的代码保存为template文件然后用标签将其中的关键词替换就可以了。</p>\n<p>主要代码分为两大块，一是核心的parser，利用正则表达式对标签进行解析；二是参数生成部分，主要是接受用户输入，然后逆向数据库得到字段信息，从用户输入和字段信息中提取关键信息，最后根据配置文件调用相应的模板文件和参数一起送入parser完成解析。因此如果想要增加参数，只需要在这部分添加代码即可。</p>\n<p>目前为止，生成器提供一下几种标签：<br>1.<code>{name}</code>，简单替换。替换为name所对应的值。<br>2.{{?name:content?}}，可选内容。如果参数中的chosen数组不包含name则这段会被删除，否则将修饰用的标签删除保留content部分。<br>3.{{!name:content!}}，循环。这里的name应该是参数中所提供的dict list，parser将遍历lsit，同时用当前的dict中的参数对content进行置换，遍历完成后将所有content拼接在一起后置入文档中。另外，content内目前实现了<code>`{!a|b!}</code>的语法，当不是最后一次循环时会调用啊，否则调用b，后期打算更改为根据输入条件来选择输出内容。</p>\n<p>具体代码就暂时不放了，现在的虽然能用，但是功能不够完善，2和3都需要改进，而且还有文档引用的功能没加，等全部完善了在放代码吧。</p>\n","excerpt":"","more":"<p>这段时间由于有大量重复的代码工作，因此打算用代码生成器来提高工作效率。原理十分简单，根据数据库表名逆向工程得到表信息，利用得到的信息生成代码文件。<br>需要提的是一开始我才用的是字符串拼接和参数的方式来完成的，但是第一效率太低，而且几乎没有通用性，每个类型的文件都得写大量代码来进行字符串操作。后来改成了利用正则表达式对template文件进行操作，这样就可以把输出内容与代码隔离。当需要导入新模板时，只需要将一篇现成的代码保存为template文件然后用标签将其中的关键词替换就可以了。</p>\n<p>主要代码分为两大块，一是核心的parser，利用正则表达式对标签进行解析；二是参数生成部分，主要是接受用户输入，然后逆向数据库得到字段信息，从用户输入和字段信息中提取关键信息，最后根据配置文件调用相应的模板文件和参数一起送入parser完成解析。因此如果想要增加参数，只需要在这部分添加代码即可。</p>\n<p>目前为止，生成器提供一下几种标签：<br>1.<code>{name}</code>，简单替换。替换为name所对应的值。<br>2.{{?name:content?}}，可选内容。如果参数中的chosen数组不包含name则这段会被删除，否则将修饰用的标签删除保留content部分。<br>3.{{!name:content!}}，循环。这里的name应该是参数中所提供的dict list，parser将遍历lsit，同时用当前的dict中的参数对content进行置换，遍历完成后将所有content拼接在一起后置入文档中。另外，content内目前实现了<code>`{!a|b!}</code>的语法，当不是最后一次循环时会调用啊，否则调用b，后期打算更改为根据输入条件来选择输出内容。</p>\n<p>具体代码就暂时不放了，现在的虽然能用，但是功能不够完善，2和3都需要改进，而且还有文档引用的功能没加，等全部完善了在放代码吧。</p>\n"},{"title":"Python每日一题 第4期","id":"54","date":"2014-12-15T07:29:03.000Z","_content":"\n[题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 ](http://www.pythonla.com/read-25.html \"题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 \")\n\n随机生成并统计字母数量最后拼接为字符串，原理很简单。此处为了提高效率采取一次生成多位的方式以减少随机次数，提高效率。需要注意的是15,16两行采用位运算以提高效率，如果改为求余和求模则效率会有答复下降。\n另外，这里可以采用多线程机制以进一步提高速度。\n[python]\nimport random\n\nseed = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}'\nlength = int(input('length:'))\ncount = [0] * 64\nout_list = []\nwhile length &gt; 0:\n    if length &gt; 10000:\n        c_length = 10000\n    else:\n        c_length = length\n    length -= 10000\n    ran_int = random.randint(1, 64 ** c_length)\n    for i in range(0, c_length):\n        t = ran_int &amp; 63\n        ran_int &gt;&gt;= 6\n        count[t] += 1\n        out_list.append(seed[t])\nprint(count)\nprint(''.join(out_list))\n[/python]","source":"_posts/e3-80-90-e6-88-91-e4-bb-ac-e4-b8-80-e8-b5-b7-e5-ad-a6python-e5-90-a7-e3-80-91-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac4-e6-9c-9f.md","raw":"---\ntitle: Python每日一题 第4期\ntags:\n  - python\n  - 每日一题\n  - 练习\nid: 54\ncategories:\n  - python\ndate: 2014-12-15 15:29:03\n---\n\n[题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 ](http://www.pythonla.com/read-25.html \"题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 \")\n\n随机生成并统计字母数量最后拼接为字符串，原理很简单。此处为了提高效率采取一次生成多位的方式以减少随机次数，提高效率。需要注意的是15,16两行采用位运算以提高效率，如果改为求余和求模则效率会有答复下降。\n另外，这里可以采用多线程机制以进一步提高速度。\n[python]\nimport random\n\nseed = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}'\nlength = int(input('length:'))\ncount = [0] * 64\nout_list = []\nwhile length &gt; 0:\n    if length &gt; 10000:\n        c_length = 10000\n    else:\n        c_length = length\n    length -= 10000\n    ran_int = random.randint(1, 64 ** c_length)\n    for i in range(0, c_length):\n        t = ran_int &amp; 63\n        ran_int &gt;&gt;= 6\n        count[t] += 1\n        out_list.append(seed[t])\nprint(count)\nprint(''.join(out_list))\n[/python]","slug":"e3-80-90-e6-88-91-e4-bb-ac-e4-b8-80-e8-b5-b7-e5-ad-a6python-e5-90-a7-e3-80-91-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac4-e6-9c-9f","published":1,"updated":"2016-05-06T02:34:31.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1o0004d0ch10ehaqia","content":"<p><a href=\"http://www.pythonla.com/read-25.html\" title=\"题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 \" target=\"_blank\" rel=\"external\">题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 </a></p>\n<p>随机生成并统计字母数量最后拼接为字符串，原理很简单。此处为了提高效率采取一次生成多位的方式以减少随机次数，提高效率。需要注意的是15,16两行采用位运算以提高效率，如果改为求余和求模则效率会有答复下降。<br>另外，这里可以采用多线程机制以进一步提高速度。<br>[python]<br>import random</p>\n<p>seed = ‘1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}’<br>length = int(input(‘length:’))<br>count = [0] <em> 64<br>out_list = []<br>while length &gt; 0:<br>    if length &gt; 10000:<br>        c_length = 10000<br>    else:<br>        c_length = length<br>    length -= 10000<br>    ran_int = random.randint(1, 64 *</em> c_length)<br>    for i in range(0, c_length):<br>        t = ran_int &amp; 63<br>        ran_int &gt;&gt;= 6<br>        count[t] += 1<br>        out_list.append(seed[t])<br>print(count)<br>print(‘’.join(out_list))<br>[/python]</p>\n","excerpt":"","more":"<p><a href=\"http://www.pythonla.com/read-25.html\" title=\"题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 \">题目：随机生成指定数量的随机字符串，并统计每个字符出现的次数。 </a></p>\n<p>随机生成并统计字母数量最后拼接为字符串，原理很简单。此处为了提高效率采取一次生成多位的方式以减少随机次数，提高效率。需要注意的是15,16两行采用位运算以提高效率，如果改为求余和求模则效率会有答复下降。<br>另外，这里可以采用多线程机制以进一步提高速度。<br>[python]<br>import random</p>\n<p>seed = ‘1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}’<br>length = int(input(‘length:’))<br>count = [0] <em> 64<br>out_list = []<br>while length &gt; 0:<br>    if length &gt; 10000:<br>        c_length = 10000<br>    else:<br>        c_length = length<br>    length -= 10000<br>    ran_int = random.randint(1, 64 *</em> c_length)<br>    for i in range(0, c_length):<br>        t = ran_int &amp; 63<br>        ran_int &gt;&gt;= 6<br>        count[t] += 1<br>        out_list.append(seed[t])<br>print(count)<br>print(‘’.join(out_list))<br>[/python]</p>\n"},{"title":"bootstrap-MagicSuggest插件修改，防止控件初始化时丢失属性。","id":"113","date":"2015-04-08T09:26:10.000Z","_content":"\n与之前常用的easyui不同，MagicSuggest没有将原始标签设为hidden，并作为访问入口的方式。而是选择用新标签替换原始表签，同时将原标签的id和style复制过来，这样带来的缺点是，在对象初始化时，原标签所绑定的属性和事件会丢失。\n下面就是对MagicSuggest进行修改，将原始标签所有属性复制入新标签中。此处没有处理事件，因为我暂时不需要。\n第一处是遍历原标签属性，其中2,4行为原有，我增加了1,3行，将所有属性并入attrivutes中，而不是直接置入def，防止混淆。\n第二处是通过extend方法将原来的属性和cfg.attributes合并后赋给新标签。\n[javascript]\ndef.attributes = {};\n$.each(this.attributes, function (i, att) {\n    def.attributes[att.name] = att.value;\n    def[att.name] = att.name === 'value' &amp;&amp; att.value !== '' ? JSON.parse(att.value) : att.value;\n});\n\nms.container = $('&lt;div/&gt;', $.extend(true, {}, cfg.attributes, /* 原代码 */));\n[/javascript]","source":"_posts/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e9-98-b2-e6-ad-a2-e6-8e-a7-e4-bb-b6-e5-88-9d-e5-a7-8b-e5-8c-96-e6-97-b6-e4-b8-a2-e5-a4-b1-e5-b1-9e-e6-80-a7-e3-80-82.md","raw":"---\ntitle: bootstrap-MagicSuggest插件修改，防止控件初始化时丢失属性。\ntags:\n  - bootstrap\n  - javaScript\nid: 113\ncategories:\n  - JavaScript\ndate: 2015-04-08 17:26:10\n---\n\n与之前常用的easyui不同，MagicSuggest没有将原始标签设为hidden，并作为访问入口的方式。而是选择用新标签替换原始表签，同时将原标签的id和style复制过来，这样带来的缺点是，在对象初始化时，原标签所绑定的属性和事件会丢失。\n下面就是对MagicSuggest进行修改，将原始标签所有属性复制入新标签中。此处没有处理事件，因为我暂时不需要。\n第一处是遍历原标签属性，其中2,4行为原有，我增加了1,3行，将所有属性并入attrivutes中，而不是直接置入def，防止混淆。\n第二处是通过extend方法将原来的属性和cfg.attributes合并后赋给新标签。\n[javascript]\ndef.attributes = {};\n$.each(this.attributes, function (i, att) {\n    def.attributes[att.name] = att.value;\n    def[att.name] = att.name === 'value' &amp;&amp; att.value !== '' ? JSON.parse(att.value) : att.value;\n});\n\nms.container = $('&lt;div/&gt;', $.extend(true, {}, cfg.attributes, /* 原代码 */));\n[/javascript]","slug":"bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e9-98-b2-e6-ad-a2-e6-8e-a7-e4-bb-b6-e5-88-9d-e5-a7-8b-e5-8c-96-e6-97-b6-e4-b8-a2-e5-a4-b1-e5-b1-9e-e6-80-a7-e3-80-82","published":1,"updated":"2016-05-06T02:34:31.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1p0005d0chvgy7h4m5","content":"<p>与之前常用的easyui不同，MagicSuggest没有将原始标签设为hidden，并作为访问入口的方式。而是选择用新标签替换原始表签，同时将原标签的id和style复制过来，这样带来的缺点是，在对象初始化时，原标签所绑定的属性和事件会丢失。<br>下面就是对MagicSuggest进行修改，将原始标签所有属性复制入新标签中。此处没有处理事件，因为我暂时不需要。<br>第一处是遍历原标签属性，其中2,4行为原有，我增加了1,3行，将所有属性并入attrivutes中，而不是直接置入def，防止混淆。<br>第二处是通过extend方法将原来的属性和cfg.attributes合并后赋给新标签。<br>[javascript]<br>def.attributes = {};<br>$.each(this.attributes, function (i, att) {<br>    def.attributes[att.name] = att.value;<br>    def[att.name] = att.name === ‘value’ &amp;&amp; att.value !== ‘’ ? JSON.parse(att.value) : att.value;<br>});</p>\n<p>ms.container = $(‘&lt;div/&gt;’, $.extend(true, {}, cfg.attributes, /<em> 原代码 </em>/));<br>[/javascript]</p>\n","excerpt":"","more":"<p>与之前常用的easyui不同，MagicSuggest没有将原始标签设为hidden，并作为访问入口的方式。而是选择用新标签替换原始表签，同时将原标签的id和style复制过来，这样带来的缺点是，在对象初始化时，原标签所绑定的属性和事件会丢失。<br>下面就是对MagicSuggest进行修改，将原始标签所有属性复制入新标签中。此处没有处理事件，因为我暂时不需要。<br>第一处是遍历原标签属性，其中2,4行为原有，我增加了1,3行，将所有属性并入attrivutes中，而不是直接置入def，防止混淆。<br>第二处是通过extend方法将原来的属性和cfg.attributes合并后赋给新标签。<br>[javascript]<br>def.attributes = {};<br>$.each(this.attributes, function (i, att) {<br>    def.attributes[att.name] = att.value;<br>    def[att.name] = att.name === ‘value’ &amp;&amp; att.value !== ‘’ ? JSON.parse(att.value) : att.value;<br>});</p>\n<p>ms.container = $(‘&lt;div/&gt;’, $.extend(true, {}, cfg.attributes, /<em> 原代码 </em>/));<br>[/javascript]</p>\n"},{"title":"任意按键实现tab和shift+tab遍历html元素的功能","id":"103","date":"2015-04-01T07:49:49.000Z","_content":"\n##### 初始化：\n\n首先遍历所有有tabindex的标签，普通标签直接将tabindex的值存入data-tabindex中。对于第三方库渲染的特殊控件，默认的tabindex是无效的，在default.init中可以配置针对的初始化方法，将tabindex值绑定到真正的标签的data-tabindex属性上。\n预处理完毕后，选择所有含data-tabindex属性的标签并排序后放入tabList中。此后当事件被触发时，事件函数会利用闭包特性取得tabList。\n最后完成事件绑定，绑定前先解绑一次，以防止重复绑定。\n&nbsp;\n\n##### 事件响应：\n\n触发事件后依次通过判断keyCode是否在forwardKey和backwardKey中来决定是否需要后移或前移。如果需要执行时对于普通标签执行默认的方法，对于包含defaulte.execute中的class的特殊标签则先执行标签中的处理函数，当处理函数返回true时会继续执行默认方法，否则阻止默认方法。\n\n##### 调用方式：\n\n在html中设置tabindex或通过js动态设置tabindex后，执行$.extendTab()即可。\n$.extendTab.default定义了特殊控件处理方式及需要响应的按键，可以通过$.extend修改\n[javascript]\n(function ($) {\n    $.extendTab = function (i18nData) {\n        $('[tabindex]').each(function (i, v) {\n            var _this = $(v);\n            var flag = true;\n            $.each($.extendTab.default.init, function (key, value) {\n                if (_this.hasClass(key)) {\n                    value(_this);\n                    flag = false;\n                    return false;\n                }\n            });\n            if (flag) {\n                _this.attr('data-tabindex', _this.attr('tabindex'));\n            }\n        });\n        var tabList = $('[data-tabindex]').sort(function (a, b) {\n            return $(a).data('tabindex') &gt; $(b).data('tabindex')\n        });\n        tabList.off('keydown.extendTab');\n        tabList.on('keydown.extendTab', function (e) {\n            var target = $(e.currentTarget);\n            if ($.extendTab.default.forwardKey.contains(e.keyCode)) {\n                var flag = true;\n                $.each($.extendTab.default.execute, function (key, value) {\n                    if (target.hasClass(key)) {\n                        flag = value(target);\n                        return false;\n                    }\n                });\n                if (flag) {\n                    var _idx = tabList.index(this) + 1;\n                    tabList.eq(_idx &gt;= (tabList.length) ? 0 : _idx).focus();\n                    e.preventDefault();\n                }\n            } else if ($.extendTab.default.backwardKey.contains(e.keyCode)) {\n                var flag = true;\n                $.each($.extendTab.default.execute, function (key, value) {\n                    if (target.hasClass(key)) {\n                        flag = value(target);\n                        return false;\n                    }\n                });\n                if (flag) {\n                    tabList.eq(tabList.index(this) - 1).focus();\n                    e.preventDefault();\n                }\n            }\n        });\n    };\n\n    $.extendTab.default = {\n        init       : {\n            'combo-f': function (jq) {\n                jq.next().find('.combo-text').attr('data-tabindex', jq.attr('tabindex'));\n            }\n        },\n        execute    : {\n            'combo-text': function (jq) {\n                clearTimeout(jq.parent().prev().data('combo').timer);\n                return true;\n            }\n        },\n        forwardKey : [39, 13],\n        backwardKey: [37]\n    }\n})(jQuery);\n[/javascript]\nhttps://github.com/woodensail/extendTab","source":"_posts/e4-bb-bb-e6-84-8f-e6-8c-89-e9-94-ae-e5-ae-9e-e7-8e-b0tab-e5-92-8cshifttab-e9-81-8d-e5-8e-86html-e5-85-83-e7-b4-a0-e7-9a-84-e5-8a-9f-e8-83-bd.md","raw":"---\ntitle: 任意按键实现tab和shift+tab遍历html元素的功能\ntags:\n  - javaScript\n  - jQuery\nid: 103\ncategories:\n  - JavaScript\ndate: 2015-04-01 15:49:49\n---\n\n##### 初始化：\n\n首先遍历所有有tabindex的标签，普通标签直接将tabindex的值存入data-tabindex中。对于第三方库渲染的特殊控件，默认的tabindex是无效的，在default.init中可以配置针对的初始化方法，将tabindex值绑定到真正的标签的data-tabindex属性上。\n预处理完毕后，选择所有含data-tabindex属性的标签并排序后放入tabList中。此后当事件被触发时，事件函数会利用闭包特性取得tabList。\n最后完成事件绑定，绑定前先解绑一次，以防止重复绑定。\n&nbsp;\n\n##### 事件响应：\n\n触发事件后依次通过判断keyCode是否在forwardKey和backwardKey中来决定是否需要后移或前移。如果需要执行时对于普通标签执行默认的方法，对于包含defaulte.execute中的class的特殊标签则先执行标签中的处理函数，当处理函数返回true时会继续执行默认方法，否则阻止默认方法。\n\n##### 调用方式：\n\n在html中设置tabindex或通过js动态设置tabindex后，执行$.extendTab()即可。\n$.extendTab.default定义了特殊控件处理方式及需要响应的按键，可以通过$.extend修改\n[javascript]\n(function ($) {\n    $.extendTab = function (i18nData) {\n        $('[tabindex]').each(function (i, v) {\n            var _this = $(v);\n            var flag = true;\n            $.each($.extendTab.default.init, function (key, value) {\n                if (_this.hasClass(key)) {\n                    value(_this);\n                    flag = false;\n                    return false;\n                }\n            });\n            if (flag) {\n                _this.attr('data-tabindex', _this.attr('tabindex'));\n            }\n        });\n        var tabList = $('[data-tabindex]').sort(function (a, b) {\n            return $(a).data('tabindex') &gt; $(b).data('tabindex')\n        });\n        tabList.off('keydown.extendTab');\n        tabList.on('keydown.extendTab', function (e) {\n            var target = $(e.currentTarget);\n            if ($.extendTab.default.forwardKey.contains(e.keyCode)) {\n                var flag = true;\n                $.each($.extendTab.default.execute, function (key, value) {\n                    if (target.hasClass(key)) {\n                        flag = value(target);\n                        return false;\n                    }\n                });\n                if (flag) {\n                    var _idx = tabList.index(this) + 1;\n                    tabList.eq(_idx &gt;= (tabList.length) ? 0 : _idx).focus();\n                    e.preventDefault();\n                }\n            } else if ($.extendTab.default.backwardKey.contains(e.keyCode)) {\n                var flag = true;\n                $.each($.extendTab.default.execute, function (key, value) {\n                    if (target.hasClass(key)) {\n                        flag = value(target);\n                        return false;\n                    }\n                });\n                if (flag) {\n                    tabList.eq(tabList.index(this) - 1).focus();\n                    e.preventDefault();\n                }\n            }\n        });\n    };\n\n    $.extendTab.default = {\n        init       : {\n            'combo-f': function (jq) {\n                jq.next().find('.combo-text').attr('data-tabindex', jq.attr('tabindex'));\n            }\n        },\n        execute    : {\n            'combo-text': function (jq) {\n                clearTimeout(jq.parent().prev().data('combo').timer);\n                return true;\n            }\n        },\n        forwardKey : [39, 13],\n        backwardKey: [37]\n    }\n})(jQuery);\n[/javascript]\nhttps://github.com/woodensail/extendTab","slug":"e4-bb-bb-e6-84-8f-e6-8c-89-e9-94-ae-e5-ae-9e-e7-8e-b0tab-e5-92-8cshifttab-e9-81-8d-e5-8e-86html-e5-85-83-e7-b4-a0-e7-9a-84-e5-8a-9f-e8-83-bd","published":1,"updated":"2016-05-06T02:34:31.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1q0007d0chn7sqr3hr","content":"<h5 id=\"初始化：\"><a href=\"#初始化：\" class=\"headerlink\" title=\"初始化：\"></a>初始化：</h5><p>首先遍历所有有tabindex的标签，普通标签直接将tabindex的值存入data-tabindex中。对于第三方库渲染的特殊控件，默认的tabindex是无效的，在default.init中可以配置针对的初始化方法，将tabindex值绑定到真正的标签的data-tabindex属性上。<br>预处理完毕后，选择所有含data-tabindex属性的标签并排序后放入tabList中。此后当事件被触发时，事件函数会利用闭包特性取得tabList。<br>最后完成事件绑定，绑定前先解绑一次，以防止重复绑定。<br>&nbsp;</p>\n<h5 id=\"事件响应：\"><a href=\"#事件响应：\" class=\"headerlink\" title=\"事件响应：\"></a>事件响应：</h5><p>触发事件后依次通过判断keyCode是否在forwardKey和backwardKey中来决定是否需要后移或前移。如果需要执行时对于普通标签执行默认的方法，对于包含defaulte.execute中的class的特殊标签则先执行标签中的处理函数，当处理函数返回true时会继续执行默认方法，否则阻止默认方法。</p>\n<h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><p>在html中设置tabindex或通过js动态设置tabindex后，执行$.extendTab()即可。<br>$.extendTab.default定义了特殊控件处理方式及需要响应的按键，可以通过$.extend修改<br>[javascript]<br>(function ($) {<br>    $.extendTab = function (i18nData) {<br>        $(‘[tabindex]’).each(function (i, v) {<br>            var _this = $(v);<br>            var flag = true;<br>            $.each($.extendTab.default.init, function (key, value) {<br>                if (_this.hasClass(key)) {<br>                    value(_this);<br>                    flag = false;<br>                    return false;<br>                }<br>            });<br>            if (flag) {<br>                _this.attr(‘data-tabindex’, _this.attr(‘tabindex’));<br>            }<br>        });<br>        var tabList = $(‘[data-tabindex]’).sort(function (a, b) {<br>            return $(a).data(‘tabindex’) &gt; $(b).data(‘tabindex’)<br>        });<br>        tabList.off(‘keydown.extendTab’);<br>        tabList.on(‘keydown.extendTab’, function (e) {<br>            var target = $(e.currentTarget);<br>            if ($.extendTab.default.forwardKey.contains(e.keyCode)) {<br>                var flag = true;<br>                $.each($.extendTab.default.execute, function (key, value) {<br>                    if (target.hasClass(key)) {<br>                        flag = value(target);<br>                        return false;<br>                    }<br>                });<br>                if (flag) {<br>                    var _idx = tabList.index(this) + 1;<br>                    tabList.eq(_idx &gt;= (tabList.length) ? 0 : _idx).focus();<br>                    e.preventDefault();<br>                }<br>            } else if ($.extendTab.default.backwardKey.contains(e.keyCode)) {<br>                var flag = true;<br>                $.each($.extendTab.default.execute, function (key, value) {<br>                    if (target.hasClass(key)) {<br>                        flag = value(target);<br>                        return false;<br>                    }<br>                });<br>                if (flag) {<br>                    tabList.eq(tabList.index(this) - 1).focus();<br>                    e.preventDefault();<br>                }<br>            }<br>        });<br>    };</p>\n<pre><code>$.extendTab.default = {\n    init       : {\n        &apos;combo-f&apos;: function (jq) {\n            jq.next().find(&apos;.combo-text&apos;).attr(&apos;data-tabindex&apos;, jq.attr(&apos;tabindex&apos;));\n        }\n    },\n    execute    : {\n        &apos;combo-text&apos;: function (jq) {\n            clearTimeout(jq.parent().prev().data(&apos;combo&apos;).timer);\n            return true;\n        }\n    },\n    forwardKey : [39, 13],\n    backwardKey: [37]\n}\n</code></pre><p>})(jQuery);<br>[/javascript]<br><a href=\"https://github.com/woodensail/extendTab\" target=\"_blank\" rel=\"external\">https://github.com/woodensail/extendTab</a></p>\n","excerpt":"","more":"<h5 id=\"初始化：\"><a href=\"#初始化：\" class=\"headerlink\" title=\"初始化：\"></a>初始化：</h5><p>首先遍历所有有tabindex的标签，普通标签直接将tabindex的值存入data-tabindex中。对于第三方库渲染的特殊控件，默认的tabindex是无效的，在default.init中可以配置针对的初始化方法，将tabindex值绑定到真正的标签的data-tabindex属性上。<br>预处理完毕后，选择所有含data-tabindex属性的标签并排序后放入tabList中。此后当事件被触发时，事件函数会利用闭包特性取得tabList。<br>最后完成事件绑定，绑定前先解绑一次，以防止重复绑定。<br>&nbsp;</p>\n<h5 id=\"事件响应：\"><a href=\"#事件响应：\" class=\"headerlink\" title=\"事件响应：\"></a>事件响应：</h5><p>触发事件后依次通过判断keyCode是否在forwardKey和backwardKey中来决定是否需要后移或前移。如果需要执行时对于普通标签执行默认的方法，对于包含defaulte.execute中的class的特殊标签则先执行标签中的处理函数，当处理函数返回true时会继续执行默认方法，否则阻止默认方法。</p>\n<h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><p>在html中设置tabindex或通过js动态设置tabindex后，执行$.extendTab()即可。<br>$.extendTab.default定义了特殊控件处理方式及需要响应的按键，可以通过$.extend修改<br>[javascript]<br>(function ($) {<br>    $.extendTab = function (i18nData) {<br>        $(‘[tabindex]’).each(function (i, v) {<br>            var _this = $(v);<br>            var flag = true;<br>            $.each($.extendTab.default.init, function (key, value) {<br>                if (_this.hasClass(key)) {<br>                    value(_this);<br>                    flag = false;<br>                    return false;<br>                }<br>            });<br>            if (flag) {<br>                _this.attr(‘data-tabindex’, _this.attr(‘tabindex’));<br>            }<br>        });<br>        var tabList = $(‘[data-tabindex]’).sort(function (a, b) {<br>            return $(a).data(‘tabindex’) &gt; $(b).data(‘tabindex’)<br>        });<br>        tabList.off(‘keydown.extendTab’);<br>        tabList.on(‘keydown.extendTab’, function (e) {<br>            var target = $(e.currentTarget);<br>            if ($.extendTab.default.forwardKey.contains(e.keyCode)) {<br>                var flag = true;<br>                $.each($.extendTab.default.execute, function (key, value) {<br>                    if (target.hasClass(key)) {<br>                        flag = value(target);<br>                        return false;<br>                    }<br>                });<br>                if (flag) {<br>                    var _idx = tabList.index(this) + 1;<br>                    tabList.eq(_idx &gt;= (tabList.length) ? 0 : _idx).focus();<br>                    e.preventDefault();<br>                }<br>            } else if ($.extendTab.default.backwardKey.contains(e.keyCode)) {<br>                var flag = true;<br>                $.each($.extendTab.default.execute, function (key, value) {<br>                    if (target.hasClass(key)) {<br>                        flag = value(target);<br>                        return false;<br>                    }<br>                });<br>                if (flag) {<br>                    tabList.eq(tabList.index(this) - 1).focus();<br>                    e.preventDefault();<br>                }<br>            }<br>        });<br>    };</p>\n<pre><code>$.extendTab.default = {\n    init       : {\n        &apos;combo-f&apos;: function (jq) {\n            jq.next().find(&apos;.combo-text&apos;).attr(&apos;data-tabindex&apos;, jq.attr(&apos;tabindex&apos;));\n        }\n    },\n    execute    : {\n        &apos;combo-text&apos;: function (jq) {\n            clearTimeout(jq.parent().prev().data(&apos;combo&apos;).timer);\n            return true;\n        }\n    },\n    forwardKey : [39, 13],\n    backwardKey: [37]\n}\n</code></pre><p>})(jQuery);<br>[/javascript]<br><a href=\"https://github.com/woodensail/extendTab\">https://github.com/woodensail/extendTab</a></p>\n"},{"title":"bootstrap-MagicSuggest插件修改，为自动完成功能增加多字段和回调支持","id":"111","date":"2015-04-08T08:15:04.000Z","_content":"\nMagicSuggest中的自动完成功能只支持单字段搜索，我增加了一个filter字段，并对_sortAndTrim方法进行修改，从而达成多字段以及通过回调实现自动完成功能。\n实现时使用了lodash库，如果filter为数组，根据filter数组中所指定的字段进行筛选。否则视为函数，将目前输入内容q和一条记录所对应的对象obj作为参数执行filter。返回true则判断符合，反之不符合。\n[javascript]\nif(cfg.filter!==null) {\n    if (_.isArray(cfg.filter)) {\n        if(cfg.strictSuggest) {\n            filtered = _.filter(data, function (obj) {\n                return _.any(_.pick(obj, cfg.filter), function (v) {\n                    return v.indexOf(q) === 0\n                });\n            });\n        }else {\n            filtered = _.filter(data, function (obj) {\n                return _.any(_.pick(obj, cfg.filter), function (v) {\n                    return v.indexOf(q) &gt; -1\n                });\n            });\n        }\n    } else {\n        $.each(data, function (index, obj) {\n            if (cfg.filter(q, obj)) {\n                filtered.push(obj);\n            }\n        });\n    }\n}else{\n    //原来的代码\n}\n[/javascript]","source":"_posts/bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e4-b8-ba-e8-87-aa-e5-8a-a8-e5-ae-8c-e6-88-90-e5-8a-9f-e8-83-bd-e5-a2-9e-e5-8a-a0-e5-a4-9a-e5-ad-97-e6-ae-b5-e5-92-8c-e5-9b-9e.md","raw":"---\ntitle: bootstrap-MagicSuggest插件修改，为自动完成功能增加多字段和回调支持\ntags:\n  - bootstrap\n  - javaScript\nid: 111\ncategories:\n  - JavaScript\ndate: 2015-04-08 16:15:04\n---\n\nMagicSuggest中的自动完成功能只支持单字段搜索，我增加了一个filter字段，并对_sortAndTrim方法进行修改，从而达成多字段以及通过回调实现自动完成功能。\n实现时使用了lodash库，如果filter为数组，根据filter数组中所指定的字段进行筛选。否则视为函数，将目前输入内容q和一条记录所对应的对象obj作为参数执行filter。返回true则判断符合，反之不符合。\n[javascript]\nif(cfg.filter!==null) {\n    if (_.isArray(cfg.filter)) {\n        if(cfg.strictSuggest) {\n            filtered = _.filter(data, function (obj) {\n                return _.any(_.pick(obj, cfg.filter), function (v) {\n                    return v.indexOf(q) === 0\n                });\n            });\n        }else {\n            filtered = _.filter(data, function (obj) {\n                return _.any(_.pick(obj, cfg.filter), function (v) {\n                    return v.indexOf(q) &gt; -1\n                });\n            });\n        }\n    } else {\n        $.each(data, function (index, obj) {\n            if (cfg.filter(q, obj)) {\n                filtered.push(obj);\n            }\n        });\n    }\n}else{\n    //原来的代码\n}\n[/javascript]","slug":"bootstrap-magicsuggest-e6-8f-92-e4-bb-b6-e4-bf-ae-e6-94-b9-ef-bc-8c-e4-b8-ba-e8-87-aa-e5-8a-a8-e5-ae-8c-e6-88-90-e5-8a-9f-e8-83-bd-e5-a2-9e-e5-8a-a0-e5-a4-9a-e5-ad-97-e6-ae-b5-e5-92-8c-e5-9b-9e","published":1,"updated":"2016-05-06T02:34:31.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1s0009d0ch0kqwv53g","content":"<p>MagicSuggest中的自动完成功能只支持单字段搜索，我增加了一个filter字段，并对<em>sortAndTrim方法进行修改，从而达成多字段以及通过回调实现自动完成功能。<br>实现时使用了lodash库，如果filter为数组，根据filter数组中所指定的字段进行筛选。否则视为函数，将目前输入内容q和一条记录所对应的对象obj作为参数执行filter。返回true则判断符合，反之不符合。<br>[javascript]<br>if(cfg.filter!==null) {<br>    if (</em>.isArray(cfg.filter)) {<br>        if(cfg.strictSuggest) {<br>            filtered = <em>.filter(data, function (obj) {<br>                return </em>.any(<em>.pick(obj, cfg.filter), function (v) {<br>                    return v.indexOf(q) === 0<br>                });<br>            });<br>        }else {<br>            filtered = </em>.filter(data, function (obj) {<br>                return <em>.any(</em>.pick(obj, cfg.filter), function (v) {<br>                    return v.indexOf(q) &gt; -1<br>                });<br>            });<br>        }<br>    } else {<br>        $.each(data, function (index, obj) {<br>            if (cfg.filter(q, obj)) {<br>                filtered.push(obj);<br>            }<br>        });<br>    }<br>}else{<br>    //原来的代码<br>}<br>[/javascript]</p>\n","excerpt":"","more":"<p>MagicSuggest中的自动完成功能只支持单字段搜索，我增加了一个filter字段，并对<em>sortAndTrim方法进行修改，从而达成多字段以及通过回调实现自动完成功能。<br>实现时使用了lodash库，如果filter为数组，根据filter数组中所指定的字段进行筛选。否则视为函数，将目前输入内容q和一条记录所对应的对象obj作为参数执行filter。返回true则判断符合，反之不符合。<br>[javascript]<br>if(cfg.filter!==null) {<br>    if (</em>.isArray(cfg.filter)) {<br>        if(cfg.strictSuggest) {<br>            filtered = <em>.filter(data, function (obj) {<br>                return </em>.any(<em>.pick(obj, cfg.filter), function (v) {<br>                    return v.indexOf(q) === 0<br>                });<br>            });<br>        }else {<br>            filtered = </em>.filter(data, function (obj) {<br>                return <em>.any(</em>.pick(obj, cfg.filter), function (v) {<br>                    return v.indexOf(q) &gt; -1<br>                });<br>            });<br>        }<br>    } else {<br>        $.each(data, function (index, obj) {<br>            if (cfg.filter(q, obj)) {<br>                filtered.push(obj);<br>            }<br>        });<br>    }<br>}else{<br>    //原来的代码<br>}<br>[/javascript]</p>\n"},{"title":"数据分析S101：从mht文件中提取qq用户发言","id":"90","date":"2015-03-20T02:23:41.000Z","_content":"\nqq的聊天记录可以导出为mht文件。这次的目标就是从mht文件中提取用户的聊天记录并存入数据库之中,同时要完成根据指定用户名查出其所有发言内容的功能。\n\n### 功能一：解析数据\n\n##### 获取记录：\n\n这里是用的是BeautifulSoup4来对文档进行处理，首先查找所有tr标签。\n\n[python]\nwith open(chatdata) as f:\n    soup = BeautifulSoup(f.read())\n    script = soup.find_all('tr')\n[/python]\n\n&nbsp;\n\n##### 分析记录：\n\n先清空原有表，然后将日期置为None，开始遍历script。先清空原有表，然后将日期置为None，开始遍历script。\ntr标签的内容可能有三种。1：一条发言记录，也就是我们要找的内容。2：一条日期，表明了直到下一个日期为止的内容的发言日期。3：无关内容，比如网页标题等。\n\n###### 获取日期：\n\n对于一条记录如果i.td.div不存在，即tr标签下有td标签，td标签下没有div标签时。认为这是一条日期记录，取td下的文本内容，忽略前四个字符即可得到'yyyy-MM-dd'格式的日期。此处为了符合数据库格式，将'-'替换为了'/'。\n\n###### 获取聊天信息：\n\n1.  如果i.td.div存在，则可能为发言记录或者无关内容。这里直接按照发言记录来处理，同时捕获异常，如果是无关内容则会报异常，直接进入下一条的处理流程。\n2.  对于发言记录，首先取得i.td.div.div.string即发言人的名字及账号。首先判断最后一位是否为右括号，如果是则为数字型账号，否则则为邮箱型账号。通过两个正则可分别取得两种情况下的用户名和用户账户。然后通过i.td.div.contents[1]取得用户发言的时间。此时加上之前缓存的date，已经有了用户名，账号，日期，时间，只缺内容了。\n3.  通过i.td.contents[1].strings可以取得用户发言的全部文字内容。然后join合并为字符串即可。这样做可以快捷的取得所有文字内容，包括超链接等，不会有所遗漏，缺点是忽略了图片表情以及换行符。\n\n[python]\nconn.execute('DELETE FROM chatdb')\ndate = None\nfor i in script:\n    try:\n        if not i.td.div:\n            date = i.td.string[4:].replace('-', r'/')\n        else:\n            speaker = i.td.div.div.string\n            if ')' == speaker[-1]:\n                speaker = re.findall(r'(.*?)\\((\\d+)\\)', speaker)\n            else:\n                speaker = re.findall(r'(.*?)&lt;(.*?)&amp;get;', speaker)\n            s_name = speaker[0][0]\n            s_id = speaker[0][1]\n            time = i.td.div.contents[1]\n\n            content = ''.join([ttt for ttt in i.td.contents[1].strings])\n            conn.execute('INSERT INTO chatdb (name,usrid,date, time, contents) VALUES(?,?,?,?,?)',\n                         (s_name, s_id, date, time, content))\n    except Exception as e:\n        pass\n[/python]\n\n&nbsp;\n\n### 功能二：查询发言内容\n\n首先查出该用户名最晚的一条发言记录的id，然后根据id查询出所有发言记录。最后组装成数组返回。\n[python]\ndef someonechat(name):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT usrid FROM chatdb ORDER BY date DESC,time DESC LIMIT 1 ')\n    usrid = result.fetchone()[0]\n    result = conn.execute('SELECT id,name,date,time,contents FROM chatdb WHERE usrid=?', (usrid,))\n    chatlist = [{'id': i[2], 'name': i[1], 'usrid': usrid, 'date': i[2], 'time': i[3], 'contents': i[4]} for i in\n                result.fetchall()]\n    return chatlist\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s01-ef-bc-9a-e4-bb-8emht-e6-96-87-e4-bb-b6-e4-b8-ad-e6-8f-90-e5-8f-96qq-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80.md","raw":"---\ntitle: 数据分析S101：从mht文件中提取qq用户发言\nid: 90\ncategories:\n  - 未分类\ndate: 2015-03-20 10:23:41\ntags:\n---\n\nqq的聊天记录可以导出为mht文件。这次的目标就是从mht文件中提取用户的聊天记录并存入数据库之中,同时要完成根据指定用户名查出其所有发言内容的功能。\n\n### 功能一：解析数据\n\n##### 获取记录：\n\n这里是用的是BeautifulSoup4来对文档进行处理，首先查找所有tr标签。\n\n[python]\nwith open(chatdata) as f:\n    soup = BeautifulSoup(f.read())\n    script = soup.find_all('tr')\n[/python]\n\n&nbsp;\n\n##### 分析记录：\n\n先清空原有表，然后将日期置为None，开始遍历script。先清空原有表，然后将日期置为None，开始遍历script。\ntr标签的内容可能有三种。1：一条发言记录，也就是我们要找的内容。2：一条日期，表明了直到下一个日期为止的内容的发言日期。3：无关内容，比如网页标题等。\n\n###### 获取日期：\n\n对于一条记录如果i.td.div不存在，即tr标签下有td标签，td标签下没有div标签时。认为这是一条日期记录，取td下的文本内容，忽略前四个字符即可得到'yyyy-MM-dd'格式的日期。此处为了符合数据库格式，将'-'替换为了'/'。\n\n###### 获取聊天信息：\n\n1.  如果i.td.div存在，则可能为发言记录或者无关内容。这里直接按照发言记录来处理，同时捕获异常，如果是无关内容则会报异常，直接进入下一条的处理流程。\n2.  对于发言记录，首先取得i.td.div.div.string即发言人的名字及账号。首先判断最后一位是否为右括号，如果是则为数字型账号，否则则为邮箱型账号。通过两个正则可分别取得两种情况下的用户名和用户账户。然后通过i.td.div.contents[1]取得用户发言的时间。此时加上之前缓存的date，已经有了用户名，账号，日期，时间，只缺内容了。\n3.  通过i.td.contents[1].strings可以取得用户发言的全部文字内容。然后join合并为字符串即可。这样做可以快捷的取得所有文字内容，包括超链接等，不会有所遗漏，缺点是忽略了图片表情以及换行符。\n\n[python]\nconn.execute('DELETE FROM chatdb')\ndate = None\nfor i in script:\n    try:\n        if not i.td.div:\n            date = i.td.string[4:].replace('-', r'/')\n        else:\n            speaker = i.td.div.div.string\n            if ')' == speaker[-1]:\n                speaker = re.findall(r'(.*?)\\((\\d+)\\)', speaker)\n            else:\n                speaker = re.findall(r'(.*?)&lt;(.*?)&amp;get;', speaker)\n            s_name = speaker[0][0]\n            s_id = speaker[0][1]\n            time = i.td.div.contents[1]\n\n            content = ''.join([ttt for ttt in i.td.contents[1].strings])\n            conn.execute('INSERT INTO chatdb (name,usrid,date, time, contents) VALUES(?,?,?,?,?)',\n                         (s_name, s_id, date, time, content))\n    except Exception as e:\n        pass\n[/python]\n\n&nbsp;\n\n### 功能二：查询发言内容\n\n首先查出该用户名最晚的一条发言记录的id，然后根据id查询出所有发言记录。最后组装成数组返回。\n[python]\ndef someonechat(name):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT usrid FROM chatdb ORDER BY date DESC,time DESC LIMIT 1 ')\n    usrid = result.fetchone()[0]\n    result = conn.execute('SELECT id,name,date,time,contents FROM chatdb WHERE usrid=?', (usrid,))\n    chatlist = [{'id': i[2], 'name': i[1], 'usrid': usrid, 'date': i[2], 'time': i[3], 'contents': i[4]} for i in\n                result.fetchall()]\n    return chatlist\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s01-ef-bc-9a-e4-bb-8emht-e6-96-87-e4-bb-b6-e4-b8-ad-e6-8f-90-e5-8f-96qq-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80","published":1,"updated":"2016-05-06T02:34:31.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z1u000bd0chtm271z73","content":"<p>qq的聊天记录可以导出为mht文件。这次的目标就是从mht文件中提取用户的聊天记录并存入数据库之中,同时要完成根据指定用户名查出其所有发言内容的功能。</p>\n<h3 id=\"功能一：解析数据\"><a href=\"#功能一：解析数据\" class=\"headerlink\" title=\"功能一：解析数据\"></a>功能一：解析数据</h3><h5 id=\"获取记录：\"><a href=\"#获取记录：\" class=\"headerlink\" title=\"获取记录：\"></a>获取记录：</h5><p>这里是用的是BeautifulSoup4来对文档进行处理，首先查找所有tr标签。</p>\n<p>[python]<br>with open(chatdata) as f:<br>    soup = BeautifulSoup(f.read())<br>    script = soup.find_all(‘tr’)<br>[/python]</p>\n<p>&nbsp;</p>\n<h5 id=\"分析记录：\"><a href=\"#分析记录：\" class=\"headerlink\" title=\"分析记录：\"></a>分析记录：</h5><p>先清空原有表，然后将日期置为None，开始遍历script。先清空原有表，然后将日期置为None，开始遍历script。<br>tr标签的内容可能有三种。1：一条发言记录，也就是我们要找的内容。2：一条日期，表明了直到下一个日期为止的内容的发言日期。3：无关内容，比如网页标题等。</p>\n<h6 id=\"获取日期：\"><a href=\"#获取日期：\" class=\"headerlink\" title=\"获取日期：\"></a>获取日期：</h6><p>对于一条记录如果i.td.div不存在，即tr标签下有td标签，td标签下没有div标签时。认为这是一条日期记录，取td下的文本内容，忽略前四个字符即可得到’yyyy-MM-dd’格式的日期。此处为了符合数据库格式，将’-‘替换为了’/‘。</p>\n<h6 id=\"获取聊天信息：\"><a href=\"#获取聊天信息：\" class=\"headerlink\" title=\"获取聊天信息：\"></a>获取聊天信息：</h6><ol>\n<li>如果i.td.div存在，则可能为发言记录或者无关内容。这里直接按照发言记录来处理，同时捕获异常，如果是无关内容则会报异常，直接进入下一条的处理流程。</li>\n<li>对于发言记录，首先取得i.td.div.div.string即发言人的名字及账号。首先判断最后一位是否为右括号，如果是则为数字型账号，否则则为邮箱型账号。通过两个正则可分别取得两种情况下的用户名和用户账户。然后通过i.td.div.contents[1]取得用户发言的时间。此时加上之前缓存的date，已经有了用户名，账号，日期，时间，只缺内容了。</li>\n<li>通过i.td.contents[1].strings可以取得用户发言的全部文字内容。然后join合并为字符串即可。这样做可以快捷的取得所有文字内容，包括超链接等，不会有所遗漏，缺点是忽略了图片表情以及换行符。</li>\n</ol>\n<p>[python]<br>conn.execute(‘DELETE FROM chatdb’)<br>date = None<br>for i in script:<br>    try:<br>        if not i.td.div:<br>            date = i.td.string[4:].replace(‘-‘, r’/‘)<br>        else:<br>            speaker = i.td.div.div.string<br>            if ‘)’ == speaker[-1]:<br>                speaker = re.findall(r’(.<em>?)((\\d+))‘, speaker)<br>            else:<br>                speaker = re.findall(r’(.</em>?)&lt;(.*?)&amp;get;’, speaker)<br>            s_name = speaker[0][0]<br>            s_id = speaker[0][1]<br>            time = i.td.div.contents[1]</p>\n<pre><code>        content = &apos;&apos;.join([ttt for ttt in i.td.contents[1].strings])\n        conn.execute(&apos;INSERT INTO chatdb (name,usrid,date, time, contents) VALUES(?,?,?,?,?)&apos;,\n                     (s_name, s_id, date, time, content))\nexcept Exception as e:\n    pass\n</code></pre><p>[/python]</p>\n<p>&nbsp;</p>\n<h3 id=\"功能二：查询发言内容\"><a href=\"#功能二：查询发言内容\" class=\"headerlink\" title=\"功能二：查询发言内容\"></a>功能二：查询发言内容</h3><p>首先查出该用户名最晚的一条发言记录的id，然后根据id查询出所有发言记录。最后组装成数组返回。<br>[python]<br>def someonechat(name):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT usrid FROM chatdb ORDER BY date DESC,time DESC LIMIT 1 ‘)<br>    usrid = result.fetchone()[0]<br>    result = conn.execute(‘SELECT id,name,date,time,contents FROM chatdb WHERE usrid=?’, (usrid,))<br>    chatlist = [{‘id’: i[2], ‘name’: i[1], ‘usrid’: usrid, ‘date’: i[2], ‘time’: i[3], ‘contents’: i[4]} for i in<br>                result.fetchall()]<br>    return chatlist<br>[/python]</p>\n","excerpt":"","more":"<p>qq的聊天记录可以导出为mht文件。这次的目标就是从mht文件中提取用户的聊天记录并存入数据库之中,同时要完成根据指定用户名查出其所有发言内容的功能。</p>\n<h3 id=\"功能一：解析数据\"><a href=\"#功能一：解析数据\" class=\"headerlink\" title=\"功能一：解析数据\"></a>功能一：解析数据</h3><h5 id=\"获取记录：\"><a href=\"#获取记录：\" class=\"headerlink\" title=\"获取记录：\"></a>获取记录：</h5><p>这里是用的是BeautifulSoup4来对文档进行处理，首先查找所有tr标签。</p>\n<p>[python]<br>with open(chatdata) as f:<br>    soup = BeautifulSoup(f.read())<br>    script = soup.find_all(‘tr’)<br>[/python]</p>\n<p>&nbsp;</p>\n<h5 id=\"分析记录：\"><a href=\"#分析记录：\" class=\"headerlink\" title=\"分析记录：\"></a>分析记录：</h5><p>先清空原有表，然后将日期置为None，开始遍历script。先清空原有表，然后将日期置为None，开始遍历script。<br>tr标签的内容可能有三种。1：一条发言记录，也就是我们要找的内容。2：一条日期，表明了直到下一个日期为止的内容的发言日期。3：无关内容，比如网页标题等。</p>\n<h6 id=\"获取日期：\"><a href=\"#获取日期：\" class=\"headerlink\" title=\"获取日期：\"></a>获取日期：</h6><p>对于一条记录如果i.td.div不存在，即tr标签下有td标签，td标签下没有div标签时。认为这是一条日期记录，取td下的文本内容，忽略前四个字符即可得到’yyyy-MM-dd’格式的日期。此处为了符合数据库格式，将’-‘替换为了’/‘。</p>\n<h6 id=\"获取聊天信息：\"><a href=\"#获取聊天信息：\" class=\"headerlink\" title=\"获取聊天信息：\"></a>获取聊天信息：</h6><ol>\n<li>如果i.td.div存在，则可能为发言记录或者无关内容。这里直接按照发言记录来处理，同时捕获异常，如果是无关内容则会报异常，直接进入下一条的处理流程。</li>\n<li>对于发言记录，首先取得i.td.div.div.string即发言人的名字及账号。首先判断最后一位是否为右括号，如果是则为数字型账号，否则则为邮箱型账号。通过两个正则可分别取得两种情况下的用户名和用户账户。然后通过i.td.div.contents[1]取得用户发言的时间。此时加上之前缓存的date，已经有了用户名，账号，日期，时间，只缺内容了。</li>\n<li>通过i.td.contents[1].strings可以取得用户发言的全部文字内容。然后join合并为字符串即可。这样做可以快捷的取得所有文字内容，包括超链接等，不会有所遗漏，缺点是忽略了图片表情以及换行符。</li>\n</ol>\n<p>[python]<br>conn.execute(‘DELETE FROM chatdb’)<br>date = None<br>for i in script:<br>    try:<br>        if not i.td.div:<br>            date = i.td.string[4:].replace(‘-‘, r’/‘)<br>        else:<br>            speaker = i.td.div.div.string<br>            if ‘)’ == speaker[-1]:<br>                speaker = re.findall(r’(.<em>?)((\\d+))‘, speaker)<br>            else:<br>                speaker = re.findall(r’(.</em>?)&lt;(.*?)&amp;get;’, speaker)<br>            s_name = speaker[0][0]<br>            s_id = speaker[0][1]<br>            time = i.td.div.contents[1]</p>\n<pre><code>        content = &apos;&apos;.join([ttt for ttt in i.td.contents[1].strings])\n        conn.execute(&apos;INSERT INTO chatdb (name,usrid,date, time, contents) VALUES(?,?,?,?,?)&apos;,\n                     (s_name, s_id, date, time, content))\nexcept Exception as e:\n    pass\n</code></pre><p>[/python]</p>\n<p>&nbsp;</p>\n<h3 id=\"功能二：查询发言内容\"><a href=\"#功能二：查询发言内容\" class=\"headerlink\" title=\"功能二：查询发言内容\"></a>功能二：查询发言内容</h3><p>首先查出该用户名最晚的一条发言记录的id，然后根据id查询出所有发言记录。最后组装成数组返回。<br>[python]<br>def someonechat(name):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT usrid FROM chatdb ORDER BY date DESC,time DESC LIMIT 1 ‘)<br>    usrid = result.fetchone()[0]<br>    result = conn.execute(‘SELECT id,name,date,time,contents FROM chatdb WHERE usrid=?’, (usrid,))<br>    chatlist = [{‘id’: i[2], ‘name’: i[1], ‘usrid’: usrid, ‘date’: i[2], ‘time’: i[3], ‘contents’: i[4]} for i in<br>                result.fetchall()]<br>    return chatlist<br>[/python]</p>\n"},{"title":"提取并修改class文件中的字符串常量","id":"80","date":"2015-02-07T07:37:51.000Z","_content":"\n这两天在网上看到某个汉化组在汉化jar包过程中遇到开发者加扰，将部分class采取超长命名以及相同名称不同大小写的方式，导致windows下无法解压缩且专用汉化工具无法支持的情况。\n\n所以我就做了脚本，用于将指定jar包或zip文件里所有class文件中的字符串常量提取出来，以JSON格式存入txt文件中。修改该文件中字符串的值，然后在利用该脚本重新导入，即可完成对jar包中class文件字符串常量的修改。\n\n&nbsp;\n\n脚本通过zipfile库遍历jar包读取所有class文件并解析，class文件解析的原理在我之前转载的「Class文件内容及常量池」中。之后通过json库保存信息。\n\n汉化完成后再将汉化信息以json格式读入，并根据文件名已经常量编号对原字符串常量进行替换。\n\n&nbsp;\n\n项目地址：[https://github.com/woodensail/ExtractString](https://github.com/woodensail/ExtractString)","source":"_posts/e6-8f-90-e5-8f-96-e5-b9-b6-e4-bf-ae-e6-94-b9class-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-b8-b8-e9-87-8f.md","raw":"---\ntitle: 提取并修改class文件中的字符串常量\nid: 80\ncategories:\n  - 未分类\ndate: 2015-02-07 15:37:51\ntags:\n---\n\n这两天在网上看到某个汉化组在汉化jar包过程中遇到开发者加扰，将部分class采取超长命名以及相同名称不同大小写的方式，导致windows下无法解压缩且专用汉化工具无法支持的情况。\n\n所以我就做了脚本，用于将指定jar包或zip文件里所有class文件中的字符串常量提取出来，以JSON格式存入txt文件中。修改该文件中字符串的值，然后在利用该脚本重新导入，即可完成对jar包中class文件字符串常量的修改。\n\n&nbsp;\n\n脚本通过zipfile库遍历jar包读取所有class文件并解析，class文件解析的原理在我之前转载的「Class文件内容及常量池」中。之后通过json库保存信息。\n\n汉化完成后再将汉化信息以json格式读入，并根据文件名已经常量编号对原字符串常量进行替换。\n\n&nbsp;\n\n项目地址：[https://github.com/woodensail/ExtractString](https://github.com/woodensail/ExtractString)","slug":"e6-8f-90-e5-8f-96-e5-b9-b6-e4-bf-ae-e6-94-b9class-e6-96-87-e4-bb-b6-e4-b8-ad-e7-9a-84-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-b8-b8-e9-87-8f","published":1,"updated":"2016-05-06T02:34:31.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z23000fd0chewtl9kpz","content":"<p>这两天在网上看到某个汉化组在汉化jar包过程中遇到开发者加扰，将部分class采取超长命名以及相同名称不同大小写的方式，导致windows下无法解压缩且专用汉化工具无法支持的情况。</p>\n<p>所以我就做了脚本，用于将指定jar包或zip文件里所有class文件中的字符串常量提取出来，以JSON格式存入txt文件中。修改该文件中字符串的值，然后在利用该脚本重新导入，即可完成对jar包中class文件字符串常量的修改。</p>\n<p>&nbsp;</p>\n<p>脚本通过zipfile库遍历jar包读取所有class文件并解析，class文件解析的原理在我之前转载的「Class文件内容及常量池」中。之后通过json库保存信息。</p>\n<p>汉化完成后再将汉化信息以json格式读入，并根据文件名已经常量编号对原字符串常量进行替换。</p>\n<p>&nbsp;</p>\n<p>项目地址：<a href=\"https://github.com/woodensail/ExtractString\" target=\"_blank\" rel=\"external\">https://github.com/woodensail/ExtractString</a></p>\n","excerpt":"","more":"<p>这两天在网上看到某个汉化组在汉化jar包过程中遇到开发者加扰，将部分class采取超长命名以及相同名称不同大小写的方式，导致windows下无法解压缩且专用汉化工具无法支持的情况。</p>\n<p>所以我就做了脚本，用于将指定jar包或zip文件里所有class文件中的字符串常量提取出来，以JSON格式存入txt文件中。修改该文件中字符串的值，然后在利用该脚本重新导入，即可完成对jar包中class文件字符串常量的修改。</p>\n<p>&nbsp;</p>\n<p>脚本通过zipfile库遍历jar包读取所有class文件并解析，class文件解析的原理在我之前转载的「Class文件内容及常量池」中。之后通过json库保存信息。</p>\n<p>汉化完成后再将汉化信息以json格式读入，并根据文件名已经常量编号对原字符串常量进行替换。</p>\n<p>&nbsp;</p>\n<p>项目地址：<a href=\"https://github.com/woodensail/ExtractString\">https://github.com/woodensail/ExtractString</a></p>\n"},{"title":"数据分析S104：分析用户发言在每小时每天等粒度上的分布","id":"105","date":"2015-04-07T02:18:59.000Z","_content":"\n[python]\ndef s104(usrid=None, name=None):\n    if not usrid:\n        usrid=common.get_id(name)\n    conn = sqlite3.connect(r'resource/chat.db')\n    df =pd.read_sql('SELECT * FROM chatdb WHERE usrid =?',conn,params=(usrid,),parse_dates=['date'],index_col=['date'])\n    # print(df[['usrid','name'],['name']].groupby(df.usrid).count().head(5))\n    df.insert(0,'count',df['id'])\n    df.groupby(lambda x:x.dayofweek).count()[['count']].plot(kind='bar')\n    df[['count']].resample(&quot;M&quot;, how=&quot;count&quot;).plot();\n    df2 =pd.read_sql('SELECT * FROM chatdb WHERE usrid =?',conn,params=(usrid,),parse_dates=['time'],index_col=['time'])\n    print(df2)\n    df2.insert(0,'count',df2['id'])\n    df2.groupby(lambda x:x.hour).count()[['count']].plot(kind='bar')\n    # df['count'].resample(&quot;M&quot;, how=&quot;count&quot;).plot(lw=2);\n    # df[['count']].groupby(df.date).count().plot(kind='bar')\n    plt.show()\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s104-ef-bc-9a-e5-88-86-e6-9e-90-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80-e5-9c-a8-e6-af-8f-e5-b0-8f-e6-97-b6-e6-af-8f-e5-a4-a9-e7-ad-89-e7-b2-92-e5-ba-a6-e4-b8-8a.md","raw":"---\ntitle: 数据分析S104：分析用户发言在每小时每天等粒度上的分布\ntags:\n  - python\n  - 数据分析\nid: 105\ncategories:\n  - python\ndate: 2015-04-07 10:18:59\n---\n\n[python]\ndef s104(usrid=None, name=None):\n    if not usrid:\n        usrid=common.get_id(name)\n    conn = sqlite3.connect(r'resource/chat.db')\n    df =pd.read_sql('SELECT * FROM chatdb WHERE usrid =?',conn,params=(usrid,),parse_dates=['date'],index_col=['date'])\n    # print(df[['usrid','name'],['name']].groupby(df.usrid).count().head(5))\n    df.insert(0,'count',df['id'])\n    df.groupby(lambda x:x.dayofweek).count()[['count']].plot(kind='bar')\n    df[['count']].resample(&quot;M&quot;, how=&quot;count&quot;).plot();\n    df2 =pd.read_sql('SELECT * FROM chatdb WHERE usrid =?',conn,params=(usrid,),parse_dates=['time'],index_col=['time'])\n    print(df2)\n    df2.insert(0,'count',df2['id'])\n    df2.groupby(lambda x:x.hour).count()[['count']].plot(kind='bar')\n    # df['count'].resample(&quot;M&quot;, how=&quot;count&quot;).plot(lw=2);\n    # df[['count']].groupby(df.date).count().plot(kind='bar')\n    plt.show()\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s104-ef-bc-9a-e5-88-86-e6-9e-90-e7-94-a8-e6-88-b7-e5-8f-91-e8-a8-80-e5-9c-a8-e6-af-8f-e5-b0-8f-e6-97-b6-e6-af-8f-e5-a4-a9-e7-ad-89-e7-b2-92-e5-ba-a6-e4-b8-8a","published":1,"updated":"2016-05-06T02:34:31.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z29000hd0ch0xbbfzxt","content":"<p>[python]<br>def s104(usrid=None, name=None):<br>    if not usrid:<br>        usrid=common.get_id(name)<br>    conn = sqlite3.connect(r’resource/chat.db’)<br>    df =pd.read_sql(‘SELECT * FROM chatdb WHERE usrid =?’,conn,params=(usrid,),parse_dates=[‘date’],index_col=[‘date’])</p>\n<pre><code># print(df[[&apos;usrid&apos;,&apos;name&apos;],[&apos;name&apos;]].groupby(df.usrid).count().head(5))\ndf.insert(0,&apos;count&apos;,df[&apos;id&apos;])\ndf.groupby(lambda x:x.dayofweek).count()[[&apos;count&apos;]].plot(kind=&apos;bar&apos;)\ndf[[&apos;count&apos;]].resample(&amp;quot;M&amp;quot;, how=&amp;quot;count&amp;quot;).plot();\ndf2 =pd.read_sql(&apos;SELECT * FROM chatdb WHERE usrid =?&apos;,conn,params=(usrid,),parse_dates=[&apos;time&apos;],index_col=[&apos;time&apos;])\nprint(df2)\ndf2.insert(0,&apos;count&apos;,df2[&apos;id&apos;])\ndf2.groupby(lambda x:x.hour).count()[[&apos;count&apos;]].plot(kind=&apos;bar&apos;)\n# df[&apos;count&apos;].resample(&amp;quot;M&amp;quot;, how=&amp;quot;count&amp;quot;).plot(lw=2);\n# df[[&apos;count&apos;]].groupby(df.date).count().plot(kind=&apos;bar&apos;)\nplt.show()\n</code></pre><p>[/python]</p>\n","excerpt":"","more":"<p>[python]<br>def s104(usrid=None, name=None):<br>    if not usrid:<br>        usrid=common.get_id(name)<br>    conn = sqlite3.connect(r’resource/chat.db’)<br>    df =pd.read_sql(‘SELECT * FROM chatdb WHERE usrid =?’,conn,params=(usrid,),parse_dates=[‘date’],index_col=[‘date’])</p>\n<pre><code># print(df[[&apos;usrid&apos;,&apos;name&apos;],[&apos;name&apos;]].groupby(df.usrid).count().head(5))\ndf.insert(0,&apos;count&apos;,df[&apos;id&apos;])\ndf.groupby(lambda x:x.dayofweek).count()[[&apos;count&apos;]].plot(kind=&apos;bar&apos;)\ndf[[&apos;count&apos;]].resample(&amp;quot;M&amp;quot;, how=&amp;quot;count&amp;quot;).plot();\ndf2 =pd.read_sql(&apos;SELECT * FROM chatdb WHERE usrid =?&apos;,conn,params=(usrid,),parse_dates=[&apos;time&apos;],index_col=[&apos;time&apos;])\nprint(df2)\ndf2.insert(0,&apos;count&apos;,df2[&apos;id&apos;])\ndf2.groupby(lambda x:x.hour).count()[[&apos;count&apos;]].plot(kind=&apos;bar&apos;)\n# df[&apos;count&apos;].resample(&amp;quot;M&amp;quot;, how=&amp;quot;count&amp;quot;).plot(lw=2);\n# df[[&apos;count&apos;]].groupby(df.date).count().plot(kind=&apos;bar&apos;)\nplt.show()\n</code></pre><p>[/python]</p>\n"},{"title":"数据分析S106：微信营运数据分析","id":"109","date":"2015-04-07T02:23:11.000Z","_content":"\n主要任务提取出每篇文章所造成的影响，并且合并同类文章后，显示每类文章造成的影响。\n[python]\ndf = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)\nprev = []\narticles={}\ntitles=[]\nfor i in df.as_matrix():\n    prev = [i[j]+prev[j-1] for j in range(1,5)] if prev else [i[j] for j in range(1,5)]\n    prev.append(i[6])\n    if not isinstance(i[6],float):\n        title=i[6][:2]\n        if title not in titles:\n            titles.append(title)\n            articles[title]=prev\n            prev=None\n        else:\n            for i in range(4):\n                articles[title][i]+=prev[i]\n            for i in range(len(articles[title][4])):\n                if articles[title][4][i]!=prev[4][i]:\n                    break\n            else:\n                i+=1\n            articles[title][4]=prev[4][:i]\n            prev=None\narticles={i[4]:[i[0],i[1],i[2],i[3]] for i in articles.values()}\ndf2=pd.DataFrame(articles).rename({0:'总阅读',1:'初次打开阅读',2:'分享次数',3:'增粉数'})\ndf2.plot(kind='bar')\ndf2.T.plot(kind='barh')\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['SimHei'] # 指定默认字体\nmpl.rcParams['axes.unicode_minus'] = False # 解决保存图像是负号'-'显示为方块的问题\nplt.show()\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s106-ef-bc-9a-e5-be-ae-e4-bf-a1-e8-90-a5-e8-bf-90-e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90.md","raw":"---\ntitle: 数据分析S106：微信营运数据分析\ntags:\n  - python\n  - 数据分析\nid: 109\ncategories:\n  - python\ndate: 2015-04-07 10:23:11\n---\n\n主要任务提取出每篇文章所造成的影响，并且合并同类文章后，显示每类文章造成的影响。\n[python]\ndf = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)\nprev = []\narticles={}\ntitles=[]\nfor i in df.as_matrix():\n    prev = [i[j]+prev[j-1] for j in range(1,5)] if prev else [i[j] for j in range(1,5)]\n    prev.append(i[6])\n    if not isinstance(i[6],float):\n        title=i[6][:2]\n        if title not in titles:\n            titles.append(title)\n            articles[title]=prev\n            prev=None\n        else:\n            for i in range(4):\n                articles[title][i]+=prev[i]\n            for i in range(len(articles[title][4])):\n                if articles[title][4][i]!=prev[4][i]:\n                    break\n            else:\n                i+=1\n            articles[title][4]=prev[4][:i]\n            prev=None\narticles={i[4]:[i[0],i[1],i[2],i[3]] for i in articles.values()}\ndf2=pd.DataFrame(articles).rename({0:'总阅读',1:'初次打开阅读',2:'分享次数',3:'增粉数'})\ndf2.plot(kind='bar')\ndf2.T.plot(kind='barh')\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['SimHei'] # 指定默认字体\nmpl.rcParams['axes.unicode_minus'] = False # 解决保存图像是负号'-'显示为方块的问题\nplt.show()\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s106-ef-bc-9a-e5-be-ae-e4-bf-a1-e8-90-a5-e8-bf-90-e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90","published":1,"updated":"2016-05-06T02:34:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2d000ld0ch7iizc6cs","content":"<p>主要任务提取出每篇文章所造成的影响，并且合并同类文章后，显示每类文章造成的影响。<br>[python]<br>df = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)<br>prev = []<br>articles={}<br>titles=[]<br>for i in df.as_matrix():<br>    prev = [i[j]+prev[j-1] for j in range(1,5)] if prev else [i[j] for j in range(1,5)]<br>    prev.append(i[6])<br>    if not isinstance(i[6],float):<br>        title=i[6][:2]<br>        if title not in titles:<br>            titles.append(title)<br>            articles[title]=prev<br>            prev=None<br>        else:<br>            for i in range(4):<br>                articles[title][i]+=prev[i]<br>            for i in range(len(articles[title][4])):<br>                if articles[title][4][i]!=prev[4][i]:<br>                    break<br>            else:<br>                i+=1<br>            articles[title][4]=prev[4][:i]<br>            prev=None<br>articles={i[4]:[i[0],i[1],i[2],i[3]] for i in articles.values()}<br>df2=pd.DataFrame(articles).rename({0:’总阅读’,1:’初次打开阅读’,2:’分享次数’,3:’增粉数’})<br>df2.plot(kind=’bar’)<br>df2.T.plot(kind=’barh’)<br>from pylab import mpl<br>mpl.rcParams[‘font.sans-serif’] = [‘SimHei’] # 指定默认字体<br>mpl.rcParams[‘axes.unicode_minus’] = False # 解决保存图像是负号’-‘显示为方块的问题<br>plt.show()<br>[/python]</p>\n","excerpt":"","more":"<p>主要任务提取出每篇文章所造成的影响，并且合并同类文章后，显示每类文章造成的影响。<br>[python]<br>df = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)<br>prev = []<br>articles={}<br>titles=[]<br>for i in df.as_matrix():<br>    prev = [i[j]+prev[j-1] for j in range(1,5)] if prev else [i[j] for j in range(1,5)]<br>    prev.append(i[6])<br>    if not isinstance(i[6],float):<br>        title=i[6][:2]<br>        if title not in titles:<br>            titles.append(title)<br>            articles[title]=prev<br>            prev=None<br>        else:<br>            for i in range(4):<br>                articles[title][i]+=prev[i]<br>            for i in range(len(articles[title][4])):<br>                if articles[title][4][i]!=prev[4][i]:<br>                    break<br>            else:<br>                i+=1<br>            articles[title][4]=prev[4][:i]<br>            prev=None<br>articles={i[4]:[i[0],i[1],i[2],i[3]] for i in articles.values()}<br>df2=pd.DataFrame(articles).rename({0:’总阅读’,1:’初次打开阅读’,2:’分享次数’,3:’增粉数’})<br>df2.plot(kind=’bar’)<br>df2.T.plot(kind=’barh’)<br>from pylab import mpl<br>mpl.rcParams[‘font.sans-serif’] = [‘SimHei’] # 指定默认字体<br>mpl.rcParams[‘axes.unicode_minus’] = False # 解决保存图像是负号’-‘显示为方块的问题<br>plt.show()<br>[/python]</p>\n"},{"title":"数据分析S107：完成微信运营评估模型","id":"120","date":"2015-04-12T08:15:55.000Z","_content":"\n[python]\n__author__ = 'sail'\nimport pandas as pd\nfrom functools import reduce\nimport matplotlib.pyplot as plt\n\ndef analyse():\n    # 该函数用于将一个dataFrame合并为一条记录\n    # 入参x为一个dataFrame，调用tt对每个Series分别进行合并\n    def t(x):\n        return x.apply(tt)\n\n    # 该函数用于对一个Series进行合并,入参x为一个Series\n    def tt(x):\n        # 当x为标题时用reduce调用lcs函数求从字符串头开始的最长公共子串\n        if x.name == '标题':\n            return reduce(lcs, x)\n        # 当x为下列内容是取最后一项\n        elif x.name in {'日期', '粉丝数'}:\n            return x[-1]\n        # 其他情况时对将x中所有数据合并为一组求和，并返回该组求和结果\n        else:\n            return x.groupby(lambda x: 1).sum().values[0]\n\n    def lcs(x, y):\n        for i in range(min(len(y), len(x))):\n            if x[i] != y[i]:\n                break\n        else:\n            i += 1\n        return x[:i]\n\n    df = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)\n    df.insert(0, '标题', df['文章标题'])\n    df = df.fillna(method=&quot;pad&quot;).dropna().set_index(['文章标题']).groupby(lambda x: x[:2]).apply(lambda x: x.apply(\n        lambda y: {1: lambda z: reduce(lcs, z), 2: lambda z: z[-1], None: lambda z: z.groupby(type).sum().values[0]}\n        [{'标题': 1, '日期': 2, '粉丝数': 2}.get(y.name)](y))).set_index(['标题'])\n    # 下面为上句的另一种表达方式\n    # 用fillna填充nan\n    # df=df.fillna(method=&quot;pad&quot;)\n    # 将开头未能被pad填充的nan去除\n    # df=df.dropna()\n    # 将标题设为index以方便分组\n    # df=df.set_index(['文章标题'])\n    # 以标题的前两个字为基准分组\n    # df=df.groupby(lambda x: x[:2])\n    # 利用函数t对每个groupBy进行合并\n    # df=df.apply(t)\n    # 将各系列内文章标题的相同部分作为系列名称\n    # df=df.set_index(['标题'])\n\n    # 从dataframe中取得之后计算需要的Series\n    fields = [df.xs('总阅读人数', axis=1), df.xs('初次打开阅读人数', axis=1), df.xs('分享次数', axis=1), df.xs('每日增粉人数', axis=1),\n              df.xs('粉丝数', axis=1)]\n    to_percent = lambda x: (x * 100).round(1)\n    # 各字段计算公式\n    expressions = [('初次打开率', lambda f: f[1] / f[4]), ('分享率', lambda f: f[2] / f[0]), ('分享拉粉率', lambda f: f[3] / f[2]),\n                   ('增粉速率', lambda f: f[3] / f[4]), ( '阅读涨粉率', lambda f: f[3] / f[0]),\n                   ('传播涨粉率', lambda f: f[3] / (f[0] - f[1])), ('二次传播率', lambda f: (f[0] - f[1]) / f[0])]\n    # 记录现有字段数量，用于下面计算新字段插入位置以及删除旧字段。\n    old_field_count = len(df.columns)\n    # 计算各字段的值，处理为percent后，依次插入datagrame中\n    for i in enumerate(expressions, start=old_field_count):\n        df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\n    # 转制后将原始字段去除\n    df = df.T[old_field_count:]\n\n    df.plot(kind='barh', figsize=(16, 9))\n\n    from pylab import mpl\n    mpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体\n    mpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题\n    plt.show()\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s107-ef-bc-9a-e5-ae-8c-e6-88-90-e5-be-ae-e4-bf-a1-e8-bf-90-e8-90-a5-e8-af-84-e4-bc-b0-e6-a8-a1-e5-9e-8b.md","raw":"---\ntitle: 数据分析S107：完成微信运营评估模型\ntags:\n  - python\n  - 数据分析\nid: 120\ncategories:\n  - python\ndate: 2015-04-12 16:15:55\n---\n\n[python]\n__author__ = 'sail'\nimport pandas as pd\nfrom functools import reduce\nimport matplotlib.pyplot as plt\n\ndef analyse():\n    # 该函数用于将一个dataFrame合并为一条记录\n    # 入参x为一个dataFrame，调用tt对每个Series分别进行合并\n    def t(x):\n        return x.apply(tt)\n\n    # 该函数用于对一个Series进行合并,入参x为一个Series\n    def tt(x):\n        # 当x为标题时用reduce调用lcs函数求从字符串头开始的最长公共子串\n        if x.name == '标题':\n            return reduce(lcs, x)\n        # 当x为下列内容是取最后一项\n        elif x.name in {'日期', '粉丝数'}:\n            return x[-1]\n        # 其他情况时对将x中所有数据合并为一组求和，并返回该组求和结果\n        else:\n            return x.groupby(lambda x: 1).sum().values[0]\n\n    def lcs(x, y):\n        for i in range(min(len(y), len(x))):\n            if x[i] != y[i]:\n                break\n        else:\n            i += 1\n        return x[:i]\n\n    df = pd.ExcelFile(r&quot;resource/wxgzhdata.xlsx&quot;).parse(u&quot;3月&quot;)\n    df.insert(0, '标题', df['文章标题'])\n    df = df.fillna(method=&quot;pad&quot;).dropna().set_index(['文章标题']).groupby(lambda x: x[:2]).apply(lambda x: x.apply(\n        lambda y: {1: lambda z: reduce(lcs, z), 2: lambda z: z[-1], None: lambda z: z.groupby(type).sum().values[0]}\n        [{'标题': 1, '日期': 2, '粉丝数': 2}.get(y.name)](y))).set_index(['标题'])\n    # 下面为上句的另一种表达方式\n    # 用fillna填充nan\n    # df=df.fillna(method=&quot;pad&quot;)\n    # 将开头未能被pad填充的nan去除\n    # df=df.dropna()\n    # 将标题设为index以方便分组\n    # df=df.set_index(['文章标题'])\n    # 以标题的前两个字为基准分组\n    # df=df.groupby(lambda x: x[:2])\n    # 利用函数t对每个groupBy进行合并\n    # df=df.apply(t)\n    # 将各系列内文章标题的相同部分作为系列名称\n    # df=df.set_index(['标题'])\n\n    # 从dataframe中取得之后计算需要的Series\n    fields = [df.xs('总阅读人数', axis=1), df.xs('初次打开阅读人数', axis=1), df.xs('分享次数', axis=1), df.xs('每日增粉人数', axis=1),\n              df.xs('粉丝数', axis=1)]\n    to_percent = lambda x: (x * 100).round(1)\n    # 各字段计算公式\n    expressions = [('初次打开率', lambda f: f[1] / f[4]), ('分享率', lambda f: f[2] / f[0]), ('分享拉粉率', lambda f: f[3] / f[2]),\n                   ('增粉速率', lambda f: f[3] / f[4]), ( '阅读涨粉率', lambda f: f[3] / f[0]),\n                   ('传播涨粉率', lambda f: f[3] / (f[0] - f[1])), ('二次传播率', lambda f: (f[0] - f[1]) / f[0])]\n    # 记录现有字段数量，用于下面计算新字段插入位置以及删除旧字段。\n    old_field_count = len(df.columns)\n    # 计算各字段的值，处理为percent后，依次插入datagrame中\n    for i in enumerate(expressions, start=old_field_count):\n        df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\n    # 转制后将原始字段去除\n    df = df.T[old_field_count:]\n\n    df.plot(kind='barh', figsize=(16, 9))\n\n    from pylab import mpl\n    mpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体\n    mpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题\n    plt.show()\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s107-ef-bc-9a-e5-ae-8c-e6-88-90-e5-be-ae-e4-bf-a1-e8-bf-90-e8-90-a5-e8-af-84-e4-bc-b0-e6-a8-a1-e5-9e-8b","published":1,"updated":"2016-05-06T02:34:31.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2f000nd0chvy1xgk2z","content":"<p>[python]<br><strong>author</strong> = ‘sail’<br>import pandas as pd<br>from functools import reduce<br>import matplotlib.pyplot as plt</p>\n<p>def analyse():</p>\n<pre><code># 该函数用于将一个dataFrame合并为一条记录\n# 入参x为一个dataFrame，调用tt对每个Series分别进行合并\ndef t(x):\n    return x.apply(tt)\n\n# 该函数用于对一个Series进行合并,入参x为一个Series\ndef tt(x):\n    # 当x为标题时用reduce调用lcs函数求从字符串头开始的最长公共子串\n    if x.name == &apos;标题&apos;:\n        return reduce(lcs, x)\n    # 当x为下列内容是取最后一项\n    elif x.name in {&apos;日期&apos;, &apos;粉丝数&apos;}:\n        return x[-1]\n    # 其他情况时对将x中所有数据合并为一组求和，并返回该组求和结果\n    else:\n        return x.groupby(lambda x: 1).sum().values[0]\n\ndef lcs(x, y):\n    for i in range(min(len(y), len(x))):\n        if x[i] != y[i]:\n            break\n    else:\n        i += 1\n    return x[:i]\n\ndf = pd.ExcelFile(r&amp;quot;resource/wxgzhdata.xlsx&amp;quot;).parse(u&amp;quot;3月&amp;quot;)\ndf.insert(0, &apos;标题&apos;, df[&apos;文章标题&apos;])\ndf = df.fillna(method=&amp;quot;pad&amp;quot;).dropna().set_index([&apos;文章标题&apos;]).groupby(lambda x: x[:2]).apply(lambda x: x.apply(\n    lambda y: {1: lambda z: reduce(lcs, z), 2: lambda z: z[-1], None: lambda z: z.groupby(type).sum().values[0]}\n    [{&apos;标题&apos;: 1, &apos;日期&apos;: 2, &apos;粉丝数&apos;: 2}.get(y.name)](y))).set_index([&apos;标题&apos;])\n# 下面为上句的另一种表达方式\n# 用fillna填充nan\n# df=df.fillna(method=&amp;quot;pad&amp;quot;)\n# 将开头未能被pad填充的nan去除\n# df=df.dropna()\n# 将标题设为index以方便分组\n# df=df.set_index([&apos;文章标题&apos;])\n# 以标题的前两个字为基准分组\n# df=df.groupby(lambda x: x[:2])\n# 利用函数t对每个groupBy进行合并\n# df=df.apply(t)\n# 将各系列内文章标题的相同部分作为系列名称\n# df=df.set_index([&apos;标题&apos;])\n\n# 从dataframe中取得之后计算需要的Series\nfields = [df.xs(&apos;总阅读人数&apos;, axis=1), df.xs(&apos;初次打开阅读人数&apos;, axis=1), df.xs(&apos;分享次数&apos;, axis=1), df.xs(&apos;每日增粉人数&apos;, axis=1),\n          df.xs(&apos;粉丝数&apos;, axis=1)]\nto_percent = lambda x: (x * 100).round(1)\n# 各字段计算公式\nexpressions = [(&apos;初次打开率&apos;, lambda f: f[1] / f[4]), (&apos;分享率&apos;, lambda f: f[2] / f[0]), (&apos;分享拉粉率&apos;, lambda f: f[3] / f[2]),\n               (&apos;增粉速率&apos;, lambda f: f[3] / f[4]), ( &apos;阅读涨粉率&apos;, lambda f: f[3] / f[0]),\n               (&apos;传播涨粉率&apos;, lambda f: f[3] / (f[0] - f[1])), (&apos;二次传播率&apos;, lambda f: (f[0] - f[1]) / f[0])]\n# 记录现有字段数量，用于下面计算新字段插入位置以及删除旧字段。\nold_field_count = len(df.columns)\n# 计算各字段的值，处理为percent后，依次插入datagrame中\nfor i in enumerate(expressions, start=old_field_count):\n    df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\n# 转制后将原始字段去除\ndf = df.T[old_field_count:]\n\ndf.plot(kind=&apos;barh&apos;, figsize=(16, 9))\n\nfrom pylab import mpl\nmpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]  # 指定默认字体\nmpl.rcParams[&apos;axes.unicode_minus&apos;] = False  # 解决保存图像是负号&apos;-&apos;显示为方块的问题\nplt.show()\n</code></pre><p>[/python]</p>\n","excerpt":"","more":"<p>[python]<br><strong>author</strong> = ‘sail’<br>import pandas as pd<br>from functools import reduce<br>import matplotlib.pyplot as plt</p>\n<p>def analyse():</p>\n<pre><code># 该函数用于将一个dataFrame合并为一条记录\n# 入参x为一个dataFrame，调用tt对每个Series分别进行合并\ndef t(x):\n    return x.apply(tt)\n\n# 该函数用于对一个Series进行合并,入参x为一个Series\ndef tt(x):\n    # 当x为标题时用reduce调用lcs函数求从字符串头开始的最长公共子串\n    if x.name == &apos;标题&apos;:\n        return reduce(lcs, x)\n    # 当x为下列内容是取最后一项\n    elif x.name in {&apos;日期&apos;, &apos;粉丝数&apos;}:\n        return x[-1]\n    # 其他情况时对将x中所有数据合并为一组求和，并返回该组求和结果\n    else:\n        return x.groupby(lambda x: 1).sum().values[0]\n\ndef lcs(x, y):\n    for i in range(min(len(y), len(x))):\n        if x[i] != y[i]:\n            break\n    else:\n        i += 1\n    return x[:i]\n\ndf = pd.ExcelFile(r&amp;quot;resource/wxgzhdata.xlsx&amp;quot;).parse(u&amp;quot;3月&amp;quot;)\ndf.insert(0, &apos;标题&apos;, df[&apos;文章标题&apos;])\ndf = df.fillna(method=&amp;quot;pad&amp;quot;).dropna().set_index([&apos;文章标题&apos;]).groupby(lambda x: x[:2]).apply(lambda x: x.apply(\n    lambda y: {1: lambda z: reduce(lcs, z), 2: lambda z: z[-1], None: lambda z: z.groupby(type).sum().values[0]}\n    [{&apos;标题&apos;: 1, &apos;日期&apos;: 2, &apos;粉丝数&apos;: 2}.get(y.name)](y))).set_index([&apos;标题&apos;])\n# 下面为上句的另一种表达方式\n# 用fillna填充nan\n# df=df.fillna(method=&amp;quot;pad&amp;quot;)\n# 将开头未能被pad填充的nan去除\n# df=df.dropna()\n# 将标题设为index以方便分组\n# df=df.set_index([&apos;文章标题&apos;])\n# 以标题的前两个字为基准分组\n# df=df.groupby(lambda x: x[:2])\n# 利用函数t对每个groupBy进行合并\n# df=df.apply(t)\n# 将各系列内文章标题的相同部分作为系列名称\n# df=df.set_index([&apos;标题&apos;])\n\n# 从dataframe中取得之后计算需要的Series\nfields = [df.xs(&apos;总阅读人数&apos;, axis=1), df.xs(&apos;初次打开阅读人数&apos;, axis=1), df.xs(&apos;分享次数&apos;, axis=1), df.xs(&apos;每日增粉人数&apos;, axis=1),\n          df.xs(&apos;粉丝数&apos;, axis=1)]\nto_percent = lambda x: (x * 100).round(1)\n# 各字段计算公式\nexpressions = [(&apos;初次打开率&apos;, lambda f: f[1] / f[4]), (&apos;分享率&apos;, lambda f: f[2] / f[0]), (&apos;分享拉粉率&apos;, lambda f: f[3] / f[2]),\n               (&apos;增粉速率&apos;, lambda f: f[3] / f[4]), ( &apos;阅读涨粉率&apos;, lambda f: f[3] / f[0]),\n               (&apos;传播涨粉率&apos;, lambda f: f[3] / (f[0] - f[1])), (&apos;二次传播率&apos;, lambda f: (f[0] - f[1]) / f[0])]\n# 记录现有字段数量，用于下面计算新字段插入位置以及删除旧字段。\nold_field_count = len(df.columns)\n# 计算各字段的值，处理为percent后，依次插入datagrame中\nfor i in enumerate(expressions, start=old_field_count):\n    df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\n# 转制后将原始字段去除\ndf = df.T[old_field_count:]\n\ndf.plot(kind=&apos;barh&apos;, figsize=(16, 9))\n\nfrom pylab import mpl\nmpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]  # 指定默认字体\nmpl.rcParams[&apos;axes.unicode_minus&apos;] = False  # 解决保存图像是负号&apos;-&apos;显示为方块的问题\nplt.show()\n</code></pre><p>[/python]</p>\n"},{"title":"数据分析S108：微信文章密度的影响","id":"126","date":"2015-04-17T08:12:42.000Z","_content":"\n[python][/python] \ndef lcs(x, y):\n    for i in range(min(len(y), len(x))):\n        if x[i] != y[i]:\n            break\n    else:\n        i += 1\n    return x[:i]\ndf = pd.ExcelFile(r\"resource/wxgzhdata.xlsx\").parse(u\"3月\")\ndf = df.fillna(method=\"pad\").dropna()\ndf.insert(0, '标题', list(map(lambda x:x[:2],df['文章标题'])))\ndf.insert(len(df.columns), '距下一篇的天数', df['文章标题'])\ndf = df.fillna(method=\"pad\").dropna().set_index(['文章标题']).groupby(level =0).apply(lambda x: x.apply(\n    lambda y: {1: lambda z: z[-1],2:lambda z:len(z), None: lambda z: z.groupby(type).sum().values[0]}\n    [{'标题': 1, '日期': 1, '粉丝数': 1,'距下一篇的天数':2}.get(y.name)](y))).sort(['日期'])#.set_index(['标题'])\n# for i in range(len(df['距下一篇的天数'])-1,0,-1):\n#     df['距下一篇的天数'][i]=df['距下一篇的天数'][i-1]\nday_list=list(df['距下一篇的天数'].values)\nday_list.insert(0,np.nan)\nday_list.pop(-1)\ndf.insert(len(df.columns),'距上一篇的天数',value=day_list)\n\nfields = [df.xs('总阅读人数', axis=1), df.xs('初次打开阅读人数', axis=1), df.xs('分享次数', axis=1), df.xs('每日增粉人数', axis=1),\n          df.xs('粉丝数', axis=1)]\nto_percent = lambda x: (x * 100).round(1)\nexpressions = [('初次打开率', lambda f: f[1] / f[4]), ('分享率', lambda f: f[2] / f[0]), ('分享拉粉率', lambda f: f[3] / f[2]),\n               ('增粉速率', lambda f: f[3] / f[4]), ( '阅读涨粉率', lambda f: f[3] / f[0]),\n               ('传播涨粉率', lambda f: f[3] / (f[0] - f[1])), ('二次传播率', lambda f: (f[0] - f[1]) / f[0])]\nold_field_count = len(df.columns)-2\n# 计算各字段的值，处理为percent后，依次插入datagrame中\nfor i in enumerate(expressions, start=old_field_count):\n    df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\ndf.set_index('距下一篇的天数').dropna().groupby(level =0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\ndf.set_index('距上一篇的天数').dropna().groupby(level =0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\ngroupby=df.groupby(lambda x:x[:2])\ndf=groupby.mean()\ndf.insert(5,'连载篇数',groupby.count()[['标题']])\ndf.set_index('连载篇数').groupby(level=0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\n# df.dropna().set_index('距下一篇的天数')\n# df.plot(kind='barh', figsize=(16, 9))\n#\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体\nmpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题\nplt.show()\n[/python」","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s108-ef-bc-9a-e5-be-ae-e4-bf-a1-e6-96-87-e7-ab-a0-e5-af-86-e5-ba-a6-e7-9a-84-e5-bd-b1-e5-93-8d.md","raw":"---\ntitle: 数据分析S108：微信文章密度的影响\ntags:\n  - python\n  - 数据分析\nid: 126\ncategories:\n  - python\ndate: 2015-04-17 16:12:42\n---\n\n[python][/python] \ndef lcs(x, y):\n    for i in range(min(len(y), len(x))):\n        if x[i] != y[i]:\n            break\n    else:\n        i += 1\n    return x[:i]\ndf = pd.ExcelFile(r\"resource/wxgzhdata.xlsx\").parse(u\"3月\")\ndf = df.fillna(method=\"pad\").dropna()\ndf.insert(0, '标题', list(map(lambda x:x[:2],df['文章标题'])))\ndf.insert(len(df.columns), '距下一篇的天数', df['文章标题'])\ndf = df.fillna(method=\"pad\").dropna().set_index(['文章标题']).groupby(level =0).apply(lambda x: x.apply(\n    lambda y: {1: lambda z: z[-1],2:lambda z:len(z), None: lambda z: z.groupby(type).sum().values[0]}\n    [{'标题': 1, '日期': 1, '粉丝数': 1,'距下一篇的天数':2}.get(y.name)](y))).sort(['日期'])#.set_index(['标题'])\n# for i in range(len(df['距下一篇的天数'])-1,0,-1):\n#     df['距下一篇的天数'][i]=df['距下一篇的天数'][i-1]\nday_list=list(df['距下一篇的天数'].values)\nday_list.insert(0,np.nan)\nday_list.pop(-1)\ndf.insert(len(df.columns),'距上一篇的天数',value=day_list)\n\nfields = [df.xs('总阅读人数', axis=1), df.xs('初次打开阅读人数', axis=1), df.xs('分享次数', axis=1), df.xs('每日增粉人数', axis=1),\n          df.xs('粉丝数', axis=1)]\nto_percent = lambda x: (x * 100).round(1)\nexpressions = [('初次打开率', lambda f: f[1] / f[4]), ('分享率', lambda f: f[2] / f[0]), ('分享拉粉率', lambda f: f[3] / f[2]),\n               ('增粉速率', lambda f: f[3] / f[4]), ( '阅读涨粉率', lambda f: f[3] / f[0]),\n               ('传播涨粉率', lambda f: f[3] / (f[0] - f[1])), ('二次传播率', lambda f: (f[0] - f[1]) / f[0])]\nold_field_count = len(df.columns)-2\n# 计算各字段的值，处理为percent后，依次插入datagrame中\nfor i in enumerate(expressions, start=old_field_count):\n    df.insert(i[0], i[1][0], (i[1][1](fields)).apply(to_percent))\ndf.set_index('距下一篇的天数').dropna().groupby(level =0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\ndf.set_index('距上一篇的天数').dropna().groupby(level =0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\ngroupby=df.groupby(lambda x:x[:2])\ndf=groupby.mean()\ndf.insert(5,'连载篇数',groupby.count()[['标题']])\ndf.set_index('连载篇数').groupby(level=0).mean().T[5:12].plot(kind='barh', figsize=(16, 9))\n# df.dropna().set_index('距下一篇的天数')\n# df.plot(kind='barh', figsize=(16, 9))\n#\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体\nmpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题\nplt.show()\n[/python」","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s108-ef-bc-9a-e5-be-ae-e4-bf-a1-e6-96-87-e7-ab-a0-e5-af-86-e5-ba-a6-e7-9a-84-e5-bd-b1-e5-93-8d","published":1,"updated":"2016-05-06T02:34:31.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2h000rd0ch67l3k3fz","content":"<p>[python][/python]<br>def lcs(x, y):<br>    for i in range(min(len(y), len(x))):<br>        if x[i] != y[i]:<br>            break<br>    else:<br>        i += 1<br>    return x[:i]<br>df = pd.ExcelFile(r”resource/wxgzhdata.xlsx”).parse(u”3月”)<br>df = df.fillna(method=”pad”).dropna()<br>df.insert(0, ‘标题’, list(map(lambda x:x[:2],df[‘文章标题’])))<br>df.insert(len(df.columns), ‘距下一篇的天数’, df[‘文章标题’])<br>df = df.fillna(method=”pad”).dropna().set_index([‘文章标题’]).groupby(level =0).apply(lambda x: x.apply(<br>    lambda y: {1: lambda z: z[-1],2:lambda z:len(z), None: lambda z: z.groupby(type).sum().values[0]}<br>    <a href=\"y\">{‘标题’: 1, ‘日期’: 1, ‘粉丝数’: 1,’距下一篇的天数’:2}.get(y.name)</a>)).sort([‘日期’])#.set_index([‘标题’])</p>\n<h1 id=\"for-i-in-range-len-df-‘距下一篇的天数’-1-0-1\"><a href=\"#for-i-in-range-len-df-‘距下一篇的天数’-1-0-1\" class=\"headerlink\" title=\"for i in range(len(df[‘距下一篇的天数’])-1,0,-1):\"></a>for i in range(len(df[‘距下一篇的天数’])-1,0,-1):</h1><h1 id=\"df-‘距下一篇的天数’-i-df-‘距下一篇的天数’-i-1\"><a href=\"#df-‘距下一篇的天数’-i-df-‘距下一篇的天数’-i-1\" class=\"headerlink\" title=\"df[‘距下一篇的天数’][i]=df[‘距下一篇的天数’][i-1]\"></a>df[‘距下一篇的天数’][i]=df[‘距下一篇的天数’][i-1]</h1><p>day_list=list(df[‘距下一篇的天数’].values)<br>day_list.insert(0,np.nan)<br>day_list.pop(-1)<br>df.insert(len(df.columns),’距上一篇的天数’,value=day_list)</p>\n<p>fields = [df.xs(‘总阅读人数’, axis=1), df.xs(‘初次打开阅读人数’, axis=1), df.xs(‘分享次数’, axis=1), df.xs(‘每日增粉人数’, axis=1),<br>          df.xs(‘粉丝数’, axis=1)]<br>to_percent = lambda x: (x * 100).round(1)<br>expressions = [(‘初次打开率’, lambda f: f[1] / f[4]), (‘分享率’, lambda f: f[2] / f[0]), (‘分享拉粉率’, lambda f: f[3] / f[2]),<br>               (‘增粉速率’, lambda f: f[3] / f[4]), ( ‘阅读涨粉率’, lambda f: f[3] / f[0]),<br>               (‘传播涨粉率’, lambda f: f[3] / (f[0] - f[1])), (‘二次传播率’, lambda f: (f[0] - f[1]) / f[0])]<br>old_field_count = len(df.columns)-2</p>\n<h1 id=\"计算各字段的值，处理为percent后，依次插入datagrame中\"><a href=\"#计算各字段的值，处理为percent后，依次插入datagrame中\" class=\"headerlink\" title=\"计算各字段的值，处理为percent后，依次插入datagrame中\"></a>计算各字段的值，处理为percent后，依次插入datagrame中</h1><p>for i in enumerate(expressions, start=old_field_count):<br>    df.insert(i[0], i[1][0], (i[1]<a href=\"fields\">1</a>).apply(to_percent))<br>df.set_index(‘距下一篇的天数’).dropna().groupby(level =0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))<br>df.set_index(‘距上一篇的天数’).dropna().groupby(level =0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))<br>groupby=df.groupby(lambda x:x[:2])<br>df=groupby.mean()<br>df.insert(5,’连载篇数’,groupby.count()[[‘标题’]])<br>df.set_index(‘连载篇数’).groupby(level=0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))</p>\n<h1 id=\"df-dropna-set-index-‘距下一篇的天数’\"><a href=\"#df-dropna-set-index-‘距下一篇的天数’\" class=\"headerlink\" title=\"df.dropna().set_index(‘距下一篇的天数’)\"></a>df.dropna().set_index(‘距下一篇的天数’)</h1><h1 id=\"df-plot-kind-’barh’-figsize-16-9\"><a href=\"#df-plot-kind-’barh’-figsize-16-9\" class=\"headerlink\" title=\"df.plot(kind=’barh’, figsize=(16, 9))\"></a>df.plot(kind=’barh’, figsize=(16, 9))</h1><p>#<br>from pylab import mpl<br>mpl.rcParams[‘font.sans-serif’] = [‘SimHei’]  # 指定默认字体<br>mpl.rcParams[‘axes.unicode_minus’] = False  # 解决保存图像是负号’-‘显示为方块的问题<br>plt.show()<br>[/python」</p>\n","excerpt":"","more":"<p>[python][/python]<br>def lcs(x, y):<br>    for i in range(min(len(y), len(x))):<br>        if x[i] != y[i]:<br>            break<br>    else:<br>        i += 1<br>    return x[:i]<br>df = pd.ExcelFile(r”resource/wxgzhdata.xlsx”).parse(u”3月”)<br>df = df.fillna(method=”pad”).dropna()<br>df.insert(0, ‘标题’, list(map(lambda x:x[:2],df[‘文章标题’])))<br>df.insert(len(df.columns), ‘距下一篇的天数’, df[‘文章标题’])<br>df = df.fillna(method=”pad”).dropna().set_index([‘文章标题’]).groupby(level =0).apply(lambda x: x.apply(<br>    lambda y: {1: lambda z: z[-1],2:lambda z:len(z), None: lambda z: z.groupby(type).sum().values[0]}<br>    <a href=\"y\">{‘标题’: 1, ‘日期’: 1, ‘粉丝数’: 1,’距下一篇的天数’:2}.get(y.name)</a>)).sort([‘日期’])#.set_index([‘标题’])</p>\n<h1 id=\"for-i-in-range-len-df-‘距下一篇的天数’-1-0-1\"><a href=\"#for-i-in-range-len-df-‘距下一篇的天数’-1-0-1\" class=\"headerlink\" title=\"for i in range(len(df[‘距下一篇的天数’])-1,0,-1):\"></a>for i in range(len(df[‘距下一篇的天数’])-1,0,-1):</h1><h1 id=\"df-‘距下一篇的天数’-i-df-‘距下一篇的天数’-i-1\"><a href=\"#df-‘距下一篇的天数’-i-df-‘距下一篇的天数’-i-1\" class=\"headerlink\" title=\"df[‘距下一篇的天数’][i]=df[‘距下一篇的天数’][i-1]\"></a>df[‘距下一篇的天数’][i]=df[‘距下一篇的天数’][i-1]</h1><p>day_list=list(df[‘距下一篇的天数’].values)<br>day_list.insert(0,np.nan)<br>day_list.pop(-1)<br>df.insert(len(df.columns),’距上一篇的天数’,value=day_list)</p>\n<p>fields = [df.xs(‘总阅读人数’, axis=1), df.xs(‘初次打开阅读人数’, axis=1), df.xs(‘分享次数’, axis=1), df.xs(‘每日增粉人数’, axis=1),<br>          df.xs(‘粉丝数’, axis=1)]<br>to_percent = lambda x: (x * 100).round(1)<br>expressions = [(‘初次打开率’, lambda f: f[1] / f[4]), (‘分享率’, lambda f: f[2] / f[0]), (‘分享拉粉率’, lambda f: f[3] / f[2]),<br>               (‘增粉速率’, lambda f: f[3] / f[4]), ( ‘阅读涨粉率’, lambda f: f[3] / f[0]),<br>               (‘传播涨粉率’, lambda f: f[3] / (f[0] - f[1])), (‘二次传播率’, lambda f: (f[0] - f[1]) / f[0])]<br>old_field_count = len(df.columns)-2</p>\n<h1 id=\"计算各字段的值，处理为percent后，依次插入datagrame中\"><a href=\"#计算各字段的值，处理为percent后，依次插入datagrame中\" class=\"headerlink\" title=\"计算各字段的值，处理为percent后，依次插入datagrame中\"></a>计算各字段的值，处理为percent后，依次插入datagrame中</h1><p>for i in enumerate(expressions, start=old_field_count):<br>    df.insert(i[0], i[1][0], (i[1]<a href=\"fields\">1</a>).apply(to_percent))<br>df.set_index(‘距下一篇的天数’).dropna().groupby(level =0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))<br>df.set_index(‘距上一篇的天数’).dropna().groupby(level =0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))<br>groupby=df.groupby(lambda x:x[:2])<br>df=groupby.mean()<br>df.insert(5,’连载篇数’,groupby.count()[[‘标题’]])<br>df.set_index(‘连载篇数’).groupby(level=0).mean().T[5:12].plot(kind=’barh’, figsize=(16, 9))</p>\n<h1 id=\"df-dropna-set-index-‘距下一篇的天数’\"><a href=\"#df-dropna-set-index-‘距下一篇的天数’\" class=\"headerlink\" title=\"df.dropna().set_index(‘距下一篇的天数’)\"></a>df.dropna().set_index(‘距下一篇的天数’)</h1><h1 id=\"df-plot-kind-’barh’-figsize-16-9\"><a href=\"#df-plot-kind-’barh’-figsize-16-9\" class=\"headerlink\" title=\"df.plot(kind=’barh’, figsize=(16, 9))\"></a>df.plot(kind=’barh’, figsize=(16, 9))</h1><p>#<br>from pylab import mpl<br>mpl.rcParams[‘font.sans-serif’] = [‘SimHei’]  # 指定默认字体<br>mpl.rcParams[‘axes.unicode_minus’] = False  # 解决保存图像是负号’-‘显示为方块的问题<br>plt.show()<br>[/python」</p>\n"},{"title":"数据分析S103：使用结巴分词工具提取关键词","id":"99","date":"2015-03-31T05:10:17.000Z","_content":"\n这一主要是使用[](https://github.com/fxsjy/jieba \"结巴分词\")进行分词，并提取关键词。\n\n##### 根据词频分析：\n\n这是利用结巴分词后，除去黑名单，统计得到出现最多的次，方法简单。但是没有利用到结巴提供的工具，因此效果较差\n[python]\ndef pet_phrase(usrid=None, name=None):\n    with open(r'resource/stopWordList.txt',encoding='utf-8') as f:\n        black_list=[i for i in f.read().split('\\n')]\n    speak_list=dataio.someonechat(usrid,name)\n    rate={}\n    for sentence in speak_list:\n        for word in posseg.cut(sentence['contents']):\n            s=word.word\n            if rate.get(s):\n                rate[s]+=1\n            elif s not in black_list:\n                rate[s]=1\n    return sorted(rate.items(),key=lambda x:x[1],reverse=True)[:10]\n[/python]\n&nbsp;\n\n##### 利用结巴分析模块：\n\n[python]\nresult = '\\n'.join([i[0] for i in conn.execute('SELECT contents FROM chatdb')])\nprint(jieba.analyse.extract_tags(result, 10))\nprint(jieba.analyse.textrank(result,10))\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s103-ef-bc-9a-e4-bd-bf-e7-94-a8-e7-bb-93-e5-b7-b4-e5-88-86-e8-af-8d-e5-b7-a5-e5-85-b7-e6-8f-90-e5-8f-96-e5-85-b3-e9-94-ae-e8-af-8d.md","raw":"---\ntitle: 数据分析S103：使用结巴分词工具提取关键词\ntags:\n  - python\n  - 数据分析\nid: 99\ncategories:\n  - python\ndate: 2015-03-31 13:10:17\n---\n\n这一主要是使用[](https://github.com/fxsjy/jieba \"结巴分词\")进行分词，并提取关键词。\n\n##### 根据词频分析：\n\n这是利用结巴分词后，除去黑名单，统计得到出现最多的次，方法简单。但是没有利用到结巴提供的工具，因此效果较差\n[python]\ndef pet_phrase(usrid=None, name=None):\n    with open(r'resource/stopWordList.txt',encoding='utf-8') as f:\n        black_list=[i for i in f.read().split('\\n')]\n    speak_list=dataio.someonechat(usrid,name)\n    rate={}\n    for sentence in speak_list:\n        for word in posseg.cut(sentence['contents']):\n            s=word.word\n            if rate.get(s):\n                rate[s]+=1\n            elif s not in black_list:\n                rate[s]=1\n    return sorted(rate.items(),key=lambda x:x[1],reverse=True)[:10]\n[/python]\n&nbsp;\n\n##### 利用结巴分析模块：\n\n[python]\nresult = '\\n'.join([i[0] for i in conn.execute('SELECT contents FROM chatdb')])\nprint(jieba.analyse.extract_tags(result, 10))\nprint(jieba.analyse.textrank(result,10))\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s103-ef-bc-9a-e4-bd-bf-e7-94-a8-e7-bb-93-e5-b7-b4-e5-88-86-e8-af-8d-e5-b7-a5-e5-85-b7-e6-8f-90-e5-8f-96-e5-85-b3-e9-94-ae-e8-af-8d","published":1,"updated":"2016-05-06T02:34:31.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2k000td0ch39zreju2","content":"<p>这一主要是使用<a href=\"https://github.com/fxsjy/jieba\" title=\"结巴分词\" target=\"_blank\" rel=\"external\"></a>进行分词，并提取关键词。</p>\n<h5 id=\"根据词频分析：\"><a href=\"#根据词频分析：\" class=\"headerlink\" title=\"根据词频分析：\"></a>根据词频分析：</h5><p>这是利用结巴分词后，除去黑名单，统计得到出现最多的次，方法简单。但是没有利用到结巴提供的工具，因此效果较差<br>[python]<br>def pet_phrase(usrid=None, name=None):<br>    with open(r’resource/stopWordList.txt’,encoding=’utf-8’) as f:<br>        black_list=[i for i in f.read().split(‘\\n’)]<br>    speak_list=dataio.someonechat(usrid,name)<br>    rate={}<br>    for sentence in speak_list:<br>        for word in posseg.cut(sentence[‘contents’]):<br>            s=word.word<br>            if rate.get(s):<br>                rate[s]+=1<br>            elif s not in black_list:<br>                rate[s]=1<br>    return sorted(rate.items(),key=lambda x:x[1],reverse=True)[:10]<br>[/python]<br>&nbsp;</p>\n<h5 id=\"利用结巴分析模块：\"><a href=\"#利用结巴分析模块：\" class=\"headerlink\" title=\"利用结巴分析模块：\"></a>利用结巴分析模块：</h5><p>[python]<br>result = ‘\\n’.join([i[0] for i in conn.execute(‘SELECT contents FROM chatdb’)])<br>print(jieba.analyse.extract_tags(result, 10))<br>print(jieba.analyse.textrank(result,10))<br>[/python]</p>\n","excerpt":"","more":"<p>这一主要是使用<a href=\"https://github.com/fxsjy/jieba\" title=\"结巴分词\"></a>进行分词，并提取关键词。</p>\n<h5 id=\"根据词频分析：\"><a href=\"#根据词频分析：\" class=\"headerlink\" title=\"根据词频分析：\"></a>根据词频分析：</h5><p>这是利用结巴分词后，除去黑名单，统计得到出现最多的次，方法简单。但是没有利用到结巴提供的工具，因此效果较差<br>[python]<br>def pet_phrase(usrid=None, name=None):<br>    with open(r’resource/stopWordList.txt’,encoding=’utf-8’) as f:<br>        black_list=[i for i in f.read().split(‘\\n’)]<br>    speak_list=dataio.someonechat(usrid,name)<br>    rate={}<br>    for sentence in speak_list:<br>        for word in posseg.cut(sentence[‘contents’]):<br>            s=word.word<br>            if rate.get(s):<br>                rate[s]+=1<br>            elif s not in black_list:<br>                rate[s]=1<br>    return sorted(rate.items(),key=lambda x:x[1],reverse=True)[:10]<br>[/python]<br>&nbsp;</p>\n<h5 id=\"利用结巴分析模块：\"><a href=\"#利用结巴分析模块：\" class=\"headerlink\" title=\"利用结巴分析模块：\"></a>利用结巴分析模块：</h5><p>[python]<br>result = ‘\\n’.join([i[0] for i in conn.execute(‘SELECT contents FROM chatdb’)])<br>print(jieba.analyse.extract_tags(result, 10))<br>print(jieba.analyse.textrank(result,10))<br>[/python]</p>\n"},{"title":" 数据分析S109：分类词频分析","id":"128","date":"2015-04-23T09:04:57.000Z","_content":"\n这次是在之前的词频分析的基础上，将词组根据词性分类后取出各种词性中的高频词。\n[python]\n__author__ = 'sail'\nimport jieba\nimport jieba.analyse\nimport jieba.posseg as posseg\nimport dataio\nfrom collections import *\n\ndb_filename = r'resource/chat.db'\n\ndef analyse(usrid=None, name=None):\n    with open(r'resource/stopWordList.txt', encoding='utf-8') as f:\n        black_list = [i for i in f.read().split('\\n')]\n    speak_list = dataio.someonechat(usrid, name)\n    words = [i for i in jieba.posseg.cut(' '.join([i['contents'] for i in speak_list])) if i.word not in black_list]\n    word_dict=defaultdict(list)\n    for i in words:\n        if i.flag != 'eng':\n            i.flag = i.flag[0]\n        word_dict[i.flag].append(i.word)\n    print(Counter(word_dict['v']).most_common(10))\n    print(Counter(word_dict['n']).most_common(10))\n    print(Counter(word_dict['a']).most_common(10))\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s109-ef-bc-9a-e5-88-86-e7-b1-bb-e8-af-8d-e9-a2-91-e5-88-86-e6-9e-90.md","raw":"---\ntitle: ' 数据分析S109：分类词频分析'\ntags:\n  - python\n  - 数据分析\nid: 128\ncategories:\n  - python\ndate: 2015-04-23 17:04:57\n---\n\n这次是在之前的词频分析的基础上，将词组根据词性分类后取出各种词性中的高频词。\n[python]\n__author__ = 'sail'\nimport jieba\nimport jieba.analyse\nimport jieba.posseg as posseg\nimport dataio\nfrom collections import *\n\ndb_filename = r'resource/chat.db'\n\ndef analyse(usrid=None, name=None):\n    with open(r'resource/stopWordList.txt', encoding='utf-8') as f:\n        black_list = [i for i in f.read().split('\\n')]\n    speak_list = dataio.someonechat(usrid, name)\n    words = [i for i in jieba.posseg.cut(' '.join([i['contents'] for i in speak_list])) if i.word not in black_list]\n    word_dict=defaultdict(list)\n    for i in words:\n        if i.flag != 'eng':\n            i.flag = i.flag[0]\n        word_dict[i.flag].append(i.word)\n    print(Counter(word_dict['v']).most_common(10))\n    print(Counter(word_dict['n']).most_common(10))\n    print(Counter(word_dict['a']).most_common(10))\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s109-ef-bc-9a-e5-88-86-e7-b1-bb-e8-af-8d-e9-a2-91-e5-88-86-e6-9e-90","published":1,"updated":"2016-05-06T02:34:31.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2m000xd0ch9yjg19he","content":"<p>这次是在之前的词频分析的基础上，将词组根据词性分类后取出各种词性中的高频词。<br>[python]<br><strong>author</strong> = ‘sail’<br>import jieba<br>import jieba.analyse<br>import jieba.posseg as posseg<br>import dataio<br>from collections import *</p>\n<p>db_filename = r’resource/chat.db’</p>\n<p>def analyse(usrid=None, name=None):<br>    with open(r’resource/stopWordList.txt’, encoding=’utf-8’) as f:<br>        black_list = [i for i in f.read().split(‘\\n’)]<br>    speak_list = dataio.someonechat(usrid, name)<br>    words = [i for i in jieba.posseg.cut(‘ ‘.join([i[‘contents’] for i in speak_list])) if i.word not in black_list]<br>    word_dict=defaultdict(list)<br>    for i in words:<br>        if i.flag != ‘eng’:<br>            i.flag = i.flag[0]<br>        word_dict[i.flag].append(i.word)<br>    print(Counter(word_dict[‘v’]).most_common(10))<br>    print(Counter(word_dict[‘n’]).most_common(10))<br>    print(Counter(word_dict[‘a’]).most_common(10))<br>[/python]</p>\n","excerpt":"","more":"<p>这次是在之前的词频分析的基础上，将词组根据词性分类后取出各种词性中的高频词。<br>[python]<br><strong>author</strong> = ‘sail’<br>import jieba<br>import jieba.analyse<br>import jieba.posseg as posseg<br>import dataio<br>from collections import *</p>\n<p>db_filename = r’resource/chat.db’</p>\n<p>def analyse(usrid=None, name=None):<br>    with open(r’resource/stopWordList.txt’, encoding=’utf-8’) as f:<br>        black_list = [i for i in f.read().split(‘\\n’)]<br>    speak_list = dataio.someonechat(usrid, name)<br>    words = [i for i in jieba.posseg.cut(‘ ‘.join([i[‘contents’] for i in speak_list])) if i.word not in black_list]<br>    word_dict=defaultdict(list)<br>    for i in words:<br>        if i.flag != ‘eng’:<br>            i.flag = i.flag[0]<br>        word_dict[i.flag].append(i.word)<br>    print(Counter(word_dict[‘v’]).most_common(10))<br>    print(Counter(word_dict[‘n’]).most_common(10))<br>    print(Counter(word_dict[‘a’]).most_common(10))<br>[/python]</p>\n"},{"title":" 数据分析S110：网站链接分析（一）","id":"129","date":"2015-04-24T01:37:49.000Z","_content":"\n这是网站链接分析的第一期，这一次的首要目的是从excle文件中提取出页面及页面之间的链接，其次就是完成初步的信息提取，即找出指定页面的链入链出情况，以及分析网站的链入链出。\n[python]\n__author__ = 'sail'\ndb_filename = r'resource/link.db'\nschema_filename = r'link.sql'\nimport sqlite3\n\ndef read_data():\n    import os\n    import pickle\n    from multiprocessing import Pool\n\n    # 建立数据库及数据库，创建临时文件夹\n    conn = sqlite3.connect(db_filename)\n    print('Creating schema')\n    with open(schema_filename, 'rt') as f:\n        schema = f.read()\n    conn.executescript(schema)\n    if not os.path.exists(r&quot;resource/temp&quot;):\n        os.makedirs(r&quot;resource/temp&quot;)\n\n    #开启多进程读取excle文件，具体业务在__read_excle中\n    pool = Pool(processes=os.cpu_count())\n    results = pool.map(__read_excle, [(r'resource/linkdata/' + i, i) for i in os.listdir(r'resource/linkdata/')])\n    pool.close()\n    pool.join()\n\n    #合并各进程返回的页面集，并插入数据库中\n    pages = set()\n    for i in results:\n        pages.update(i)\n    conn.executemany(r'INSERT INTO url(host,page,url) VALUES (?,?,?)',\n                     (i.split(r'//')[1][:-1].split(r'/', 1) + [i] for i in pages))\n    conn.commit()\n\n    #取出url与id的对应关系\n    result = conn.execute(r'SELECT id,url FROM url')\n    page_map = {}\n    for i in result:\n        page_map[i[1]] = i[0]\n\n    #用取出的对应关系，将临时文件中的url指向转译为id指向后存入数据库\n    for parent, dirnames, filenames in os.walk(r'resource/temp'):\n        for i in filenames:\n            with open(parent + r'/' + i, 'rb') as f:\n                page_link = pickle.load(f)\n            os.remove(parent + r'/' + i)\n            conn.executemany(r'INSERT INTO link(source,target) VALUES (?,?)',\n                             [(page_map[source], page_map[target]) for source in page_link for target in\n                              page_link[source]])\n    conn.commit()\n    conn.close()\n\ndef __read_excle(file):\n    import xlrd\n    import pickle\n\n    pages = set()\n    page_link = {}\n    table = xlrd.open_workbook(file[0]).sheets()[0]\n    for j in range(table.nrows):\n        row = table.row_values(j)\n        url = row[1]\n        pages.add(url)\n        page_link[url] = [i[1:-1] for i in row[2][1:-1].split(', ')]\n        for k in page_link[url]:\n            pages.add(k)\n    with open(r'resource/temp/' + file[1] + '.dat', 'wb') as f:\n        pickle.dump(page_link, f)\n    return pages\n\ndef link_out(host, page):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.url FROM link LEFT '\n                          'JOIN url ON url.id=link.target WHERE source IN '\n                          '(SELECT id FROM url WHERE host=? AND page=?)', (host, page))\n    return [i[0] for i in result]\n\ndef link_in(host, page):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.url FROM link LEFT '\n                          'JOIN url ON url.id=link.source WHERE target IN '\n                          '(SELECT id FROM url WHERE host=? AND page=?)', (host, page))\n    return [i[0] for i in result]\n\ndef link_out_count(host):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.host,count(*) FROM link LEFT '\n                          'JOIN url ON url.id=link.target WHERE source IN '\n                          '(SELECT id FROM url WHERE host=?) GROUP BY url.host', (host,))\n    return list(result)\n\ndef link_in_count(host):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.host,count(*) FROM link LEFT '\n                          'JOIN url ON url.id=link.source WHERE target IN '\n                          '(SELECT id FROM url WHERE host=?) GROUP BY url.host', (host,))\n    return list(result)\n[/python]","source":"_posts/e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s110-ef-bc-9a-e7-bd-91-e7-ab-99-e9-93-be-e6-8e-a5-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89.md","raw":"---\ntitle: ' 数据分析S110：网站链接分析（一）'\ntags:\n  - python\n  - 数据分析\nid: 129\ncategories:\n  - python\ndate: 2015-04-24 09:37:49\n---\n\n这是网站链接分析的第一期，这一次的首要目的是从excle文件中提取出页面及页面之间的链接，其次就是完成初步的信息提取，即找出指定页面的链入链出情况，以及分析网站的链入链出。\n[python]\n__author__ = 'sail'\ndb_filename = r'resource/link.db'\nschema_filename = r'link.sql'\nimport sqlite3\n\ndef read_data():\n    import os\n    import pickle\n    from multiprocessing import Pool\n\n    # 建立数据库及数据库，创建临时文件夹\n    conn = sqlite3.connect(db_filename)\n    print('Creating schema')\n    with open(schema_filename, 'rt') as f:\n        schema = f.read()\n    conn.executescript(schema)\n    if not os.path.exists(r&quot;resource/temp&quot;):\n        os.makedirs(r&quot;resource/temp&quot;)\n\n    #开启多进程读取excle文件，具体业务在__read_excle中\n    pool = Pool(processes=os.cpu_count())\n    results = pool.map(__read_excle, [(r'resource/linkdata/' + i, i) for i in os.listdir(r'resource/linkdata/')])\n    pool.close()\n    pool.join()\n\n    #合并各进程返回的页面集，并插入数据库中\n    pages = set()\n    for i in results:\n        pages.update(i)\n    conn.executemany(r'INSERT INTO url(host,page,url) VALUES (?,?,?)',\n                     (i.split(r'//')[1][:-1].split(r'/', 1) + [i] for i in pages))\n    conn.commit()\n\n    #取出url与id的对应关系\n    result = conn.execute(r'SELECT id,url FROM url')\n    page_map = {}\n    for i in result:\n        page_map[i[1]] = i[0]\n\n    #用取出的对应关系，将临时文件中的url指向转译为id指向后存入数据库\n    for parent, dirnames, filenames in os.walk(r'resource/temp'):\n        for i in filenames:\n            with open(parent + r'/' + i, 'rb') as f:\n                page_link = pickle.load(f)\n            os.remove(parent + r'/' + i)\n            conn.executemany(r'INSERT INTO link(source,target) VALUES (?,?)',\n                             [(page_map[source], page_map[target]) for source in page_link for target in\n                              page_link[source]])\n    conn.commit()\n    conn.close()\n\ndef __read_excle(file):\n    import xlrd\n    import pickle\n\n    pages = set()\n    page_link = {}\n    table = xlrd.open_workbook(file[0]).sheets()[0]\n    for j in range(table.nrows):\n        row = table.row_values(j)\n        url = row[1]\n        pages.add(url)\n        page_link[url] = [i[1:-1] for i in row[2][1:-1].split(', ')]\n        for k in page_link[url]:\n            pages.add(k)\n    with open(r'resource/temp/' + file[1] + '.dat', 'wb') as f:\n        pickle.dump(page_link, f)\n    return pages\n\ndef link_out(host, page):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.url FROM link LEFT '\n                          'JOIN url ON url.id=link.target WHERE source IN '\n                          '(SELECT id FROM url WHERE host=? AND page=?)', (host, page))\n    return [i[0] for i in result]\n\ndef link_in(host, page):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.url FROM link LEFT '\n                          'JOIN url ON url.id=link.source WHERE target IN '\n                          '(SELECT id FROM url WHERE host=? AND page=?)', (host, page))\n    return [i[0] for i in result]\n\ndef link_out_count(host):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.host,count(*) FROM link LEFT '\n                          'JOIN url ON url.id=link.target WHERE source IN '\n                          '(SELECT id FROM url WHERE host=?) GROUP BY url.host', (host,))\n    return list(result)\n\ndef link_in_count(host):\n    conn = sqlite3.connect(db_filename)\n    result = conn.execute('SELECT url.host,count(*) FROM link LEFT '\n                          'JOIN url ON url.id=link.source WHERE target IN '\n                          '(SELECT id FROM url WHERE host=?) GROUP BY url.host', (host,))\n    return list(result)\n[/python]","slug":"e6-95-b0-e6-8d-ae-e5-88-86-e6-9e-90s110-ef-bc-9a-e7-bd-91-e7-ab-99-e9-93-be-e6-8e-a5-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89","published":1,"updated":"2016-05-06T02:34:31.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2o000zd0chuzq21adb","content":"<p>这是网站链接分析的第一期，这一次的首要目的是从excle文件中提取出页面及页面之间的链接，其次就是完成初步的信息提取，即找出指定页面的链入链出情况，以及分析网站的链入链出。<br>[python]<br><strong>author</strong> = ‘sail’<br>db_filename = r’resource/link.db’<br>schema_filename = r’link.sql’<br>import sqlite3</p>\n<p>def read_data():<br>    import os<br>    import pickle<br>    from multiprocessing import Pool</p>\n<pre><code># 建立数据库及数据库，创建临时文件夹\nconn = sqlite3.connect(db_filename)\nprint(&apos;Creating schema&apos;)\nwith open(schema_filename, &apos;rt&apos;) as f:\n    schema = f.read()\nconn.executescript(schema)\nif not os.path.exists(r&amp;quot;resource/temp&amp;quot;):\n    os.makedirs(r&amp;quot;resource/temp&amp;quot;)\n\n#开启多进程读取excle文件，具体业务在__read_excle中\npool = Pool(processes=os.cpu_count())\nresults = pool.map(__read_excle, [(r&apos;resource/linkdata/&apos; + i, i) for i in os.listdir(r&apos;resource/linkdata/&apos;)])\npool.close()\npool.join()\n\n#合并各进程返回的页面集，并插入数据库中\npages = set()\nfor i in results:\n    pages.update(i)\nconn.executemany(r&apos;INSERT INTO url(host,page,url) VALUES (?,?,?)&apos;,\n                 (i.split(r&apos;//&apos;)[1][:-1].split(r&apos;/&apos;, 1) + [i] for i in pages))\nconn.commit()\n\n#取出url与id的对应关系\nresult = conn.execute(r&apos;SELECT id,url FROM url&apos;)\npage_map = {}\nfor i in result:\n    page_map[i[1]] = i[0]\n\n#用取出的对应关系，将临时文件中的url指向转译为id指向后存入数据库\nfor parent, dirnames, filenames in os.walk(r&apos;resource/temp&apos;):\n    for i in filenames:\n        with open(parent + r&apos;/&apos; + i, &apos;rb&apos;) as f:\n            page_link = pickle.load(f)\n        os.remove(parent + r&apos;/&apos; + i)\n        conn.executemany(r&apos;INSERT INTO link(source,target) VALUES (?,?)&apos;,\n                         [(page_map[source], page_map[target]) for source in page_link for target in\n                          page_link[source]])\nconn.commit()\nconn.close()\n</code></pre><p>def __read_excle(file):<br>    import xlrd<br>    import pickle</p>\n<pre><code>pages = set()\npage_link = {}\ntable = xlrd.open_workbook(file[0]).sheets()[0]\nfor j in range(table.nrows):\n    row = table.row_values(j)\n    url = row[1]\n    pages.add(url)\n    page_link[url] = [i[1:-1] for i in row[2][1:-1].split(&apos;, &apos;)]\n    for k in page_link[url]:\n        pages.add(k)\nwith open(r&apos;resource/temp/&apos; + file[1] + &apos;.dat&apos;, &apos;wb&apos;) as f:\n    pickle.dump(page_link, f)\nreturn pages\n</code></pre><p>def link_out(host, page):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.url FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.target WHERE source IN ‘<br>                          ‘(SELECT id FROM url WHERE host=? AND page=?)’, (host, page))<br>    return [i[0] for i in result]</p>\n<p>def link_in(host, page):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.url FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.source WHERE target IN ‘<br>                          ‘(SELECT id FROM url WHERE host=? AND page=?)’, (host, page))<br>    return [i[0] for i in result]</p>\n<p>def link_out_count(host):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.host,count(*) FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.target WHERE source IN ‘<br>                          ‘(SELECT id FROM url WHERE host=?) GROUP BY url.host’, (host,))<br>    return list(result)</p>\n<p>def link_in_count(host):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.host,count(*) FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.source WHERE target IN ‘<br>                          ‘(SELECT id FROM url WHERE host=?) GROUP BY url.host’, (host,))<br>    return list(result)<br>[/python]</p>\n","excerpt":"","more":"<p>这是网站链接分析的第一期，这一次的首要目的是从excle文件中提取出页面及页面之间的链接，其次就是完成初步的信息提取，即找出指定页面的链入链出情况，以及分析网站的链入链出。<br>[python]<br><strong>author</strong> = ‘sail’<br>db_filename = r’resource/link.db’<br>schema_filename = r’link.sql’<br>import sqlite3</p>\n<p>def read_data():<br>    import os<br>    import pickle<br>    from multiprocessing import Pool</p>\n<pre><code># 建立数据库及数据库，创建临时文件夹\nconn = sqlite3.connect(db_filename)\nprint(&apos;Creating schema&apos;)\nwith open(schema_filename, &apos;rt&apos;) as f:\n    schema = f.read()\nconn.executescript(schema)\nif not os.path.exists(r&amp;quot;resource/temp&amp;quot;):\n    os.makedirs(r&amp;quot;resource/temp&amp;quot;)\n\n#开启多进程读取excle文件，具体业务在__read_excle中\npool = Pool(processes=os.cpu_count())\nresults = pool.map(__read_excle, [(r&apos;resource/linkdata/&apos; + i, i) for i in os.listdir(r&apos;resource/linkdata/&apos;)])\npool.close()\npool.join()\n\n#合并各进程返回的页面集，并插入数据库中\npages = set()\nfor i in results:\n    pages.update(i)\nconn.executemany(r&apos;INSERT INTO url(host,page,url) VALUES (?,?,?)&apos;,\n                 (i.split(r&apos;//&apos;)[1][:-1].split(r&apos;/&apos;, 1) + [i] for i in pages))\nconn.commit()\n\n#取出url与id的对应关系\nresult = conn.execute(r&apos;SELECT id,url FROM url&apos;)\npage_map = {}\nfor i in result:\n    page_map[i[1]] = i[0]\n\n#用取出的对应关系，将临时文件中的url指向转译为id指向后存入数据库\nfor parent, dirnames, filenames in os.walk(r&apos;resource/temp&apos;):\n    for i in filenames:\n        with open(parent + r&apos;/&apos; + i, &apos;rb&apos;) as f:\n            page_link = pickle.load(f)\n        os.remove(parent + r&apos;/&apos; + i)\n        conn.executemany(r&apos;INSERT INTO link(source,target) VALUES (?,?)&apos;,\n                         [(page_map[source], page_map[target]) for source in page_link for target in\n                          page_link[source]])\nconn.commit()\nconn.close()\n</code></pre><p>def __read_excle(file):<br>    import xlrd<br>    import pickle</p>\n<pre><code>pages = set()\npage_link = {}\ntable = xlrd.open_workbook(file[0]).sheets()[0]\nfor j in range(table.nrows):\n    row = table.row_values(j)\n    url = row[1]\n    pages.add(url)\n    page_link[url] = [i[1:-1] for i in row[2][1:-1].split(&apos;, &apos;)]\n    for k in page_link[url]:\n        pages.add(k)\nwith open(r&apos;resource/temp/&apos; + file[1] + &apos;.dat&apos;, &apos;wb&apos;) as f:\n    pickle.dump(page_link, f)\nreturn pages\n</code></pre><p>def link_out(host, page):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.url FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.target WHERE source IN ‘<br>                          ‘(SELECT id FROM url WHERE host=? AND page=?)’, (host, page))<br>    return [i[0] for i in result]</p>\n<p>def link_in(host, page):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.url FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.source WHERE target IN ‘<br>                          ‘(SELECT id FROM url WHERE host=? AND page=?)’, (host, page))<br>    return [i[0] for i in result]</p>\n<p>def link_out_count(host):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.host,count(*) FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.target WHERE source IN ‘<br>                          ‘(SELECT id FROM url WHERE host=?) GROUP BY url.host’, (host,))<br>    return list(result)</p>\n<p>def link_in_count(host):<br>    conn = sqlite3.connect(db_filename)<br>    result = conn.execute(‘SELECT url.host,count(*) FROM link LEFT ‘<br>                          ‘JOIN url ON url.id=link.source WHERE target IN ‘<br>                          ‘(SELECT id FROM url WHERE host=?) GROUP BY url.host’, (host,))<br>    return list(result)<br>[/python]</p>\n"},{"title":"解决部分jquery插件渲染时删除原标签带来的事件失效和jquery对象丢失","id":"142","date":"2015-05-06T13:47:28.000Z","_content":"\njQuery插件在渲染控件的过程中进程会需要用新的标签来代替初始标签，有写插件会将原标签隐藏同时将事件和函数都绑定在原标签上来保证渲染之前的jquery对象依然有效 ，并且绑定的事件不丢失。\n但是，有些插件则会选择将原标标签删除后，把id等必要信息复制入新标签中，在这个过程中，所有指向原标签的jquery对象会全部失效，同时如果插件没有进行处理的话原标签的class和绑定的事件也会丢失。所以需要进行一定的处理。\n\n处理分为两个函数，一个函数在渲染前提取数据，另一个在渲染后注入数据。调用方式如下：\n\n[javascript]\nvar _data = getData(jq);\njq.**** // 此处调用插件的渲染语句\nsetData(_data);\n}\n[/javascript]\n\ngetData返回一个obj包含了原始标签的包装对象，事件和class，如果有需要还可以继续添加。\nsetData第一句是用原始的选择器初始化一个jQuery对象获得新标签，然后用新jQuery对象中的dom替换老的，从而保证所有指向老jQuery对象的变量都会受到影响。注意，此处不能直接data.jq=$(data.jq.selector)，这样实际上是改变了data.jq的指向，原来的类数组并没有得到改变。\nsetData第二三句分别将之前提取出的事件和classes注入新标签中。\n[javascript]\nfunction getData(jq) {\n    return {\n        jq     : jq,\n        events : $._data(jq[0], 'events'),\n        classes: _.filter(jq.attr('class').split(' '), function (v) {\n            return _.startsWith(v,'dhc-');\n        }).join(' ')\n    };\n}\n\nfunction setData(data) {\n    data.jq[0] = $(data.jq.selector)[0];\n    $.extend($._data(data.jq[0], 'events'), data.events);\n    data.jq.addClass(data.classes);\n}\n[/javascript]","source":"_posts/e8-a7-a3-e5-86-b3-e9-83-a8-e5-88-86jquery-e6-8f-92-e4-bb-b6-e6-b8-b2-e6-9f-93-e6-97-b6-e5-88-a0-e9-99-a4-e5-8e-9f-e6-a0-87-e7-ad-be-e5-b8-a6-e6-9d-a5-e7-9a-84-e4-ba-8b-e4-bb-b6-e5-a4-b1-e6-95-88.md","raw":"---\ntitle: 解决部分jquery插件渲染时删除原标签带来的事件失效和jquery对象丢失\ntags:\n  - javaScript\n  - jQuery\nid: 142\ncategories:\n  - JavaScript\n  - 前端\ndate: 2015-05-06 21:47:28\n---\n\njQuery插件在渲染控件的过程中进程会需要用新的标签来代替初始标签，有写插件会将原标签隐藏同时将事件和函数都绑定在原标签上来保证渲染之前的jquery对象依然有效 ，并且绑定的事件不丢失。\n但是，有些插件则会选择将原标标签删除后，把id等必要信息复制入新标签中，在这个过程中，所有指向原标签的jquery对象会全部失效，同时如果插件没有进行处理的话原标签的class和绑定的事件也会丢失。所以需要进行一定的处理。\n\n处理分为两个函数，一个函数在渲染前提取数据，另一个在渲染后注入数据。调用方式如下：\n\n[javascript]\nvar _data = getData(jq);\njq.**** // 此处调用插件的渲染语句\nsetData(_data);\n}\n[/javascript]\n\ngetData返回一个obj包含了原始标签的包装对象，事件和class，如果有需要还可以继续添加。\nsetData第一句是用原始的选择器初始化一个jQuery对象获得新标签，然后用新jQuery对象中的dom替换老的，从而保证所有指向老jQuery对象的变量都会受到影响。注意，此处不能直接data.jq=$(data.jq.selector)，这样实际上是改变了data.jq的指向，原来的类数组并没有得到改变。\nsetData第二三句分别将之前提取出的事件和classes注入新标签中。\n[javascript]\nfunction getData(jq) {\n    return {\n        jq     : jq,\n        events : $._data(jq[0], 'events'),\n        classes: _.filter(jq.attr('class').split(' '), function (v) {\n            return _.startsWith(v,'dhc-');\n        }).join(' ')\n    };\n}\n\nfunction setData(data) {\n    data.jq[0] = $(data.jq.selector)[0];\n    $.extend($._data(data.jq[0], 'events'), data.events);\n    data.jq.addClass(data.classes);\n}\n[/javascript]","slug":"e8-a7-a3-e5-86-b3-e9-83-a8-e5-88-86jquery-e6-8f-92-e4-bb-b6-e6-b8-b2-e6-9f-93-e6-97-b6-e5-88-a0-e9-99-a4-e5-8e-9f-e6-a0-87-e7-ad-be-e5-b8-a6-e6-9d-a5-e7-9a-84-e4-ba-8b-e4-bb-b6-e5-a4-b1-e6-95-88","published":1,"updated":"2016-05-06T02:34:31.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2p0013d0ch9i7wz9l0","content":"<p>jQuery插件在渲染控件的过程中进程会需要用新的标签来代替初始标签，有写插件会将原标签隐藏同时将事件和函数都绑定在原标签上来保证渲染之前的jquery对象依然有效 ，并且绑定的事件不丢失。<br>但是，有些插件则会选择将原标标签删除后，把id等必要信息复制入新标签中，在这个过程中，所有指向原标签的jquery对象会全部失效，同时如果插件没有进行处理的话原标签的class和绑定的事件也会丢失。所以需要进行一定的处理。</p>\n<p>处理分为两个函数，一个函数在渲染前提取数据，另一个在渲染后注入数据。调用方式如下：</p>\n<p>[javascript]<br>var _data = getData(jq);<br>jq.<em>**</em> // 此处调用插件的渲染语句<br>setData(_data);<br>}<br>[/javascript]</p>\n<p>getData返回一个obj包含了原始标签的包装对象，事件和class，如果有需要还可以继续添加。<br>setData第一句是用原始的选择器初始化一个jQuery对象获得新标签，然后用新jQuery对象中的dom替换老的，从而保证所有指向老jQuery对象的变量都会受到影响。注意，此处不能直接data.jq=$(data.jq.selector)，这样实际上是改变了data.jq的指向，原来的类数组并没有得到改变。<br>setData第二三句分别将之前提取出的事件和classes注入新标签中。<br>[javascript]<br>function getData(jq) {<br>    return {<br>        jq     : jq,<br>        events : $.<em>data(jq[0], ‘events’),<br>        classes: </em>.filter(jq.attr(‘class’).split(‘ ‘), function (v) {<br>            return _.startsWith(v,’dhc-‘);<br>        }).join(‘ ‘)<br>    };<br>}</p>\n<p>function setData(data) {<br>    data.jq[0] = $(data.jq.selector)[0];<br>    $.extend($._data(data.jq[0], ‘events’), data.events);<br>    data.jq.addClass(data.classes);<br>}<br>[/javascript]</p>\n","excerpt":"","more":"<p>jQuery插件在渲染控件的过程中进程会需要用新的标签来代替初始标签，有写插件会将原标签隐藏同时将事件和函数都绑定在原标签上来保证渲染之前的jquery对象依然有效 ，并且绑定的事件不丢失。<br>但是，有些插件则会选择将原标标签删除后，把id等必要信息复制入新标签中，在这个过程中，所有指向原标签的jquery对象会全部失效，同时如果插件没有进行处理的话原标签的class和绑定的事件也会丢失。所以需要进行一定的处理。</p>\n<p>处理分为两个函数，一个函数在渲染前提取数据，另一个在渲染后注入数据。调用方式如下：</p>\n<p>[javascript]<br>var _data = getData(jq);<br>jq.<em>**</em> // 此处调用插件的渲染语句<br>setData(_data);<br>}<br>[/javascript]</p>\n<p>getData返回一个obj包含了原始标签的包装对象，事件和class，如果有需要还可以继续添加。<br>setData第一句是用原始的选择器初始化一个jQuery对象获得新标签，然后用新jQuery对象中的dom替换老的，从而保证所有指向老jQuery对象的变量都会受到影响。注意，此处不能直接data.jq=$(data.jq.selector)，这样实际上是改变了data.jq的指向，原来的类数组并没有得到改变。<br>setData第二三句分别将之前提取出的事件和classes注入新标签中。<br>[javascript]<br>function getData(jq) {<br>    return {<br>        jq     : jq,<br>        events : $.<em>data(jq[0], ‘events’),<br>        classes: </em>.filter(jq.attr(‘class’).split(‘ ‘), function (v) {<br>            return _.startsWith(v,’dhc-‘);<br>        }).join(‘ ‘)<br>    };<br>}</p>\n<p>function setData(data) {<br>    data.jq[0] = $(data.jq.selector)[0];<br>    $.extend($._data(data.jq[0], ‘events’), data.events);<br>    data.jq.addClass(data.classes);<br>}<br>[/javascript]</p>\n"},{"title":"easyui较低版本中validType无法接收对象参数","id":"84","date":"2015-03-11T09:34:08.000Z","_content":"\nvalidatebox即验证框，easyui中所有带验证功能的输入控件都是由此控件派生而成的。验证规则是通过使用 required 和 validType 特性来定义的。其中前者值为true或false，表示是否允许空值。后者则指定一条或多条验证规则，并给出对应验证规则所需要的自定义参数。\nvalidatebox共有三种方式指定validType，分别为字符串，字符串数组和object。官网的介绍和例子如下：\n> Defines the field valid type, such as email, url, etc. Possible values are:\r> \n> 1) a valid type string, apply a single validate rule.\r> \n> 2) a valid type array, apply multiple validate rules. The multiple validate rules on a field are available since version 1.3.2.\r> \n> 3) a key/value pairs, the key is the validing type name, the value is an array consisting validating parameters.\n\n[html]\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;required:true,validType:'url'&quot;&gt;\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;\n\trequired:true,\n\tvalidType:['email','length[0,20]']\n&quot;&gt;\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;\n\trequired:true,\n\tvalidType:{\n\t\tlength:[10,30],\n\t\tremote:['http://.../action.do','paramName']\n\t}\n&quot;&gt;\n[/html]\n\n其中，第三种方式较前两种有极大的改进，前两种方式只能以字符串方式传递自定义参数，即**[10,30]**部分。而第三种方式可以在参数数组中传递任意对象，包括function对象。因而可以轻松地完成回调而不需要通过toSource或直接以字符串形式写function。同时，可以实现闭包的功能。相较前两种灵活性要高得多。\n但是，第三种方式在1.3.5版本中是无效的。我测试了在js中指定validType以及在data-options中指定validType，结果都是无效。接下来查源代码，发现在源码中对validType类型进行判断，如果是string则按第一种处理，反之按第二种处理，根本没有第三种情况。\n\n[javascript]\nif (_19.validType) {\n    if (typeof _19.validType == &quot;string&quot;) {\n        if (!_1c(_19.validType)) {\n            return false;\n        }\n    } else {\n        for (var i = 0; i &lt; _19.validType.length; i++) {\n            if (!_1c(_19.validType[i])) {\n                return false;\n            }\n        }\n    }\n}\n[/javascript]\n\n<!--more-->\n补充，本来以为是bug或者官方忘了实现。后来我尝试去easyui官网下了最新的1.4.2版。然后发现，第三种是可以用的。看来这个功能也是后期版本新实现的，而官方忘了在文档上标注……\n新版本中的代码如下：\n[javascript]\nif ($.isArray(opts.validType)) {\n    for (var i = 0; i &lt; opts.validType.length; i++) {\n        if (!_45e(opts.validType[i])) {\n            return false;\n        }\n    }\n} else {\n    if (typeof opts.validType == &quot;string&quot;) {\n        if (!_45e(opts.validType)) {\n            return false;\n        }\n    } else {\n        for (var _465 in opts.validType) {\n            var _466 = opts.validType[_465];\n            if (!_45e(_465, _466)) {\n                return false;\n            }\n        }\n    }\n}\n[/javascript]","source":"_posts/easyui-validatebox-e7-9a-84-e7-ac-ac-e4-b8-89-e7-a7-8d-e6-8c-87-e5-ae-9avalidtype-e6-96-b9-e5-bc-8f-e6-97-a0-e6-95-88.md","raw":"---\ntitle: easyui较低版本中validType无法接收对象参数\nid: 84\ncategories:\n  - 未分类\ndate: 2015-03-11 17:34:08\ntags:\n---\n\nvalidatebox即验证框，easyui中所有带验证功能的输入控件都是由此控件派生而成的。验证规则是通过使用 required 和 validType 特性来定义的。其中前者值为true或false，表示是否允许空值。后者则指定一条或多条验证规则，并给出对应验证规则所需要的自定义参数。\nvalidatebox共有三种方式指定validType，分别为字符串，字符串数组和object。官网的介绍和例子如下：\n> Defines the field valid type, such as email, url, etc. Possible values are:\r> \n> 1) a valid type string, apply a single validate rule.\r> \n> 2) a valid type array, apply multiple validate rules. The multiple validate rules on a field are available since version 1.3.2.\r> \n> 3) a key/value pairs, the key is the validing type name, the value is an array consisting validating parameters.\n\n[html]\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;required:true,validType:'url'&quot;&gt;\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;\n\trequired:true,\n\tvalidType:['email','length[0,20]']\n&quot;&gt;\n&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;\n\trequired:true,\n\tvalidType:{\n\t\tlength:[10,30],\n\t\tremote:['http://.../action.do','paramName']\n\t}\n&quot;&gt;\n[/html]\n\n其中，第三种方式较前两种有极大的改进，前两种方式只能以字符串方式传递自定义参数，即**[10,30]**部分。而第三种方式可以在参数数组中传递任意对象，包括function对象。因而可以轻松地完成回调而不需要通过toSource或直接以字符串形式写function。同时，可以实现闭包的功能。相较前两种灵活性要高得多。\n但是，第三种方式在1.3.5版本中是无效的。我测试了在js中指定validType以及在data-options中指定validType，结果都是无效。接下来查源代码，发现在源码中对validType类型进行判断，如果是string则按第一种处理，反之按第二种处理，根本没有第三种情况。\n\n[javascript]\nif (_19.validType) {\n    if (typeof _19.validType == &quot;string&quot;) {\n        if (!_1c(_19.validType)) {\n            return false;\n        }\n    } else {\n        for (var i = 0; i &lt; _19.validType.length; i++) {\n            if (!_1c(_19.validType[i])) {\n                return false;\n            }\n        }\n    }\n}\n[/javascript]\n\n<!--more-->\n补充，本来以为是bug或者官方忘了实现。后来我尝试去easyui官网下了最新的1.4.2版。然后发现，第三种是可以用的。看来这个功能也是后期版本新实现的，而官方忘了在文档上标注……\n新版本中的代码如下：\n[javascript]\nif ($.isArray(opts.validType)) {\n    for (var i = 0; i &lt; opts.validType.length; i++) {\n        if (!_45e(opts.validType[i])) {\n            return false;\n        }\n    }\n} else {\n    if (typeof opts.validType == &quot;string&quot;) {\n        if (!_45e(opts.validType)) {\n            return false;\n        }\n    } else {\n        for (var _465 in opts.validType) {\n            var _466 = opts.validType[_465];\n            if (!_45e(_465, _466)) {\n                return false;\n            }\n        }\n    }\n}\n[/javascript]","slug":"easyui-validatebox-e7-9a-84-e7-ac-ac-e4-b8-89-e7-a7-8d-e6-8c-87-e5-ae-9avalidtype-e6-96-b9-e5-bc-8f-e6-97-a0-e6-95-88","published":1,"updated":"2016-05-06T02:34:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2v0016d0chf6ghiz4b","content":"<p>validatebox即验证框，easyui中所有带验证功能的输入控件都是由此控件派生而成的。验证规则是通过使用 required 和 validType 特性来定义的。其中前者值为true或false，表示是否允许空值。后者则指定一条或多条验证规则，并给出对应验证规则所需要的自定义参数。<br>validatebox共有三种方式指定validType，分别为字符串，字符串数组和object。官网的介绍和例子如下：</p>\n<blockquote>\n<p>Defines the field valid type, such as email, url, etc. Possible values are:</p>\n<p>1) a valid type string, apply a single validate rule.</p>\n<p>2) a valid type array, apply multiple validate rules. The multiple validate rules on a field are available since version 1.3.2.</p>\n<p>3) a key/value pairs, the key is the validing type name, the value is an array consisting validating parameters.</p>\n</blockquote>\n<p>[html]<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;required:true,validType:’url’&quot;&gt;<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;<br>    required:true,<br>    validType:[‘email’,’length[0,20]’]<br>&quot;&gt;<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;<br>    required:true,<br>    validType:{<br>        length:[10,30],<br>        remote:[‘<a href=\"http://.../action.do&#39;,&#39;paramName\" target=\"_blank\" rel=\"external\">http://.../action.do&#39;,&#39;paramName</a>‘]<br>    }<br>&quot;&gt;<br>[/html]</p>\n<p>其中，第三种方式较前两种有极大的改进，前两种方式只能以字符串方式传递自定义参数，即<strong>[10,30]</strong>部分。而第三种方式可以在参数数组中传递任意对象，包括function对象。因而可以轻松地完成回调而不需要通过toSource或直接以字符串形式写function。同时，可以实现闭包的功能。相较前两种灵活性要高得多。<br>但是，第三种方式在1.3.5版本中是无效的。我测试了在js中指定validType以及在data-options中指定validType，结果都是无效。接下来查源代码，发现在源码中对validType类型进行判断，如果是string则按第一种处理，反之按第二种处理，根本没有第三种情况。</p>\n<p>[javascript]<br>if (_19.validType) {<br>    if (typeof _19.validType == &quot;string&quot;) {<br>        if (!_1c(_19.validType)) {<br>            return false;<br>        }<br>    } else {<br>        for (var i = 0; i &lt; _19.validType.length; i++) {<br>            if (!_1c(_19.validType[i])) {<br>                return false;<br>            }<br>        }<br>    }<br>}<br>[/javascript]</p>\n<a id=\"more\"></a>\n<p>补充，本来以为是bug或者官方忘了实现。后来我尝试去easyui官网下了最新的1.4.2版。然后发现，第三种是可以用的。看来这个功能也是后期版本新实现的，而官方忘了在文档上标注……<br>新版本中的代码如下：<br>[javascript]<br>if ($.isArray(opts.validType)) {<br>    for (var i = 0; i &lt; opts.validType.length; i++) {<br>        if (!_45e(opts.validType[i])) {<br>            return false;<br>        }<br>    }<br>} else {<br>    if (typeof opts.validType == &quot;string&quot;) {<br>        if (!_45e(opts.validType)) {<br>            return false;<br>        }<br>    } else {<br>        for (var _465 in opts.validType) {<br>            var _466 = opts.validType[_465];<br>            if (!_45e(_465, _466)) {<br>                return false;<br>            }<br>        }<br>    }<br>}<br>[/javascript]</p>\n","excerpt":"<p>validatebox即验证框，easyui中所有带验证功能的输入控件都是由此控件派生而成的。验证规则是通过使用 required 和 validType 特性来定义的。其中前者值为true或false，表示是否允许空值。后者则指定一条或多条验证规则，并给出对应验证规则所需要的自定义参数。<br>validatebox共有三种方式指定validType，分别为字符串，字符串数组和object。官网的介绍和例子如下：</p>\n<blockquote>\n<p>Defines the field valid type, such as email, url, etc. Possible values are:</p>\n<p>1) a valid type string, apply a single validate rule.</p>\n<p>2) a valid type array, apply multiple validate rules. The multiple validate rules on a field are available since version 1.3.2.</p>\n<p>3) a key/value pairs, the key is the validing type name, the value is an array consisting validating parameters.</p>\n</blockquote>\n<p>[html]<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;required:true,validType:’url’&quot;&gt;<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;<br>    required:true,<br>    validType:[‘email’,’length[0,20]’]<br>&quot;&gt;<br>&lt;input class=&quot;easyui-validatebox&quot; data-options=&quot;<br>    required:true,<br>    validType:{<br>        length:[10,30],<br>        remote:[‘<a href=\"http://.../action.do&#39;,&#39;paramName\">http://.../action.do&#39;,&#39;paramName</a>‘]<br>    }<br>&quot;&gt;<br>[/html]</p>\n<p>其中，第三种方式较前两种有极大的改进，前两种方式只能以字符串方式传递自定义参数，即<strong>[10,30]</strong>部分。而第三种方式可以在参数数组中传递任意对象，包括function对象。因而可以轻松地完成回调而不需要通过toSource或直接以字符串形式写function。同时，可以实现闭包的功能。相较前两种灵活性要高得多。<br>但是，第三种方式在1.3.5版本中是无效的。我测试了在js中指定validType以及在data-options中指定validType，结果都是无效。接下来查源代码，发现在源码中对validType类型进行判断，如果是string则按第一种处理，反之按第二种处理，根本没有第三种情况。</p>\n<p>[javascript]<br>if (_19.validType) {<br>    if (typeof _19.validType == &quot;string&quot;) {<br>        if (!_1c(_19.validType)) {<br>            return false;<br>        }<br>    } else {<br>        for (var i = 0; i &lt; _19.validType.length; i++) {<br>            if (!_1c(_19.validType[i])) {<br>                return false;<br>            }<br>        }<br>    }<br>}<br>[/javascript]</p>","more":"<p>补充，本来以为是bug或者官方忘了实现。后来我尝试去easyui官网下了最新的1.4.2版。然后发现，第三种是可以用的。看来这个功能也是后期版本新实现的，而官方忘了在文档上标注……<br>新版本中的代码如下：<br>[javascript]<br>if ($.isArray(opts.validType)) {<br>    for (var i = 0; i &lt; opts.validType.length; i++) {<br>        if (!_45e(opts.validType[i])) {<br>            return false;<br>        }<br>    }<br>} else {<br>    if (typeof opts.validType == &quot;string&quot;) {<br>        if (!_45e(opts.validType)) {<br>            return false;<br>        }<br>    } else {<br>        for (var _465 in opts.validType) {<br>            var _466 = opts.validType[_465];<br>            if (!_45e(_465, _466)) {<br>                return false;<br>            }<br>        }<br>    }<br>}<br>[/javascript]</p>"},{"title":"EasyUI-window组件中包含iframe可能引发重复请求和jquery异常","id":"67","date":"2015-01-06T10:33:47.000Z","_content":"\n准备工作：在A页面中引入jquery，下面放一个easyui的window，在window中包含一个iframe，src指向B页面。B页面只需要引入jquery即可。\n[html]\n &lt;div id=&quot;win&quot; class=&quot;easyui-window&quot;&gt;\n\t&lt;iframe src='……'&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n[/html]\n\n我分别用Firefox Dev Edition 36.0a2,chrome 39.0.2171.95 m,IE 11.0.15进行了测试。其中ff和chrome正常，ie在jquery初始化过程中发生异常，无法完成初始化，子页面中无法调用jquery。\n对dom树进行分析发现包含iframe标签的div已经被移动到新的位置上，因此怀疑easyui在初始化window的过程中对dom树的操作导致iframe初始化异常。于是查看网络请求，发现在ff中对B页面发起了两次请求，并且全部完成。chrome中对B页面发起了三次请求但其中两次被取消，ie中对B页面发起三次请求并且全部成功。可见easyui控件在初始化的过程中是会导致内部的iframe重复加载。\n解决方案是将iframe中的src改为data-src，然后在easyui初始化完成后调用$('#frame').attr('src', $('#frame').data('src'))来实现延迟加载即可避免子页面出错。","source":"_posts/easyui-window-e7-bb-84-e4-bb-b6-e4-b8-ad-e5-8c-85-e5-90-abiframe-e5-8f-af-e8-83-bd-e5-bc-95-e5-8f-91-e9-87-8d-e5-a4-8d-e8-af-b7-e6-b1-82-e5-92-8cjquery-e5-bc-82-e5-b8-b8.md","raw":"---\ntitle: EasyUI-window组件中包含iframe可能引发重复请求和jquery异常\nid: 67\ncategories:\n  - 未分类\ndate: 2015-01-06 18:33:47\ntags:\n---\n\n准备工作：在A页面中引入jquery，下面放一个easyui的window，在window中包含一个iframe，src指向B页面。B页面只需要引入jquery即可。\n[html]\n &lt;div id=&quot;win&quot; class=&quot;easyui-window&quot;&gt;\n\t&lt;iframe src='……'&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n[/html]\n\n我分别用Firefox Dev Edition 36.0a2,chrome 39.0.2171.95 m,IE 11.0.15进行了测试。其中ff和chrome正常，ie在jquery初始化过程中发生异常，无法完成初始化，子页面中无法调用jquery。\n对dom树进行分析发现包含iframe标签的div已经被移动到新的位置上，因此怀疑easyui在初始化window的过程中对dom树的操作导致iframe初始化异常。于是查看网络请求，发现在ff中对B页面发起了两次请求，并且全部完成。chrome中对B页面发起了三次请求但其中两次被取消，ie中对B页面发起三次请求并且全部成功。可见easyui控件在初始化的过程中是会导致内部的iframe重复加载。\n解决方案是将iframe中的src改为data-src，然后在easyui初始化完成后调用$('#frame').attr('src', $('#frame').data('src'))来实现延迟加载即可避免子页面出错。","slug":"easyui-window-e7-bb-84-e4-bb-b6-e4-b8-ad-e5-8c-85-e5-90-abiframe-e5-8f-af-e8-83-bd-e5-bc-95-e5-8f-91-e9-87-8d-e5-a4-8d-e8-af-b7-e6-b1-82-e5-92-8cjquery-e5-bc-82-e5-b8-b8","published":1,"updated":"2016-05-06T02:34:31.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2y001ad0chfut7z0l8","content":"<p>准备工作：在A页面中引入jquery，下面放一个easyui的window，在window中包含一个iframe，src指向B页面。B页面只需要引入jquery即可。<br>[html]<br> &lt;div id=&quot;win&quot; class=&quot;easyui-window&quot;&gt;<br>    &lt;iframe src=’……’&gt;&lt;/iframe&gt;<br>&lt;/div&gt;<br>[/html]</p>\n<p>我分别用Firefox Dev Edition 36.0a2,chrome 39.0.2171.95 m,IE 11.0.15进行了测试。其中ff和chrome正常，ie在jquery初始化过程中发生异常，无法完成初始化，子页面中无法调用jquery。<br>对dom树进行分析发现包含iframe标签的div已经被移动到新的位置上，因此怀疑easyui在初始化window的过程中对dom树的操作导致iframe初始化异常。于是查看网络请求，发现在ff中对B页面发起了两次请求，并且全部完成。chrome中对B页面发起了三次请求但其中两次被取消，ie中对B页面发起三次请求并且全部成功。可见easyui控件在初始化的过程中是会导致内部的iframe重复加载。<br>解决方案是将iframe中的src改为data-src，然后在easyui初始化完成后调用$(‘#frame’).attr(‘src’, $(‘#frame’).data(‘src’))来实现延迟加载即可避免子页面出错。</p>\n","excerpt":"","more":"<p>准备工作：在A页面中引入jquery，下面放一个easyui的window，在window中包含一个iframe，src指向B页面。B页面只需要引入jquery即可。<br>[html]<br> &lt;div id=&quot;win&quot; class=&quot;easyui-window&quot;&gt;<br>    &lt;iframe src=’……’&gt;&lt;/iframe&gt;<br>&lt;/div&gt;<br>[/html]</p>\n<p>我分别用Firefox Dev Edition 36.0a2,chrome 39.0.2171.95 m,IE 11.0.15进行了测试。其中ff和chrome正常，ie在jquery初始化过程中发生异常，无法完成初始化，子页面中无法调用jquery。<br>对dom树进行分析发现包含iframe标签的div已经被移动到新的位置上，因此怀疑easyui在初始化window的过程中对dom树的操作导致iframe初始化异常。于是查看网络请求，发现在ff中对B页面发起了两次请求，并且全部完成。chrome中对B页面发起了三次请求但其中两次被取消，ie中对B页面发起三次请求并且全部成功。可见easyui控件在初始化的过程中是会导致内部的iframe重复加载。<br>解决方案是将iframe中的src改为data-src，然后在easyui初始化完成后调用$(‘#frame’).attr(‘src’, $(‘#frame’).data(‘src’))来实现延迟加载即可避免子页面出错。</p>\n"},{"title":"根据Request获取客户端IP","id":"72","date":"2015-02-05T08:50:47.000Z","_content":"\n在java里，获取客户端的IP地址的方法是：request.getRemoteAddr() ，这种方法在大部分情况下都是有效的。但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。\n如果使用了反向代理软件，将http://192.168.1.110:2046/ 的URL反向代理为http://www.xxx.com/ 的URL时，用request.getRemoteAddr() 方法获取的IP地址是：127.0.0.1　或　192.168.1.110 ，而并不是客户端的真实ＩＰ。\n经过代理以后，由于在客户端和服务之间增加了中间层，因此服务器无法直接拿到客户端的IP，服务器端应用也无法直接通过转发请求的地址返回给客户端。但是在转发请求的HTTP头信息中，增加了X－FORWARDED－FOR信息。用以跟踪原有的客户端IP地址和原来客户端请求的服务器地址。当我们访问http://www.xxx.com/index.jsp/ 时，其实并不是我们浏览器真正访问到了服务器上的index.jsp文件，而是先由代理服务器去访问http://192.168.1.110:2046/index.jsp ，代理服务器再将访问到的结果返回给我们的浏览器，因为是代理服务器去访问index.jsp的，所以index.jsp中通过request.getRemoteAddr() 的方法获取的IP实际上是代理服务器的地址，并不是客户端的IP地址。\n于是可得出获得客户端真实IP地址的方法一：\n\n[java]\npublic String getRemortIP(HttpServletRequest request) {\n  if (request.getHeader(&quot;x-forwarded-for&quot;) == null) {\n   return request.getRemoteAddr();\n  }\n  return request.getHeader(&quot;x-forwarded-for&quot;);\n}\n[/java]\n\n可是当我访问http://www.xxx.com/index.jsp/ 时，返回的IP地址始终是unknown，也并不是如上所示的127.0.0.1　或　192.168.1.110 了，而我访问http://192.168.1.110:2046/index.jsp 时，则能返回客户端的真实IP地址，写了个方法去验证。原因出在了Squid上。squid.conf 的配制文件　forwarded_for 项默认是为on，如果 forwarded_for 设成了 off 　则：X-Forwarded-For: unknown\n于是可得出获得客户端真实IP地址的方法二：\n\n[java]\npublic String getRemoteHost(javax.servlet.http.HttpServletRequest request){\n    String ip = request.getHeader(&quot;x-forwarded-for&quot;);\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getHeader(&quot;Proxy-Client-IP&quot;);\n    }\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);\n    }\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getRemoteAddr();\n    }\n    return ip.equals(&quot;0:0:0:0:0:0:0:1&quot;)?&quot;127.0.0.1&quot;:ip;\n}\n[/java]","source":"_posts/e6-a0-b9-e6-8d-aerequest-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip.md","raw":"---\ntitle: 根据Request获取客户端IP\ntags:\n  - ip\n  - j2ee\n  - java\nid: 72\ncategories:\n  - java\ndate: 2015-02-05 16:50:47\n---\n\n在java里，获取客户端的IP地址的方法是：request.getRemoteAddr() ，这种方法在大部分情况下都是有效的。但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。\n如果使用了反向代理软件，将http://192.168.1.110:2046/ 的URL反向代理为http://www.xxx.com/ 的URL时，用request.getRemoteAddr() 方法获取的IP地址是：127.0.0.1　或　192.168.1.110 ，而并不是客户端的真实ＩＰ。\n经过代理以后，由于在客户端和服务之间增加了中间层，因此服务器无法直接拿到客户端的IP，服务器端应用也无法直接通过转发请求的地址返回给客户端。但是在转发请求的HTTP头信息中，增加了X－FORWARDED－FOR信息。用以跟踪原有的客户端IP地址和原来客户端请求的服务器地址。当我们访问http://www.xxx.com/index.jsp/ 时，其实并不是我们浏览器真正访问到了服务器上的index.jsp文件，而是先由代理服务器去访问http://192.168.1.110:2046/index.jsp ，代理服务器再将访问到的结果返回给我们的浏览器，因为是代理服务器去访问index.jsp的，所以index.jsp中通过request.getRemoteAddr() 的方法获取的IP实际上是代理服务器的地址，并不是客户端的IP地址。\n于是可得出获得客户端真实IP地址的方法一：\n\n[java]\npublic String getRemortIP(HttpServletRequest request) {\n  if (request.getHeader(&quot;x-forwarded-for&quot;) == null) {\n   return request.getRemoteAddr();\n  }\n  return request.getHeader(&quot;x-forwarded-for&quot;);\n}\n[/java]\n\n可是当我访问http://www.xxx.com/index.jsp/ 时，返回的IP地址始终是unknown，也并不是如上所示的127.0.0.1　或　192.168.1.110 了，而我访问http://192.168.1.110:2046/index.jsp 时，则能返回客户端的真实IP地址，写了个方法去验证。原因出在了Squid上。squid.conf 的配制文件　forwarded_for 项默认是为on，如果 forwarded_for 设成了 off 　则：X-Forwarded-For: unknown\n于是可得出获得客户端真实IP地址的方法二：\n\n[java]\npublic String getRemoteHost(javax.servlet.http.HttpServletRequest request){\n    String ip = request.getHeader(&quot;x-forwarded-for&quot;);\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getHeader(&quot;Proxy-Client-IP&quot;);\n    }\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);\n    }\n    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){\n        ip = request.getRemoteAddr();\n    }\n    return ip.equals(&quot;0:0:0:0:0:0:0:1&quot;)?&quot;127.0.0.1&quot;:ip;\n}\n[/java]","slug":"e6-a0-b9-e6-8d-aerequest-e8-8e-b7-e5-8f-96-e5-ae-a2-e6-88-b7-e7-ab-afip","published":1,"updated":"2016-05-06T02:34:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z2z001ed0chn92cdfq9","content":"<p>在java里，获取客户端的IP地址的方法是：request.getRemoteAddr() ，这种方法在大部分情况下都是有效的。但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。<br>如果使用了反向代理软件，将<a href=\"http://192.168.1.110:2046/\" target=\"_blank\" rel=\"external\">http://192.168.1.110:2046/</a> 的URL反向代理为<a href=\"http://www.xxx.com/\" target=\"_blank\" rel=\"external\">http://www.xxx.com/</a> 的URL时，用request.getRemoteAddr() 方法获取的IP地址是：127.0.0.1　或　192.168.1.110 ，而并不是客户端的真实ＩＰ。<br>经过代理以后，由于在客户端和服务之间增加了中间层，因此服务器无法直接拿到客户端的IP，服务器端应用也无法直接通过转发请求的地址返回给客户端。但是在转发请求的HTTP头信息中，增加了X－FORWARDED－FOR信息。用以跟踪原有的客户端IP地址和原来客户端请求的服务器地址。当我们访问<a href=\"http://www.xxx.com/index.jsp/\" target=\"_blank\" rel=\"external\">http://www.xxx.com/index.jsp/</a> 时，其实并不是我们浏览器真正访问到了服务器上的index.jsp文件，而是先由代理服务器去访问<a href=\"http://192.168.1.110:2046/index.jsp\" target=\"_blank\" rel=\"external\">http://192.168.1.110:2046/index.jsp</a> ，代理服务器再将访问到的结果返回给我们的浏览器，因为是代理服务器去访问index.jsp的，所以index.jsp中通过request.getRemoteAddr() 的方法获取的IP实际上是代理服务器的地址，并不是客户端的IP地址。<br>于是可得出获得客户端真实IP地址的方法一：</p>\n<p>[java]<br>public String getRemortIP(HttpServletRequest request) {<br>  if (request.getHeader(&quot;x-forwarded-for&quot;) == null) {<br>   return request.getRemoteAddr();<br>  }<br>  return request.getHeader(&quot;x-forwarded-for&quot;);<br>}<br>[/java]</p>\n<p>可是当我访问<a href=\"http://www.xxx.com/index.jsp/\" target=\"_blank\" rel=\"external\">http://www.xxx.com/index.jsp/</a> 时，返回的IP地址始终是unknown，也并不是如上所示的127.0.0.1　或　192.168.1.110 了，而我访问<a href=\"http://192.168.1.110:2046/index.jsp\" target=\"_blank\" rel=\"external\">http://192.168.1.110:2046/index.jsp</a> 时，则能返回客户端的真实IP地址，写了个方法去验证。原因出在了Squid上。squid.conf 的配制文件　forwarded_for 项默认是为on，如果 forwarded_for 设成了 off 　则：X-Forwarded-For: unknown<br>于是可得出获得客户端真实IP地址的方法二：</p>\n<p>[java]<br>public String getRemoteHost(javax.servlet.http.HttpServletRequest request){<br>    String ip = request.getHeader(&quot;x-forwarded-for&quot;);<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getHeader(&quot;Proxy-Client-IP&quot;);<br>    }<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);<br>    }<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getRemoteAddr();<br>    }<br>    return ip.equals(&quot;0:0:0:0:0:0:0:1&quot;)?&quot;127.0.0.1&quot;:ip;<br>}<br>[/java]</p>\n","excerpt":"","more":"<p>在java里，获取客户端的IP地址的方法是：request.getRemoteAddr() ，这种方法在大部分情况下都是有效的。但是在通过了Apache,Squid等反向代理软件就不能获取到客户端的真实IP地址了。<br>如果使用了反向代理软件，将<a href=\"http://192.168.1.110:2046/\">http://192.168.1.110:2046/</a> 的URL反向代理为<a href=\"http://www.xxx.com/\">http://www.xxx.com/</a> 的URL时，用request.getRemoteAddr() 方法获取的IP地址是：127.0.0.1　或　192.168.1.110 ，而并不是客户端的真实ＩＰ。<br>经过代理以后，由于在客户端和服务之间增加了中间层，因此服务器无法直接拿到客户端的IP，服务器端应用也无法直接通过转发请求的地址返回给客户端。但是在转发请求的HTTP头信息中，增加了X－FORWARDED－FOR信息。用以跟踪原有的客户端IP地址和原来客户端请求的服务器地址。当我们访问<a href=\"http://www.xxx.com/index.jsp/\">http://www.xxx.com/index.jsp/</a> 时，其实并不是我们浏览器真正访问到了服务器上的index.jsp文件，而是先由代理服务器去访问<a href=\"http://192.168.1.110:2046/index.jsp\">http://192.168.1.110:2046/index.jsp</a> ，代理服务器再将访问到的结果返回给我们的浏览器，因为是代理服务器去访问index.jsp的，所以index.jsp中通过request.getRemoteAddr() 的方法获取的IP实际上是代理服务器的地址，并不是客户端的IP地址。<br>于是可得出获得客户端真实IP地址的方法一：</p>\n<p>[java]<br>public String getRemortIP(HttpServletRequest request) {<br>  if (request.getHeader(&quot;x-forwarded-for&quot;) == null) {<br>   return request.getRemoteAddr();<br>  }<br>  return request.getHeader(&quot;x-forwarded-for&quot;);<br>}<br>[/java]</p>\n<p>可是当我访问<a href=\"http://www.xxx.com/index.jsp/\">http://www.xxx.com/index.jsp/</a> 时，返回的IP地址始终是unknown，也并不是如上所示的127.0.0.1　或　192.168.1.110 了，而我访问<a href=\"http://192.168.1.110:2046/index.jsp\">http://192.168.1.110:2046/index.jsp</a> 时，则能返回客户端的真实IP地址，写了个方法去验证。原因出在了Squid上。squid.conf 的配制文件　forwarded_for 项默认是为on，如果 forwarded_for 设成了 off 　则：X-Forwarded-For: unknown<br>于是可得出获得客户端真实IP地址的方法二：</p>\n<p>[java]<br>public String getRemoteHost(javax.servlet.http.HttpServletRequest request){<br>    String ip = request.getHeader(&quot;x-forwarded-for&quot;);<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getHeader(&quot;Proxy-Client-IP&quot;);<br>    }<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);<br>    }<br>    if(ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)){<br>        ip = request.getRemoteAddr();<br>    }<br>    return ip.equals(&quot;0:0:0:0:0:0:0:1&quot;)?&quot;127.0.0.1&quot;:ip;<br>}<br>[/java]</p>\n"},{"title":"java8 lambda表达式体验","id":"124","date":"2015-04-16T13:16:25.000Z","_content":"\njava8在去年就发布了，其中包含了接口的默认实现，重复注解等许多新特性。其中，最令人关心的莫过于支持lambda表达式了。由于项目的历史问题，我没能在第一时间尝试java8所带来的lambda表达式。\n今天群里面有人提到需要把一个数组中所有只出现了一次的字符串去除，剩下的输出。这个过程用js或是python都能够很容易的完成，并且代码非常简短，但是如果用java的话就会变得比较复杂。所以我尝试了用lambda来进行简化。\n下面代码是首先将数组转化为stream后分组，然后通过values取得分组完毕的字符串。再转化为stream后通过filter筛去只出现过一次的字符串。此时得到的应该是一个双层的list，于是foreach两次对每个字符串使用println，打印输出。\n[java]\nString[] strings = {&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;d&quot;};\nStream.of(strings).collect(Collectors.groupingBy((x) -&gt; x)).values().stream().filter((x) -&gt; x.size() != 1).forEach((x) -&gt; x.forEach(System.out::println));\n[/java]","source":"_posts/java8-lambda-e8-a1-a8-e8-be-be-e5-bc-8f-e4-bd-93-e9-aa-8c.md","raw":"---\ntitle: java8 lambda表达式体验\ntags:\n  - java\nid: 124\ncategories:\n  - java\ndate: 2015-04-16 21:16:25\n---\n\njava8在去年就发布了，其中包含了接口的默认实现，重复注解等许多新特性。其中，最令人关心的莫过于支持lambda表达式了。由于项目的历史问题，我没能在第一时间尝试java8所带来的lambda表达式。\n今天群里面有人提到需要把一个数组中所有只出现了一次的字符串去除，剩下的输出。这个过程用js或是python都能够很容易的完成，并且代码非常简短，但是如果用java的话就会变得比较复杂。所以我尝试了用lambda来进行简化。\n下面代码是首先将数组转化为stream后分组，然后通过values取得分组完毕的字符串。再转化为stream后通过filter筛去只出现过一次的字符串。此时得到的应该是一个双层的list，于是foreach两次对每个字符串使用println，打印输出。\n[java]\nString[] strings = {&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;d&quot;};\nStream.of(strings).collect(Collectors.groupingBy((x) -&gt; x)).values().stream().filter((x) -&gt; x.size() != 1).forEach((x) -&gt; x.forEach(System.out::println));\n[/java]","slug":"java8-lambda-e8-a1-a8-e8-be-be-e5-bc-8f-e4-bd-93-e9-aa-8c","published":1,"updated":"2016-05-06T02:34:31.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z32001hd0chnrmyhs37","content":"<p>java8在去年就发布了，其中包含了接口的默认实现，重复注解等许多新特性。其中，最令人关心的莫过于支持lambda表达式了。由于项目的历史问题，我没能在第一时间尝试java8所带来的lambda表达式。<br>今天群里面有人提到需要把一个数组中所有只出现了一次的字符串去除，剩下的输出。这个过程用js或是python都能够很容易的完成，并且代码非常简短，但是如果用java的话就会变得比较复杂。所以我尝试了用lambda来进行简化。<br>下面代码是首先将数组转化为stream后分组，然后通过values取得分组完毕的字符串。再转化为stream后通过filter筛去只出现过一次的字符串。此时得到的应该是一个双层的list，于是foreach两次对每个字符串使用println，打印输出。<br>[java]<br>String[] strings = {&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;d&quot;};<br>Stream.of(strings).collect(Collectors.groupingBy((x) -&gt; x)).values().stream().filter((x) -&gt; x.size() != 1).forEach((x) -&gt; x.forEach(System.out::println));<br>[/java]</p>\n","excerpt":"","more":"<p>java8在去年就发布了，其中包含了接口的默认实现，重复注解等许多新特性。其中，最令人关心的莫过于支持lambda表达式了。由于项目的历史问题，我没能在第一时间尝试java8所带来的lambda表达式。<br>今天群里面有人提到需要把一个数组中所有只出现了一次的字符串去除，剩下的输出。这个过程用js或是python都能够很容易的完成，并且代码非常简短，但是如果用java的话就会变得比较复杂。所以我尝试了用lambda来进行简化。<br>下面代码是首先将数组转化为stream后分组，然后通过values取得分组完毕的字符串。再转化为stream后通过filter筛去只出现过一次的字符串。此时得到的应该是一个双层的list，于是foreach两次对每个字符串使用println，打印输出。<br>[java]<br>String[] strings = {&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;d&quot;};<br>Stream.of(strings).collect(Collectors.groupingBy((x) -&gt; x)).values().stream().filter((x) -&gt; x.size() != 1).forEach((x) -&gt; x.forEach(System.out::println));<br>[/java]</p>\n"},{"title":"JVM的编译时多态与类型擦除","id":"137","date":"2015-05-04T08:07:35.000Z","_content":"\n众所周知，java代码在编译过程中会进行类型擦除，类型擦除后泛型信息会丢失。可是，为什么在反射中还可以通过ParameterizedType的getActualTypeArguments方法来获得泛型信息呢。\n\n首先，按照网上的说法，下面这两句所生成的字节码应该是一样的。但事实上,可以发现，他们所生成的字节码是不同的，区别就在Signature和LocalVariableTable中,这里标明了泛型的实际类型。\n\n[java]\npublic static void print(Set&lt;Integer&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/Integer;&gt;\npublic static void print(Set&lt;String&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/String;&gt;\n[/java]\n\n看上去，泛型信息还在，可是为什么这两句放在一起会报错呢？\n\n因为java采用的是**编译时多态**。java代码在编译过程中会尝试匹配所有同名方法，并且找到唯一符合条件的方法，然后将其签名写入字节码中，通过其签名来调用该方法。因此**java中方法名可以相同，但是调用该方法的签名决不能相同**。\n在此例中上面两个方法生成的字节码虽然不同，但是在调用时所用的签名都是\"print:(Ljava/util/List;)V\"，因而无法区分这两个方法，所以不能多态。\n正是因为编译时多态这种编译时分析确定签名，运行时根据签名直接调用的方式。导致下面这两句是完全可以执行的，原因就是虽然实参与形参不一致，但是实参与形参在忽略泛型后是一样的。\n[java]\n// 注意，这仅仅是个例子，由于编译器的检查功能所以这两句是无法编译通过的。因此需要通过反射的方式来实现。\n// 当然，最简单的方式是将这两句分到两个类中用一些trick将两个class分别编译后直接运行，你可以发现代码是可以正常执行的，虽然直接编译它一定会报错。\nprint(new Set&lt;Integer&gt;());\npublic static void print(Set&lt;String&gt; c) { } \n[/java]\n\n由此可见，java中泛型擦除的确是存在的，运行时的基本可以认为泛型已经被完全擦除。但是，为什么ParameterizedType还是可以取得泛型信息呢？\n答案是**字节码**。要知道，反射与JVM正常的运行是不同的，反射可以直接分析字节码，而字节码中有该类的签名以及变量的签名，从而可以分析出类或变量的泛型信息。\n\n最后，通过查看字节码的反汇编结果可知以下情况中的泛型是可以通过反射获取的。\n1：函数返回值中的泛型\n2：函数参数中的泛型\n3：类的field中的泛型\n4：函数中局部变量的泛型「存于LocalVariableTypeTable中，仅用于调试，发布模式下不存在」","source":"_posts/jvm-e7-9a-84-e7-bc-96-e8-af-91-e6-97-b6-e5-a4-9a-e6-80-81-e4-b8-8e-e7-b1-bb-e5-9e-8b-e6-93-a6-e9-99-a4.md","raw":"---\ntitle: JVM的编译时多态与类型擦除\ntags:\n  - java\n  - JVM\nid: 137\ncategories:\n  - java\ndate: 2015-05-04 16:07:35\n---\n\n众所周知，java代码在编译过程中会进行类型擦除，类型擦除后泛型信息会丢失。可是，为什么在反射中还可以通过ParameterizedType的getActualTypeArguments方法来获得泛型信息呢。\n\n首先，按照网上的说法，下面这两句所生成的字节码应该是一样的。但事实上,可以发现，他们所生成的字节码是不同的，区别就在Signature和LocalVariableTable中,这里标明了泛型的实际类型。\n\n[java]\npublic static void print(Set&lt;Integer&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/Integer;&gt;\npublic static void print(Set&lt;String&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/String;&gt;\n[/java]\n\n看上去，泛型信息还在，可是为什么这两句放在一起会报错呢？\n\n因为java采用的是**编译时多态**。java代码在编译过程中会尝试匹配所有同名方法，并且找到唯一符合条件的方法，然后将其签名写入字节码中，通过其签名来调用该方法。因此**java中方法名可以相同，但是调用该方法的签名决不能相同**。\n在此例中上面两个方法生成的字节码虽然不同，但是在调用时所用的签名都是\"print:(Ljava/util/List;)V\"，因而无法区分这两个方法，所以不能多态。\n正是因为编译时多态这种编译时分析确定签名，运行时根据签名直接调用的方式。导致下面这两句是完全可以执行的，原因就是虽然实参与形参不一致，但是实参与形参在忽略泛型后是一样的。\n[java]\n// 注意，这仅仅是个例子，由于编译器的检查功能所以这两句是无法编译通过的。因此需要通过反射的方式来实现。\n// 当然，最简单的方式是将这两句分到两个类中用一些trick将两个class分别编译后直接运行，你可以发现代码是可以正常执行的，虽然直接编译它一定会报错。\nprint(new Set&lt;Integer&gt;());\npublic static void print(Set&lt;String&gt; c) { } \n[/java]\n\n由此可见，java中泛型擦除的确是存在的，运行时的基本可以认为泛型已经被完全擦除。但是，为什么ParameterizedType还是可以取得泛型信息呢？\n答案是**字节码**。要知道，反射与JVM正常的运行是不同的，反射可以直接分析字节码，而字节码中有该类的签名以及变量的签名，从而可以分析出类或变量的泛型信息。\n\n最后，通过查看字节码的反汇编结果可知以下情况中的泛型是可以通过反射获取的。\n1：函数返回值中的泛型\n2：函数参数中的泛型\n3：类的field中的泛型\n4：函数中局部变量的泛型「存于LocalVariableTypeTable中，仅用于调试，发布模式下不存在」","slug":"jvm-e7-9a-84-e7-bc-96-e8-af-91-e6-97-b6-e5-a4-9a-e6-80-81-e4-b8-8e-e7-b1-bb-e5-9e-8b-e6-93-a6-e9-99-a4","published":1,"updated":"2016-05-06T02:34:31.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z35001kd0ch2sxza1b5","content":"<p>众所周知，java代码在编译过程中会进行类型擦除，类型擦除后泛型信息会丢失。可是，为什么在反射中还可以通过ParameterizedType的getActualTypeArguments方法来获得泛型信息呢。</p>\n<p>首先，按照网上的说法，下面这两句所生成的字节码应该是一样的。但事实上,可以发现，他们所生成的字节码是不同的，区别就在Signature和LocalVariableTable中,这里标明了泛型的实际类型。</p>\n<p>[java]<br>public static void print(Set&lt;Integer&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/Integer;&gt;<br>public static void print(Set&lt;String&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/String;&gt;<br>[/java]</p>\n<p>看上去，泛型信息还在，可是为什么这两句放在一起会报错呢？</p>\n<p>因为java采用的是<strong>编译时多态</strong>。java代码在编译过程中会尝试匹配所有同名方法，并且找到唯一符合条件的方法，然后将其签名写入字节码中，通过其签名来调用该方法。因此<strong>java中方法名可以相同，但是调用该方法的签名决不能相同</strong>。<br>在此例中上面两个方法生成的字节码虽然不同，但是在调用时所用的签名都是”print:(Ljava/util/List;)V”，因而无法区分这两个方法，所以不能多态。<br>正是因为编译时多态这种编译时分析确定签名，运行时根据签名直接调用的方式。导致下面这两句是完全可以执行的，原因就是虽然实参与形参不一致，但是实参与形参在忽略泛型后是一样的。<br>[java]<br>// 注意，这仅仅是个例子，由于编译器的检查功能所以这两句是无法编译通过的。因此需要通过反射的方式来实现。<br>// 当然，最简单的方式是将这两句分到两个类中用一些trick将两个class分别编译后直接运行，你可以发现代码是可以正常执行的，虽然直接编译它一定会报错。<br>print(new Set&lt;Integer&gt;());<br>public static void print(Set&lt;String&gt; c) { }<br>[/java]</p>\n<p>由此可见，java中泛型擦除的确是存在的，运行时的基本可以认为泛型已经被完全擦除。但是，为什么ParameterizedType还是可以取得泛型信息呢？<br>答案是<strong>字节码</strong>。要知道，反射与JVM正常的运行是不同的，反射可以直接分析字节码，而字节码中有该类的签名以及变量的签名，从而可以分析出类或变量的泛型信息。</p>\n<p>最后，通过查看字节码的反汇编结果可知以下情况中的泛型是可以通过反射获取的。<br>1：函数返回值中的泛型<br>2：函数参数中的泛型<br>3：类的field中的泛型<br>4：函数中局部变量的泛型「存于LocalVariableTypeTable中，仅用于调试，发布模式下不存在」</p>\n","excerpt":"","more":"<p>众所周知，java代码在编译过程中会进行类型擦除，类型擦除后泛型信息会丢失。可是，为什么在反射中还可以通过ParameterizedType的getActualTypeArguments方法来获得泛型信息呢。</p>\n<p>首先，按照网上的说法，下面这两句所生成的字节码应该是一样的。但事实上,可以发现，他们所生成的字节码是不同的，区别就在Signature和LocalVariableTable中,这里标明了泛型的实际类型。</p>\n<p>[java]<br>public static void print(Set&lt;Integer&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/Integer;&gt;<br>public static void print(Set&lt;String&gt; c) { } // LocalVariableTable中为Ljava/util/Set&lt;Ljava/lang/String;&gt;<br>[/java]</p>\n<p>看上去，泛型信息还在，可是为什么这两句放在一起会报错呢？</p>\n<p>因为java采用的是<strong>编译时多态</strong>。java代码在编译过程中会尝试匹配所有同名方法，并且找到唯一符合条件的方法，然后将其签名写入字节码中，通过其签名来调用该方法。因此<strong>java中方法名可以相同，但是调用该方法的签名决不能相同</strong>。<br>在此例中上面两个方法生成的字节码虽然不同，但是在调用时所用的签名都是”print:(Ljava/util/List;)V”，因而无法区分这两个方法，所以不能多态。<br>正是因为编译时多态这种编译时分析确定签名，运行时根据签名直接调用的方式。导致下面这两句是完全可以执行的，原因就是虽然实参与形参不一致，但是实参与形参在忽略泛型后是一样的。<br>[java]<br>// 注意，这仅仅是个例子，由于编译器的检查功能所以这两句是无法编译通过的。因此需要通过反射的方式来实现。<br>// 当然，最简单的方式是将这两句分到两个类中用一些trick将两个class分别编译后直接运行，你可以发现代码是可以正常执行的，虽然直接编译它一定会报错。<br>print(new Set&lt;Integer&gt;());<br>public static void print(Set&lt;String&gt; c) { }<br>[/java]</p>\n<p>由此可见，java中泛型擦除的确是存在的，运行时的基本可以认为泛型已经被完全擦除。但是，为什么ParameterizedType还是可以取得泛型信息呢？<br>答案是<strong>字节码</strong>。要知道，反射与JVM正常的运行是不同的，反射可以直接分析字节码，而字节码中有该类的签名以及变量的签名，从而可以分析出类或变量的泛型信息。</p>\n<p>最后，通过查看字节码的反汇编结果可知以下情况中的泛型是可以通过反射获取的。<br>1：函数返回值中的泛型<br>2：函数参数中的泛型<br>3：类的field中的泛型<br>4：函数中局部变量的泛型「存于LocalVariableTypeTable中，仅用于调试，发布模式下不存在」</p>\n"},{"title":"python实现lambda-switch-lambda结构，向lambda内插入分支结构","id":"116","date":"2015-04-10T12:44:09.000Z","_content":"\npython没有switch的问题由来已久，大家也用各种方式实现了switch语句。最常用的便是利用字典来实现。\n而通过将单行带default功能的switch语句嵌入lambda中，可以实现根据key值不同，执行不同的分支代码的功能。\n\n[python]\n# 1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 2*2, 3**3, -4, 5,得到结果应该是[4, 27, -4, 5]\nitems = [('*', 2), ('**', 3), ('-', 4), ('?', 5)]\n\n# 2.从简单的做起首先用map遍历item生成['*', '**', '-', '?']的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\nitems = list(map(lambda x: x[0], items))\n\n# 3.然后加入带default功能的switch实现，得到将list转为['q', 'w', 'e', 'r']\nitems = list(map(lambda x: {'*': 'q', '**': 'w', '-': 'e'}.get(x[0], 'r'), items))\n\n# 4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]\nitems = list(map(lambda x: {'*': lambda y: y * y, '**': lambda y: y ** y, '-': lambda y: -y}.get(x[0], lambda y:y)(x[1]), items))\n\n# 5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\n# 下面是把'*'和'**'都视为乘，可以得到[4, 9, -4, 5]\nitems = list(map(lambda x: {1: lambda y: y * y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[{'*': 1, '**': 1, '-': 3}.get(x[0])](x[1]), items))\n\n# 6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\n# 下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]\nitems = list(map(lambda x: {1: lambda y: y * y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[len(x[0])](x[1]), items))\n[/python]\n\n利用该技巧，可以实现在lambda中加入分支语句，一定程度的改善了python中lambda的可用性。","source":"_posts/python-e5-ae-9e-e7-8e-b0lambda-switch-lambda-e7-bb-93-e6-9e-84-ef-bc-8c-e5-90-91lambda-e5-86-85-e6-8f-92-e5-85-a5-e5-88-86-e6-94-af-e7-bb-93-e6-9e-84.md","raw":"---\ntitle: python实现lambda-switch-lambda结构，向lambda内插入分支结构\ntags:\n  - python\nid: 116\ncategories:\n  - python\ndate: 2015-04-10 20:44:09\n---\n\npython没有switch的问题由来已久，大家也用各种方式实现了switch语句。最常用的便是利用字典来实现。\n而通过将单行带default功能的switch语句嵌入lambda中，可以实现根据key值不同，执行不同的分支代码的功能。\n\n[python]\n# 1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 2*2, 3**3, -4, 5,得到结果应该是[4, 27, -4, 5]\nitems = [('*', 2), ('**', 3), ('-', 4), ('?', 5)]\n\n# 2.从简单的做起首先用map遍历item生成['*', '**', '-', '?']的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\nitems = list(map(lambda x: x[0], items))\n\n# 3.然后加入带default功能的switch实现，得到将list转为['q', 'w', 'e', 'r']\nitems = list(map(lambda x: {'*': 'q', '**': 'w', '-': 'e'}.get(x[0], 'r'), items))\n\n# 4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]\nitems = list(map(lambda x: {'*': lambda y: y * y, '**': lambda y: y ** y, '-': lambda y: -y}.get(x[0], lambda y:y)(x[1]), items))\n\n# 5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\n# 下面是把'*'和'**'都视为乘，可以得到[4, 9, -4, 5]\nitems = list(map(lambda x: {1: lambda y: y * y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[{'*': 1, '**': 1, '-': 3}.get(x[0])](x[1]), items))\n\n# 6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\n# 下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]\nitems = list(map(lambda x: {1: lambda y: y * y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[len(x[0])](x[1]), items))\n[/python]\n\n利用该技巧，可以实现在lambda中加入分支语句，一定程度的改善了python中lambda的可用性。","slug":"python-e5-ae-9e-e7-8e-b0lambda-switch-lambda-e7-bb-93-e6-9e-84-ef-bc-8c-e5-90-91lambda-e5-86-85-e6-8f-92-e5-85-a5-e5-88-86-e6-94-af-e7-bb-93-e6-9e-84","published":1,"updated":"2016-05-06T02:34:31.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z36001nd0choxboimq4","content":"<p>python没有switch的问题由来已久，大家也用各种方式实现了switch语句。最常用的便是利用字典来实现。<br>而通过将单行带default功能的switch语句嵌入lambda中，可以实现根据key值不同，执行不同的分支代码的功能。</p>\n<p>[python]</p>\n<h1 id=\"1-这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行-22-3-3-4-5-得到结果应该是-4-27-4-5\"><a href=\"#1-这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行-22-3-3-4-5-得到结果应该是-4-27-4-5\" class=\"headerlink\" title=\"1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 22, 3*3, -4, 5,得到结果应该是[4, 27, -4, 5]\"></a>1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 2<em>2, 3*</em>3, -4, 5,得到结果应该是[4, 27, -4, 5]</h1><p>items = [(‘<em>‘, 2), (‘*</em>‘, 3), (‘-‘, 4), (‘?’, 5)]</p>\n<h1 id=\"2-从简单的做起首先用map遍历item生成-‘‘-‘-‘-‘-‘-‘-’-的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\"><a href=\"#2-从简单的做起首先用map遍历item生成-‘‘-‘-‘-‘-‘-‘-’-的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\" class=\"headerlink\" title=\"2.从简单的做起首先用map遍历item生成[‘‘, ‘*‘, ‘-‘, ‘?’]的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\"></a>2.从简单的做起首先用map遍历item生成[‘<em>‘, ‘*</em>‘, ‘-‘, ‘?’]的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。</h1><p>items = list(map(lambda x: x[0], items))</p>\n<h1 id=\"3-然后加入带default功能的switch实现，得到将list转为-‘q’-‘w’-‘e’-‘r’\"><a href=\"#3-然后加入带default功能的switch实现，得到将list转为-‘q’-‘w’-‘e’-‘r’\" class=\"headerlink\" title=\"3.然后加入带default功能的switch实现，得到将list转为[‘q’, ‘w’, ‘e’, ‘r’]\"></a>3.然后加入带default功能的switch实现，得到将list转为[‘q’, ‘w’, ‘e’, ‘r’]</h1><p>items = list(map(lambda x: {‘<em>‘: ‘q’, ‘*</em>‘: ‘w’, ‘-‘: ‘e’}.get(x[0], ‘r’), items))</p>\n<h1 id=\"4-最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到-4-27-4-5\"><a href=\"#4-最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到-4-27-4-5\" class=\"headerlink\" title=\"4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]\"></a>4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]</h1><p>items = list(map(lambda x: {‘<em>‘: lambda y: y </em> y, ‘<strong>‘: lambda y: y </strong> y, ‘-‘: lambda y: -y}.get(x[0], lambda y:y)(x[1]), items))</p>\n<h1 id=\"5-这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\"><a href=\"#5-这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\" class=\"headerlink\" title=\"5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\"></a>5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。</h1><h1 id=\"下面是把’‘和’-‘都视为乘，可以得到-4-9-4-5\"><a href=\"#下面是把’‘和’-‘都视为乘，可以得到-4-9-4-5\" class=\"headerlink\" title=\"下面是把’‘和’*‘都视为乘，可以得到[4, 9, -4, 5]\"></a>下面是把’<em>‘和’*</em>‘都视为乘，可以得到[4, 9, -4, 5]</h1><p>items = list(map(lambda x: {1: lambda y: y <em> y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[{‘</em>‘: 1, ‘**’: 1, ‘-‘: 3}.get(x<a href=\"x[1]\">0])</a>, items))</p>\n<h1 id=\"6-这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的-中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\"><a href=\"#6-这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的-中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\" class=\"headerlink\" title=\"6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\"></a>6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。</h1><h1 id=\"下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为-4-27-16-25\"><a href=\"#下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为-4-27-16-25\" class=\"headerlink\" title=\"下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]\"></a>下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]</h1><p>items = list(map(lambda x: {1: lambda y: y <em> y, 2: lambda y: y *</em> y, 3: lambda y: -y, None: lambda y: y}<a href=\"x[1]\">len(x[0])</a>, items))<br>[/python]</p>\n<p>利用该技巧，可以实现在lambda中加入分支语句，一定程度的改善了python中lambda的可用性。</p>\n","excerpt":"","more":"<p>python没有switch的问题由来已久，大家也用各种方式实现了switch语句。最常用的便是利用字典来实现。<br>而通过将单行带default功能的switch语句嵌入lambda中，可以实现根据key值不同，执行不同的分支代码的功能。</p>\n<p>[python]</p>\n<h1 id=\"1-这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行-22-3-3-4-5-得到结果应该是-4-27-4-5\"><a href=\"#1-这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行-22-3-3-4-5-得到结果应该是-4-27-4-5\" class=\"headerlink\" title=\"1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 22, 3*3, -4, 5,得到结果应该是[4, 27, -4, 5]\"></a>1.这是这次的实验数据，目标是根据前面的符号对后面的数据进行操作，问号或其他无法识别的符号则视为直接返回该数字，分别执行 2<em>2, 3*</em>3, -4, 5,得到结果应该是[4, 27, -4, 5]</h1><p>items = [(‘<em>‘, 2), (‘*</em>‘, 3), (‘-‘, 4), (‘?’, 5)]</p>\n<h1 id=\"2-从简单的做起首先用map遍历item生成-‘‘-‘-‘-‘-‘-‘-’-的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\"><a href=\"#2-从简单的做起首先用map遍历item生成-‘‘-‘-‘-‘-‘-‘-’-的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\" class=\"headerlink\" title=\"2.从简单的做起首先用map遍历item生成[‘‘, ‘*‘, ‘-‘, ‘?’]的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。\"></a>2.从简单的做起首先用map遍历item生成[‘<em>‘, ‘*</em>‘, ‘-‘, ‘?’]的结果「我更喜欢列表解析，但是为了展示lambda-switch-lambda还是用map吧」。</h1><p>items = list(map(lambda x: x[0], items))</p>\n<h1 id=\"3-然后加入带default功能的switch实现，得到将list转为-‘q’-‘w’-‘e’-‘r’\"><a href=\"#3-然后加入带default功能的switch实现，得到将list转为-‘q’-‘w’-‘e’-‘r’\" class=\"headerlink\" title=\"3.然后加入带default功能的switch实现，得到将list转为[‘q’, ‘w’, ‘e’, ‘r’]\"></a>3.然后加入带default功能的switch实现，得到将list转为[‘q’, ‘w’, ‘e’, ‘r’]</h1><p>items = list(map(lambda x: {‘<em>‘: ‘q’, ‘*</em>‘: ‘w’, ‘-‘: ‘e’}.get(x[0], ‘r’), items))</p>\n<h1 id=\"4-最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到-4-27-4-5\"><a href=\"#4-最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到-4-27-4-5\" class=\"headerlink\" title=\"4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]\"></a>4.最后将switch中的元素换成lambda并且在get之后执行，即可分别执行乘，幂，负和保持不变等分支，得到[4, 27, -4, 5]</h1><p>items = list(map(lambda x: {‘<em>‘: lambda y: y </em> y, ‘<strong>‘: lambda y: y </strong> y, ‘-‘: lambda y: -y}.get(x[0], lambda y:y)(x[1]), items))</p>\n<h1 id=\"5-这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\"><a href=\"#5-这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\" class=\"headerlink\" title=\"5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。\"></a>5.这是另外一种实现方式，相比上一种多加了一个dict可以对key进行一次转化，合并同类作用的key，实现switch中多个case公用一个代码块的功能。</h1><h1 id=\"下面是把’‘和’-‘都视为乘，可以得到-4-9-4-5\"><a href=\"#下面是把’‘和’-‘都视为乘，可以得到-4-9-4-5\" class=\"headerlink\" title=\"下面是把’‘和’*‘都视为乘，可以得到[4, 9, -4, 5]\"></a>下面是把’<em>‘和’*</em>‘都视为乘，可以得到[4, 9, -4, 5]</h1><p>items = list(map(lambda x: {1: lambda y: y <em> y, 2: lambda y: y ** y, 3: lambda y: -y, None: lambda y: y}[{‘</em>‘: 1, ‘**’: 1, ‘-‘: 3}.get(x<a href=\"x[1]\">0])</a>, items))</p>\n<h1 id=\"6-这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的-中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\"><a href=\"#6-这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的-中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\" class=\"headerlink\" title=\"6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。\"></a>6.这是将第5条加入的dict改为通过len对key进行预处理，以此类推，在主dict后的[]中可以进行各种复杂操作，甚至再嵌入lambda，以实现更复杂的功能。</h1><h1 id=\"下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为-4-27-16-25\"><a href=\"#下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为-4-27-16-25\" class=\"headerlink\" title=\"下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]\"></a>下面是根据key的长度，长度为1的执行乘操作，长度为2的执行幂操作，得到结果为[4, 27, 16, 25]</h1><p>items = list(map(lambda x: {1: lambda y: y <em> y, 2: lambda y: y *</em> y, 3: lambda y: -y, None: lambda y: y}<a href=\"x[1]\">len(x[0])</a>, items))<br>[/python]</p>\n<p>利用该技巧，可以实现在lambda中加入分支语句，一定程度的改善了python中lambda的可用性。</p>\n"},{"title":"Python每日一题 第3期","id":"50","date":"2014-12-11T14:28:06.000Z","_content":"\n[题目：判断今天是2014年的第多少天？ ](http://www.pythonla.com/read-20.html \"题目：判断今天是2014年的第多少天？ \")\n\ntime.mktime(tuple) 可以将一个时间对象转化为浮点型表示的时间戳，需要传入一个时间对象「实质上是一个长度为9的元组」，其返回值为传入从1970年1月1日8时整到现在过去的秒数。\n另外，struct_time对象共9个元素元素，分别为，年，月，日，时，分，秒，星期几，今年的第几天，是否夏令时。因此也可以这样调用mktime： \n[python]\ntime.mktime((2014, 12, 11 ,21 ,50 ,30, 0, 0, 0))\n[/python]\n\n下面第一种是我一开始的写法，其基本思路是用当前时间的时间戳减去2014年1月1日0点整的时间戳得到今年过去的秒数。再除以86400后取整加1就可以得到当前是第几天。\n后两种写法是在研究struct_time对象时发现的，可以直接获取struct_time格式的gmt时间和本地时间，其中第8项就是当前是本年的第几天。\n[python]\nimport time\nprint(int((time.time() - time.mktime(time.strptime('2014', '%Y'))) / (60 * 60 * 24)) + 1)\nprint(time.localtime()[7])\nprint(time.gmtime()[7])\n[/python]\n\n有关python中time和datatime的更多用法可参见help(time)及help(datatime)","source":"_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac3-e6-9c-9f.md","raw":"---\ntitle: Python每日一题 第3期\ntags:\n  - python\n  - 每日一题\n  - 练习\nid: 50\ncategories:\n  - python\ndate: 2014-12-11 22:28:06\n---\n\n[题目：判断今天是2014年的第多少天？ ](http://www.pythonla.com/read-20.html \"题目：判断今天是2014年的第多少天？ \")\n\ntime.mktime(tuple) 可以将一个时间对象转化为浮点型表示的时间戳，需要传入一个时间对象「实质上是一个长度为9的元组」，其返回值为传入从1970年1月1日8时整到现在过去的秒数。\n另外，struct_time对象共9个元素元素，分别为，年，月，日，时，分，秒，星期几，今年的第几天，是否夏令时。因此也可以这样调用mktime： \n[python]\ntime.mktime((2014, 12, 11 ,21 ,50 ,30, 0, 0, 0))\n[/python]\n\n下面第一种是我一开始的写法，其基本思路是用当前时间的时间戳减去2014年1月1日0点整的时间戳得到今年过去的秒数。再除以86400后取整加1就可以得到当前是第几天。\n后两种写法是在研究struct_time对象时发现的，可以直接获取struct_time格式的gmt时间和本地时间，其中第8项就是当前是本年的第几天。\n[python]\nimport time\nprint(int((time.time() - time.mktime(time.strptime('2014', '%Y'))) / (60 * 60 * 24)) + 1)\nprint(time.localtime()[7])\nprint(time.gmtime()[7])\n[/python]\n\n有关python中time和datatime的更多用法可参见help(time)及help(datatime)","slug":"python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac3-e6-9c-9f","published":1,"updated":"2016-05-06T02:34:31.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z38001rd0chl0p46dip","content":"<p><a href=\"http://www.pythonla.com/read-20.html\" title=\"题目：判断今天是2014年的第多少天？ \" target=\"_blank\" rel=\"external\">题目：判断今天是2014年的第多少天？ </a></p>\n<p>time.mktime(tuple) 可以将一个时间对象转化为浮点型表示的时间戳，需要传入一个时间对象「实质上是一个长度为9的元组」，其返回值为传入从1970年1月1日8时整到现在过去的秒数。<br>另外，struct_time对象共9个元素元素，分别为，年，月，日，时，分，秒，星期几，今年的第几天，是否夏令时。因此也可以这样调用mktime：<br>[python]<br>time.mktime((2014, 12, 11 ,21 ,50 ,30, 0, 0, 0))<br>[/python]</p>\n<p>下面第一种是我一开始的写法，其基本思路是用当前时间的时间戳减去2014年1月1日0点整的时间戳得到今年过去的秒数。再除以86400后取整加1就可以得到当前是第几天。<br>后两种写法是在研究struct_time对象时发现的，可以直接获取struct_time格式的gmt时间和本地时间，其中第8项就是当前是本年的第几天。<br>[python]<br>import time<br>print(int((time.time() - time.mktime(time.strptime(‘2014’, ‘%Y’))) / (60 <em> 60 </em> 24)) + 1)<br>print(time.localtime()[7])<br>print(time.gmtime()[7])<br>[/python]</p>\n<p>有关python中time和datatime的更多用法可参见help(time)及help(datatime)</p>\n","excerpt":"","more":"<p><a href=\"http://www.pythonla.com/read-20.html\" title=\"题目：判断今天是2014年的第多少天？ \">题目：判断今天是2014年的第多少天？ </a></p>\n<p>time.mktime(tuple) 可以将一个时间对象转化为浮点型表示的时间戳，需要传入一个时间对象「实质上是一个长度为9的元组」，其返回值为传入从1970年1月1日8时整到现在过去的秒数。<br>另外，struct_time对象共9个元素元素，分别为，年，月，日，时，分，秒，星期几，今年的第几天，是否夏令时。因此也可以这样调用mktime：<br>[python]<br>time.mktime((2014, 12, 11 ,21 ,50 ,30, 0, 0, 0))<br>[/python]</p>\n<p>下面第一种是我一开始的写法，其基本思路是用当前时间的时间戳减去2014年1月1日0点整的时间戳得到今年过去的秒数。再除以86400后取整加1就可以得到当前是第几天。<br>后两种写法是在研究struct_time对象时发现的，可以直接获取struct_time格式的gmt时间和本地时间，其中第8项就是当前是本年的第几天。<br>[python]<br>import time<br>print(int((time.time() - time.mktime(time.strptime(‘2014’, ‘%Y’))) / (60 <em> 60 </em> 24)) + 1)<br>print(time.localtime()[7])<br>print(time.gmtime()[7])<br>[/python]</p>\n<p>有关python中time和datatime的更多用法可参见help(time)及help(datatime)</p>\n"},{"title":"Python每日一题 第2期","id":"41","date":"2014-12-11T04:25:45.000Z","_content":"\n[【我们一起学Python吧】每日一题 第2期](http://www.pythonla.com/read-17.html \"【我们一起学Python吧】每日一题 第2期\")\n题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？ \n\n[python]\nratios = ((0, 0.1), (10, 0.075), (20, 0.05), (40, 0.03), (60, 0.015), (100, 0.01))\nwhile 1:\n    i_str = input('input a number:')\n    if '' == i_str:\n        exit(0)\n    i = int(i_str)\n    bonus = 0\n    last = 0\n    for ratio in ratios:\n        if ratio[0] &lt; i:\n            bonus += (i - ratio[0]) * (ratio[1] - last)\n            last = ratio[1]\n    print(round(bonus, 2))\n[/python]\n\n群里的解法，利用字典实现了switch，虽然有滥用eval的嫌疑，但是实现方式还是值得借鉴的\n[python]\na = int(input('input a number:'))\nitem = {'a&lt;=10': 'a*(1+0.1)', 'a&gt;10 and a&lt;=20': '10*(1+0.1)+(a-10)*(1+0.075)', 'a&gt;20 and a&lt;40': '(a-20)*(1+0.05)','40&lt;a&lt;=60': '(a-40)*(1+0.03)', '60&lt;a&lt;=100': '(a-60)*(1+0.15)', 'a&gt;100': '(a-100)*(1+0.01)'}\nfor i in item.keys():\n    if eval(i):\n        print(eval(item[i]))\n[/python]","source":"_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac2-e6-9c-9f.md","raw":"---\ntitle: Python每日一题 第2期\ntags:\n  - python\n  - 每日一题\n  - 练习\nid: 41\ncategories:\n  - python\ndate: 2014-12-11 12:25:45\n---\n\n[【我们一起学Python吧】每日一题 第2期](http://www.pythonla.com/read-17.html \"【我们一起学Python吧】每日一题 第2期\")\n题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？ \n\n[python]\nratios = ((0, 0.1), (10, 0.075), (20, 0.05), (40, 0.03), (60, 0.015), (100, 0.01))\nwhile 1:\n    i_str = input('input a number:')\n    if '' == i_str:\n        exit(0)\n    i = int(i_str)\n    bonus = 0\n    last = 0\n    for ratio in ratios:\n        if ratio[0] &lt; i:\n            bonus += (i - ratio[0]) * (ratio[1] - last)\n            last = ratio[1]\n    print(round(bonus, 2))\n[/python]\n\n群里的解法，利用字典实现了switch，虽然有滥用eval的嫌疑，但是实现方式还是值得借鉴的\n[python]\na = int(input('input a number:'))\nitem = {'a&lt;=10': 'a*(1+0.1)', 'a&gt;10 and a&lt;=20': '10*(1+0.1)+(a-10)*(1+0.075)', 'a&gt;20 and a&lt;40': '(a-20)*(1+0.05)','40&lt;a&lt;=60': '(a-40)*(1+0.03)', '60&lt;a&lt;=100': '(a-60)*(1+0.15)', 'a&gt;100': '(a-100)*(1+0.01)'}\nfor i in item.keys():\n    if eval(i):\n        print(eval(item[i]))\n[/python]","slug":"python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98-e7-ac-ac2-e6-9c-9f","published":1,"updated":"2016-05-06T02:34:31.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z3a001ud0chbid6m98r","content":"<p><a href=\"http://www.pythonla.com/read-17.html\" title=\"【我们一起学Python吧】每日一题 第2期\" target=\"_blank\" rel=\"external\">【我们一起学Python吧】每日一题 第2期</a><br>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？ </p>\n<p>[python]<br>ratios = ((0, 0.1), (10, 0.075), (20, 0.05), (40, 0.03), (60, 0.015), (100, 0.01))<br>while 1:<br>    i_str = input(‘input a number:’)<br>    if ‘’ == i_str:<br>        exit(0)<br>    i = int(i_str)<br>    bonus = 0<br>    last = 0<br>    for ratio in ratios:<br>        if ratio[0] &lt; i:<br>            bonus += (i - ratio[0]) * (ratio[1] - last)<br>            last = ratio[1]<br>    print(round(bonus, 2))<br>[/python]</p>\n<p>群里的解法，利用字典实现了switch，虽然有滥用eval的嫌疑，但是实现方式还是值得借鉴的<br>[python]<br>a = int(input(‘input a number:’))<br>item = {‘a&lt;=10’: ‘a<em>(1+0.1)’, ‘a&gt;10 and a&lt;=20’: ‘10</em>(1+0.1)+(a-10)<em>(1+0.075)’, ‘a&gt;20 and a&lt;40’: ‘(a-20)</em>(1+0.05)’,’40&lt;a&lt;=60’: ‘(a-40)<em>(1+0.03)’, ‘60&lt;a&lt;=100’: ‘(a-60)</em>(1+0.15)’, ‘a&gt;100’: ‘(a-100)*(1+0.01)’}<br>for i in item.keys():<br>    if eval(i):<br>        print(eval(item[i]))<br>[/python]</p>\n","excerpt":"","more":"<p><a href=\"http://www.pythonla.com/read-17.html\" title=\"【我们一起学Python吧】每日一题 第2期\">【我们一起学Python吧】每日一题 第2期</a><br>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？ </p>\n<p>[python]<br>ratios = ((0, 0.1), (10, 0.075), (20, 0.05), (40, 0.03), (60, 0.015), (100, 0.01))<br>while 1:<br>    i_str = input(‘input a number:’)<br>    if ‘’ == i_str:<br>        exit(0)<br>    i = int(i_str)<br>    bonus = 0<br>    last = 0<br>    for ratio in ratios:<br>        if ratio[0] &lt; i:<br>            bonus += (i - ratio[0]) * (ratio[1] - last)<br>            last = ratio[1]<br>    print(round(bonus, 2))<br>[/python]</p>\n<p>群里的解法，利用字典实现了switch，虽然有滥用eval的嫌疑，但是实现方式还是值得借鉴的<br>[python]<br>a = int(input(‘input a number:’))<br>item = {‘a&lt;=10’: ‘a<em>(1+0.1)’, ‘a&gt;10 and a&lt;=20’: ‘10</em>(1+0.1)+(a-10)<em>(1+0.075)’, ‘a&gt;20 and a&lt;40’: ‘(a-20)</em>(1+0.05)’,’40&lt;a&lt;=60’: ‘(a-40)<em>(1+0.03)’, ‘60&lt;a&lt;=100’: ‘(a-60)</em>(1+0.15)’, ‘a&gt;100’: ‘(a-100)*(1+0.01)’}<br>for i in item.keys():<br>    if eval(i):<br>        print(eval(item[i]))<br>[/python]</p>\n"},{"title":"python3学习——注册机的实现","id":"26","date":"2014-12-10T06:04:21.000Z","_content":"\n## 前言\n\n这个注册机本来是用java写的的，但是在完成后收到了新的需求————添加gui。作为一个被java gui坑过一次的人，我绝不愿意再被坑第二次，而我手头又没装vs，所以便选择据说开发效率极高的python。\n一边学一边做，开发过程虽说磕磕碰碰但是最后也算是顺利完成了，贴到网上，既是分享也是备忘。\n\n整个项目主要用到了tkinter,pyDes,rsa,multiprocessing等库。tkinter用于实现gui。pyDes用于对key文件加密。multiprocessing用于实现多线程素性测试以提高rsaKey的生成效率。而最关键的则是rsa库了，但是事实上最后的版本中是没有引入rsa库的，原因是rsa库在打包过程中出现了问题，所以我参考rsa库和网上的一篇论文实现了一个简单myrsa库。\n\n## 模块\n\n### main函数\n\n一个相当简陋的对话框带着四个同样简陋的按钮。\n生成授权：接受用户输入的授权信息包括机器码，授权开始结束日期等\n选择密钥：选择授权时所使用的key\n创建密钥：随机生成rsaKey\n导出公钥：导出rsa算法中的e和n，这两个参数需要写死在被保护的程序的验证模块中\n[python]\nif __name__ == '__main__':\n    root = Tk()\n    Button(root, text='生成授权', relief=RAISED, command=register).pack()\n    Button(root, text='选择密钥', relief=RAISED, command=select_key).pack()\n    Button(root, text='创建密钥', relief=RAISED, command=create_key).pack()\n    Button(root, text='导出公钥', relief=RAISED, command=get_pubkey).pack()\n    root.mainloop()\n[/python]\n\n### 创建密钥\n\n首先接受用户输入的密钥位数和密钥别名，然后调用myrsa库中的newkeys生成密钥，myrsa会根据当前机器的cpu核心数量开启相应数量的线程进行计算。「此处没有对length最大最小值进行约束，存在安全隐患」\n密钥生成完毕后会调用save_key进行保存。程序将在key文件下下根据用户输入的别名生成一个文件夹，然后用文件头部的_des_key对密钥对加密，最后保存为pub.key和pri.key。加入des算法是因为注册机与key文件分离，为了防止key文件流出导致第三方任意授权所以对key进行加密。加入des后必须有key文件保存时所用的_des_key否则无法读取key文件。\n此外，程序还会向同目录下生成一个xml文件保存key的别名、位数和kid，其中kid可写入被保护程序，用于判断授权文件所使用的key。\n[python]\ndef create_key():\n    length = simpledialog.askinteger(root, &quot;请输入密钥长度&quot;)\n    remark = simpledialog.askstring(root, &quot;输入密钥名称&quot;)\n    (pubkey, prikey) = newkeys(length)\n    config = configparser.ConfigParser()\n    config.add_section('info')\n    config.set('info', 'length', str(length))\n    save_key(pubkey, prikey, config, remark)\n    messagebox.showinfo(&quot;&quot;, &quot;密钥生成完毕&quot;)\n\ndef save_key(pubkey, prikey, config, remark):\n    pub = pubkey.save_pkcs1()\n    pri = prikey.save_pkcs1()\n    encrypter = des(&quot;DESCRYPT&quot;, CBC, _des_key, pad=None, padmode=PAD_PKCS5)\n\n    time_stamp = int(time.time() * 1000)\n    if os.path.exists('key/' + remark):\n        i = 1\n        while os.path.exists('key/' + remark + '_' + str(i)):\n            i += 1\n        remark = remark + '_' + str(i)\n    config.set('info', 'kid', str(time_stamp))\n    e_pub = encrypter.encrypt(pub)\n    e_pri = encrypter.encrypt(pri)\n\n    file_prefix = 'key/' + remark\n    os.makedirs(file_prefix)\n    with open(file_prefix + '/info.ini', 'w') as f:\n        config.write(f)\n    with open(file_prefix + '/pub.key', 'wb') as f:\n        f.write(e_pub)\n    with open(file_prefix + '/pri.key', 'wb') as f:\n        f.write(e_pri)\n[/python]\n\n### 选择密钥\n\n之前的控制台版可以列出所有密钥进行选择，gui版本只做了根据用户输入寻找key文件夹然后写入配置文件。\n[python]\ndef select_key():\n    key_dir = filedialog.askdirectory()\n    if None == key_dir:\n        return\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    if not config.has_section('info'):\n        config.add_section('info')\n    config.set('info', 'current_key', key_dir)\n    with open('config.ini', 'w') as f:\n        config.write(f)\n[/python]\n\n### 导出公钥\n\n这里和上面的选择密钥原本在控制台版中都属于密钥管理的功能，为了适应gui做了弱化，会读取当前选择的key然后将kid,n,e写入指定的配置文件。\n[python]\ndef get_pubkey():\n    key_dir = filedialog.askdirectory()\n    (pubkey, prikey, config) = load_key(key_dir)\n    name = filedialog.asksaveasfilename(defaultextension='.ini', initialfile='pubkey',\n                                        initialdir='', filetypes=[('公钥', '.ini')])\n    pubkey_cfg = configparser.ConfigParser()\n    pubkey_cfg.add_section('pubkey')\n    pubkey_cfg.set('pubkey', 'kid', config.get('info', 'kid'))\n    pubkey_cfg.set('pubkey', 'n', str(getattr(pubkey, 'n')))\n    pubkey_cfg.set('pubkey', 'e', str(getattr(pubkey, 'e')))\n    with open(name, 'w') as f:\n        pubkey_cfg.write(f)\n[/python]\n\n### 生成授权\n\n首先会读取配置文件获得当前的key，然后接受用户输入的授权信息并拼接成json串，最后调用_encrypt加密。加密完后会进行解密与原信息比对如果无法通过校验会提示密钥可能失效。\n最后新建一个二进制文件在前8位写入kid，然后写入加密后的授权信息\n[python]\ndef register():\n    if not os.path.exists('config.ini'):\n        select_key()\n        print(1)\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    try:\n        current_key = config.get('info', 'current_key')\n        print(current_key)\n        load_key(current_key)\n        print(3)\n    except Exception:\n        select_key()\n        current_key = config.get('info', 'current_key')\n\n    code = simpledialog.askstring(root, '请输入机器码')\n    begin_str = simpledialog.askstring(root, '请输入授权开始日期(yyyy-MM-dd)')\n    end_str = simpledialog.askstring(root, '请输入授权结束日期(yyyy-MM-dd)')\n    count = simpledialog.askstring(root, '请输入客户端数量')\n    name = filedialog.asksaveasfilename(defaultextension='.license', initialdir='', initialfile=str(int(time.time())),\n                                        filetypes=[('授权文件', '.license')])\n    reg_info = {}\n    if not None == code:\n        reg_info['code'] = code\n    if not None == begin_str:\n        begin_date = time.strptime(begin_str, &quot;%Y-%m-%d&quot;)\n        reg_info['beginDate'] = int(time.mktime(begin_date) * 1000)\n    if not None == end_str:\n        end_date = time.strptime(end_str, &quot;%Y-%m-%d&quot;)\n        reg_info['endDate'] = int(time.mktime(end_date) * 1000)\n    if not None == count:\n        reg_info['count'] = count\n    json = JSONEncoder().encode(reg_info)\n\n    (pubkey, prikey, config) = load_key(current_key)\n    e = getattr(prikey, 'e')\n    d = getattr(prikey, 'd')\n    setattr(prikey, 'e', d)\n    setattr(prikey, 'd', e)\n    setattr(pubkey, 'e', d)\n    e_json = _encrypt(json.encode(), pubkey)\n    d_json = _decrypt(e_json, prikey)\n\n    if not json.encode() == d_json:\n        print(&quot;校验失败，密钥可能损坏。请确认license是否有效&quot;)\n\n    with open(name, 'wb') as f:\n        f.write(struct.pack('&gt;q', int(config.get('info', 'kid'))))\n        f.write(e_json)\n[/python]\n\n### 验证部分\n\n关于被保护的程序中的验证部分这里以java举例，需要将导出公钥中得到的e,d,kid以常量形式写入程序，如果对不同版本需要隔离只需要修改常量即可。\n在验证部分会读取指定文件，然后读取前八位与常量kid比较如果不同则认为授权与软件版本不匹配，如果相同则利用常量n和e生成公钥对剩余部分进行解密。解密后得到授权信息开始对机器码等参数进行验证并返回结果。\n[java]\nprivate static final String modulus = &quot;***&quot;;\nprivate static final String publicExponent = &quot;65537&quot;;\nprivate static final long kid = ***L;\n\ntry (DataInputStream in = new DataInputStream(new BufferedInputStream(\n\tnew FileInputStream(file)))) {\n\n\tLong licenseKid = in.readLong();\n\tif (kid != licenseKid) {\n\t\treturn false;\n\t}\n\tbyte[] license = new byte[(int) file.length() - 8];\n\tin.read(license);\n\n\tRSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(&quot;RSA&quot;)\n\t\t.generatePublic(\n\t\t\tnew RSAPublicKeySpec(new BigInteger(modulus),\n\t\t\t\tnew BigInteger(publicExponent)));\n\n\tString licenseJsonString = RSAUtil.decryptByPublicKey(\n\t\tRSAUtil.bcd2Str(license), pubKey);\n\tJSONObject jsonObject = (JSONObject) new JSONParser()\n\t\t.parse(licenseJsonString);\n\n\tString code = (String) jsonObject.get(&quot;code&quot;);\n\tif (null != code &amp;&amp; !getSigarSequence().equals(code)) {\n\t\treturn false;\n\t}\n\tLong beginDate = (Long) jsonObject.get(&quot;beginDate&quot;);\n\tif (null != beginDate &amp;&amp; beginDate &gt; new Date().getTime()) {\n\t\treturn false;\n\t}\n\tLong endDate = (Long) jsonObject.get(&quot;endDate&quot;);\n\tif (null != endDate &amp;&amp; endDate &lt; new Date().getTime()) {\n\t\treturn false;\n\t}\n\tObject o = jsonObject.get(&quot;count&quot;);\n\tInteger count = o instanceof String ? Integer.valueOf((String) o)\n\t\t: (Integer) o;\n\tif (null != count) {\n\t\t//TODO 设置客户端数量\n\t}\n\treturn true;\n} catch (Exception e) {\n\te.printStackTrace();\n\treturn false;\n}\n[/java]\n\n## 总结\n\n总的来说虽然在学习python方面花了不少时间，但是python的开发效率的确很高，对同类元素的高度整合使得python开发的过程中用于很少为了「哪一种方案更好」这种事而浪费时间。虽然执行效率偏低，但是这对于一些轻量级的工具应用而言，省下来的开发时间远比程序执行所花费的时间来的多，的确是开发各种小工具的首选。\n\n另外，上面提到过rsa无法打包的问题，附件中已经用我自己实现的库代替了rsa，源代码下载后可以使用cxfreeze打包为exe文件。\n\n[python3实现注册机源码](http://www.woodensail.tk/archives/26/reg)","source":"_posts/python3-e5-ad-a6-e4-b9-a0-e6-b3-a8-e5-86-8c-e6-9c-ba-e7-9a-84-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: python3学习——注册机的实现\ntags:\n  - keygen\n  - python\n  - rsa\n  - 加密\nid: 26\ncategories:\n  - python\ndate: 2014-12-10 14:04:21\n---\n\n## 前言\n\n这个注册机本来是用java写的的，但是在完成后收到了新的需求————添加gui。作为一个被java gui坑过一次的人，我绝不愿意再被坑第二次，而我手头又没装vs，所以便选择据说开发效率极高的python。\n一边学一边做，开发过程虽说磕磕碰碰但是最后也算是顺利完成了，贴到网上，既是分享也是备忘。\n\n整个项目主要用到了tkinter,pyDes,rsa,multiprocessing等库。tkinter用于实现gui。pyDes用于对key文件加密。multiprocessing用于实现多线程素性测试以提高rsaKey的生成效率。而最关键的则是rsa库了，但是事实上最后的版本中是没有引入rsa库的，原因是rsa库在打包过程中出现了问题，所以我参考rsa库和网上的一篇论文实现了一个简单myrsa库。\n\n## 模块\n\n### main函数\n\n一个相当简陋的对话框带着四个同样简陋的按钮。\n生成授权：接受用户输入的授权信息包括机器码，授权开始结束日期等\n选择密钥：选择授权时所使用的key\n创建密钥：随机生成rsaKey\n导出公钥：导出rsa算法中的e和n，这两个参数需要写死在被保护的程序的验证模块中\n[python]\nif __name__ == '__main__':\n    root = Tk()\n    Button(root, text='生成授权', relief=RAISED, command=register).pack()\n    Button(root, text='选择密钥', relief=RAISED, command=select_key).pack()\n    Button(root, text='创建密钥', relief=RAISED, command=create_key).pack()\n    Button(root, text='导出公钥', relief=RAISED, command=get_pubkey).pack()\n    root.mainloop()\n[/python]\n\n### 创建密钥\n\n首先接受用户输入的密钥位数和密钥别名，然后调用myrsa库中的newkeys生成密钥，myrsa会根据当前机器的cpu核心数量开启相应数量的线程进行计算。「此处没有对length最大最小值进行约束，存在安全隐患」\n密钥生成完毕后会调用save_key进行保存。程序将在key文件下下根据用户输入的别名生成一个文件夹，然后用文件头部的_des_key对密钥对加密，最后保存为pub.key和pri.key。加入des算法是因为注册机与key文件分离，为了防止key文件流出导致第三方任意授权所以对key进行加密。加入des后必须有key文件保存时所用的_des_key否则无法读取key文件。\n此外，程序还会向同目录下生成一个xml文件保存key的别名、位数和kid，其中kid可写入被保护程序，用于判断授权文件所使用的key。\n[python]\ndef create_key():\n    length = simpledialog.askinteger(root, &quot;请输入密钥长度&quot;)\n    remark = simpledialog.askstring(root, &quot;输入密钥名称&quot;)\n    (pubkey, prikey) = newkeys(length)\n    config = configparser.ConfigParser()\n    config.add_section('info')\n    config.set('info', 'length', str(length))\n    save_key(pubkey, prikey, config, remark)\n    messagebox.showinfo(&quot;&quot;, &quot;密钥生成完毕&quot;)\n\ndef save_key(pubkey, prikey, config, remark):\n    pub = pubkey.save_pkcs1()\n    pri = prikey.save_pkcs1()\n    encrypter = des(&quot;DESCRYPT&quot;, CBC, _des_key, pad=None, padmode=PAD_PKCS5)\n\n    time_stamp = int(time.time() * 1000)\n    if os.path.exists('key/' + remark):\n        i = 1\n        while os.path.exists('key/' + remark + '_' + str(i)):\n            i += 1\n        remark = remark + '_' + str(i)\n    config.set('info', 'kid', str(time_stamp))\n    e_pub = encrypter.encrypt(pub)\n    e_pri = encrypter.encrypt(pri)\n\n    file_prefix = 'key/' + remark\n    os.makedirs(file_prefix)\n    with open(file_prefix + '/info.ini', 'w') as f:\n        config.write(f)\n    with open(file_prefix + '/pub.key', 'wb') as f:\n        f.write(e_pub)\n    with open(file_prefix + '/pri.key', 'wb') as f:\n        f.write(e_pri)\n[/python]\n\n### 选择密钥\n\n之前的控制台版可以列出所有密钥进行选择，gui版本只做了根据用户输入寻找key文件夹然后写入配置文件。\n[python]\ndef select_key():\n    key_dir = filedialog.askdirectory()\n    if None == key_dir:\n        return\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    if not config.has_section('info'):\n        config.add_section('info')\n    config.set('info', 'current_key', key_dir)\n    with open('config.ini', 'w') as f:\n        config.write(f)\n[/python]\n\n### 导出公钥\n\n这里和上面的选择密钥原本在控制台版中都属于密钥管理的功能，为了适应gui做了弱化，会读取当前选择的key然后将kid,n,e写入指定的配置文件。\n[python]\ndef get_pubkey():\n    key_dir = filedialog.askdirectory()\n    (pubkey, prikey, config) = load_key(key_dir)\n    name = filedialog.asksaveasfilename(defaultextension='.ini', initialfile='pubkey',\n                                        initialdir='', filetypes=[('公钥', '.ini')])\n    pubkey_cfg = configparser.ConfigParser()\n    pubkey_cfg.add_section('pubkey')\n    pubkey_cfg.set('pubkey', 'kid', config.get('info', 'kid'))\n    pubkey_cfg.set('pubkey', 'n', str(getattr(pubkey, 'n')))\n    pubkey_cfg.set('pubkey', 'e', str(getattr(pubkey, 'e')))\n    with open(name, 'w') as f:\n        pubkey_cfg.write(f)\n[/python]\n\n### 生成授权\n\n首先会读取配置文件获得当前的key，然后接受用户输入的授权信息并拼接成json串，最后调用_encrypt加密。加密完后会进行解密与原信息比对如果无法通过校验会提示密钥可能失效。\n最后新建一个二进制文件在前8位写入kid，然后写入加密后的授权信息\n[python]\ndef register():\n    if not os.path.exists('config.ini'):\n        select_key()\n        print(1)\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    try:\n        current_key = config.get('info', 'current_key')\n        print(current_key)\n        load_key(current_key)\n        print(3)\n    except Exception:\n        select_key()\n        current_key = config.get('info', 'current_key')\n\n    code = simpledialog.askstring(root, '请输入机器码')\n    begin_str = simpledialog.askstring(root, '请输入授权开始日期(yyyy-MM-dd)')\n    end_str = simpledialog.askstring(root, '请输入授权结束日期(yyyy-MM-dd)')\n    count = simpledialog.askstring(root, '请输入客户端数量')\n    name = filedialog.asksaveasfilename(defaultextension='.license', initialdir='', initialfile=str(int(time.time())),\n                                        filetypes=[('授权文件', '.license')])\n    reg_info = {}\n    if not None == code:\n        reg_info['code'] = code\n    if not None == begin_str:\n        begin_date = time.strptime(begin_str, &quot;%Y-%m-%d&quot;)\n        reg_info['beginDate'] = int(time.mktime(begin_date) * 1000)\n    if not None == end_str:\n        end_date = time.strptime(end_str, &quot;%Y-%m-%d&quot;)\n        reg_info['endDate'] = int(time.mktime(end_date) * 1000)\n    if not None == count:\n        reg_info['count'] = count\n    json = JSONEncoder().encode(reg_info)\n\n    (pubkey, prikey, config) = load_key(current_key)\n    e = getattr(prikey, 'e')\n    d = getattr(prikey, 'd')\n    setattr(prikey, 'e', d)\n    setattr(prikey, 'd', e)\n    setattr(pubkey, 'e', d)\n    e_json = _encrypt(json.encode(), pubkey)\n    d_json = _decrypt(e_json, prikey)\n\n    if not json.encode() == d_json:\n        print(&quot;校验失败，密钥可能损坏。请确认license是否有效&quot;)\n\n    with open(name, 'wb') as f:\n        f.write(struct.pack('&gt;q', int(config.get('info', 'kid'))))\n        f.write(e_json)\n[/python]\n\n### 验证部分\n\n关于被保护的程序中的验证部分这里以java举例，需要将导出公钥中得到的e,d,kid以常量形式写入程序，如果对不同版本需要隔离只需要修改常量即可。\n在验证部分会读取指定文件，然后读取前八位与常量kid比较如果不同则认为授权与软件版本不匹配，如果相同则利用常量n和e生成公钥对剩余部分进行解密。解密后得到授权信息开始对机器码等参数进行验证并返回结果。\n[java]\nprivate static final String modulus = &quot;***&quot;;\nprivate static final String publicExponent = &quot;65537&quot;;\nprivate static final long kid = ***L;\n\ntry (DataInputStream in = new DataInputStream(new BufferedInputStream(\n\tnew FileInputStream(file)))) {\n\n\tLong licenseKid = in.readLong();\n\tif (kid != licenseKid) {\n\t\treturn false;\n\t}\n\tbyte[] license = new byte[(int) file.length() - 8];\n\tin.read(license);\n\n\tRSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(&quot;RSA&quot;)\n\t\t.generatePublic(\n\t\t\tnew RSAPublicKeySpec(new BigInteger(modulus),\n\t\t\t\tnew BigInteger(publicExponent)));\n\n\tString licenseJsonString = RSAUtil.decryptByPublicKey(\n\t\tRSAUtil.bcd2Str(license), pubKey);\n\tJSONObject jsonObject = (JSONObject) new JSONParser()\n\t\t.parse(licenseJsonString);\n\n\tString code = (String) jsonObject.get(&quot;code&quot;);\n\tif (null != code &amp;&amp; !getSigarSequence().equals(code)) {\n\t\treturn false;\n\t}\n\tLong beginDate = (Long) jsonObject.get(&quot;beginDate&quot;);\n\tif (null != beginDate &amp;&amp; beginDate &gt; new Date().getTime()) {\n\t\treturn false;\n\t}\n\tLong endDate = (Long) jsonObject.get(&quot;endDate&quot;);\n\tif (null != endDate &amp;&amp; endDate &lt; new Date().getTime()) {\n\t\treturn false;\n\t}\n\tObject o = jsonObject.get(&quot;count&quot;);\n\tInteger count = o instanceof String ? Integer.valueOf((String) o)\n\t\t: (Integer) o;\n\tif (null != count) {\n\t\t//TODO 设置客户端数量\n\t}\n\treturn true;\n} catch (Exception e) {\n\te.printStackTrace();\n\treturn false;\n}\n[/java]\n\n## 总结\n\n总的来说虽然在学习python方面花了不少时间，但是python的开发效率的确很高，对同类元素的高度整合使得python开发的过程中用于很少为了「哪一种方案更好」这种事而浪费时间。虽然执行效率偏低，但是这对于一些轻量级的工具应用而言，省下来的开发时间远比程序执行所花费的时间来的多，的确是开发各种小工具的首选。\n\n另外，上面提到过rsa无法打包的问题，附件中已经用我自己实现的库代替了rsa，源代码下载后可以使用cxfreeze打包为exe文件。\n\n[python3实现注册机源码](http://www.woodensail.tk/archives/26/reg)","slug":"python3-e5-ad-a6-e4-b9-a0-e6-b3-a8-e5-86-8c-e6-9c-ba-e7-9a-84-e5-ae-9e-e7-8e-b0","published":1,"updated":"2016-05-06T02:34:31.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z3d001yd0chgv495xdn","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个注册机本来是用java写的的，但是在完成后收到了新的需求————添加gui。作为一个被java gui坑过一次的人，我绝不愿意再被坑第二次，而我手头又没装vs，所以便选择据说开发效率极高的python。<br>一边学一边做，开发过程虽说磕磕碰碰但是最后也算是顺利完成了，贴到网上，既是分享也是备忘。</p>\n<p>整个项目主要用到了tkinter,pyDes,rsa,multiprocessing等库。tkinter用于实现gui。pyDes用于对key文件加密。multiprocessing用于实现多线程素性测试以提高rsaKey的生成效率。而最关键的则是rsa库了，但是事实上最后的版本中是没有引入rsa库的，原因是rsa库在打包过程中出现了问题，所以我参考rsa库和网上的一篇论文实现了一个简单myrsa库。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>一个相当简陋的对话框带着四个同样简陋的按钮。<br>生成授权：接受用户输入的授权信息包括机器码，授权开始结束日期等<br>选择密钥：选择授权时所使用的key<br>创建密钥：随机生成rsaKey<br>导出公钥：导出rsa算法中的e和n，这两个参数需要写死在被保护的程序的验证模块中<br>[python]<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    root = Tk()<br>    Button(root, text=’生成授权’, relief=RAISED, command=register).pack()<br>    Button(root, text=’选择密钥’, relief=RAISED, command=select_key).pack()<br>    Button(root, text=’创建密钥’, relief=RAISED, command=create_key).pack()<br>    Button(root, text=’导出公钥’, relief=RAISED, command=get_pubkey).pack()<br>    root.mainloop()<br>[/python]</p>\n<h3 id=\"创建密钥\"><a href=\"#创建密钥\" class=\"headerlink\" title=\"创建密钥\"></a>创建密钥</h3><p>首先接受用户输入的密钥位数和密钥别名，然后调用myrsa库中的newkeys生成密钥，myrsa会根据当前机器的cpu核心数量开启相应数量的线程进行计算。「此处没有对length最大最小值进行约束，存在安全隐患」<br>密钥生成完毕后会调用save_key进行保存。程序将在key文件下下根据用户输入的别名生成一个文件夹，然后用文件头部的_des_key对密钥对加密，最后保存为pub.key和pri.key。加入des算法是因为注册机与key文件分离，为了防止key文件流出导致第三方任意授权所以对key进行加密。加入des后必须有key文件保存时所用的_des_key否则无法读取key文件。<br>此外，程序还会向同目录下生成一个xml文件保存key的别名、位数和kid，其中kid可写入被保护程序，用于判断授权文件所使用的key。<br>[python]<br>def create_key():<br>    length = simpledialog.askinteger(root, &quot;请输入密钥长度&quot;)<br>    remark = simpledialog.askstring(root, &quot;输入密钥名称&quot;)<br>    (pubkey, prikey) = newkeys(length)<br>    config = configparser.ConfigParser()<br>    config.add_section(‘info’)<br>    config.set(‘info’, ‘length’, str(length))<br>    save_key(pubkey, prikey, config, remark)<br>    messagebox.showinfo(&quot;&quot;, &quot;密钥生成完毕&quot;)</p>\n<p>def save_key(pubkey, prikey, config, remark):<br>    pub = pubkey.save_pkcs1()<br>    pri = prikey.save_pkcs1()<br>    encrypter = des(&quot;DESCRYPT&quot;, CBC, _des_key, pad=None, padmode=PAD_PKCS5)</p>\n<pre><code>time_stamp = int(time.time() * 1000)\nif os.path.exists(&apos;key/&apos; + remark):\n    i = 1\n    while os.path.exists(&apos;key/&apos; + remark + &apos;_&apos; + str(i)):\n        i += 1\n    remark = remark + &apos;_&apos; + str(i)\nconfig.set(&apos;info&apos;, &apos;kid&apos;, str(time_stamp))\ne_pub = encrypter.encrypt(pub)\ne_pri = encrypter.encrypt(pri)\n\nfile_prefix = &apos;key/&apos; + remark\nos.makedirs(file_prefix)\nwith open(file_prefix + &apos;/info.ini&apos;, &apos;w&apos;) as f:\n    config.write(f)\nwith open(file_prefix + &apos;/pub.key&apos;, &apos;wb&apos;) as f:\n    f.write(e_pub)\nwith open(file_prefix + &apos;/pri.key&apos;, &apos;wb&apos;) as f:\n    f.write(e_pri)\n</code></pre><p>[/python]</p>\n<h3 id=\"选择密钥\"><a href=\"#选择密钥\" class=\"headerlink\" title=\"选择密钥\"></a>选择密钥</h3><p>之前的控制台版可以列出所有密钥进行选择，gui版本只做了根据用户输入寻找key文件夹然后写入配置文件。<br>[python]<br>def select_key():<br>    key_dir = filedialog.askdirectory()<br>    if None == key_dir:<br>        return<br>    config = configparser.ConfigParser()<br>    config.read(‘config.ini’)<br>    if not config.has_section(‘info’):<br>        config.add_section(‘info’)<br>    config.set(‘info’, ‘current_key’, key_dir)<br>    with open(‘config.ini’, ‘w’) as f:<br>        config.write(f)<br>[/python]</p>\n<h3 id=\"导出公钥\"><a href=\"#导出公钥\" class=\"headerlink\" title=\"导出公钥\"></a>导出公钥</h3><p>这里和上面的选择密钥原本在控制台版中都属于密钥管理的功能，为了适应gui做了弱化，会读取当前选择的key然后将kid,n,e写入指定的配置文件。<br>[python]<br>def get_pubkey():<br>    key_dir = filedialog.askdirectory()<br>    (pubkey, prikey, config) = load_key(key_dir)<br>    name = filedialog.asksaveasfilename(defaultextension=’.ini’, initialfile=’pubkey’,<br>                                        initialdir=’’, filetypes=[(‘公钥’, ‘.ini’)])<br>    pubkey_cfg = configparser.ConfigParser()<br>    pubkey_cfg.add_section(‘pubkey’)<br>    pubkey_cfg.set(‘pubkey’, ‘kid’, config.get(‘info’, ‘kid’))<br>    pubkey_cfg.set(‘pubkey’, ‘n’, str(getattr(pubkey, ‘n’)))<br>    pubkey_cfg.set(‘pubkey’, ‘e’, str(getattr(pubkey, ‘e’)))<br>    with open(name, ‘w’) as f:<br>        pubkey_cfg.write(f)<br>[/python]</p>\n<h3 id=\"生成授权\"><a href=\"#生成授权\" class=\"headerlink\" title=\"生成授权\"></a>生成授权</h3><p>首先会读取配置文件获得当前的key，然后接受用户输入的授权信息并拼接成json串，最后调用_encrypt加密。加密完后会进行解密与原信息比对如果无法通过校验会提示密钥可能失效。<br>最后新建一个二进制文件在前8位写入kid，然后写入加密后的授权信息<br>[python]<br>def register():<br>    if not os.path.exists(‘config.ini’):<br>        select_key()<br>        print(1)<br>    config = configparser.ConfigParser()<br>    config.read(‘config.ini’)<br>    try:<br>        current_key = config.get(‘info’, ‘current_key’)<br>        print(current_key)<br>        load_key(current_key)<br>        print(3)<br>    except Exception:<br>        select_key()<br>        current_key = config.get(‘info’, ‘current_key’)</p>\n<pre><code>code = simpledialog.askstring(root, &apos;请输入机器码&apos;)\nbegin_str = simpledialog.askstring(root, &apos;请输入授权开始日期(yyyy-MM-dd)&apos;)\nend_str = simpledialog.askstring(root, &apos;请输入授权结束日期(yyyy-MM-dd)&apos;)\ncount = simpledialog.askstring(root, &apos;请输入客户端数量&apos;)\nname = filedialog.asksaveasfilename(defaultextension=&apos;.license&apos;, initialdir=&apos;&apos;, initialfile=str(int(time.time())),\n                                    filetypes=[(&apos;授权文件&apos;, &apos;.license&apos;)])\nreg_info = {}\nif not None == code:\n    reg_info[&apos;code&apos;] = code\nif not None == begin_str:\n    begin_date = time.strptime(begin_str, &amp;quot;%Y-%m-%d&amp;quot;)\n    reg_info[&apos;beginDate&apos;] = int(time.mktime(begin_date) * 1000)\nif not None == end_str:\n    end_date = time.strptime(end_str, &amp;quot;%Y-%m-%d&amp;quot;)\n    reg_info[&apos;endDate&apos;] = int(time.mktime(end_date) * 1000)\nif not None == count:\n    reg_info[&apos;count&apos;] = count\njson = JSONEncoder().encode(reg_info)\n\n(pubkey, prikey, config) = load_key(current_key)\ne = getattr(prikey, &apos;e&apos;)\nd = getattr(prikey, &apos;d&apos;)\nsetattr(prikey, &apos;e&apos;, d)\nsetattr(prikey, &apos;d&apos;, e)\nsetattr(pubkey, &apos;e&apos;, d)\ne_json = _encrypt(json.encode(), pubkey)\nd_json = _decrypt(e_json, prikey)\n\nif not json.encode() == d_json:\n    print(&amp;quot;校验失败，密钥可能损坏。请确认license是否有效&amp;quot;)\n\nwith open(name, &apos;wb&apos;) as f:\n    f.write(struct.pack(&apos;&amp;gt;q&apos;, int(config.get(&apos;info&apos;, &apos;kid&apos;))))\n    f.write(e_json)\n</code></pre><p>[/python]</p>\n<h3 id=\"验证部分\"><a href=\"#验证部分\" class=\"headerlink\" title=\"验证部分\"></a>验证部分</h3><p>关于被保护的程序中的验证部分这里以java举例，需要将导出公钥中得到的e,d,kid以常量形式写入程序，如果对不同版本需要隔离只需要修改常量即可。<br>在验证部分会读取指定文件，然后读取前八位与常量kid比较如果不同则认为授权与软件版本不匹配，如果相同则利用常量n和e生成公钥对剩余部分进行解密。解密后得到授权信息开始对机器码等参数进行验证并返回结果。<br>[java]<br>private static final String modulus = &quot;<strong><em>&quot;;<br>private static final String publicExponent = &quot;65537&quot;;<br>private static final long kid = </em></strong>L;</p>\n<p>try (DataInputStream in = new DataInputStream(new BufferedInputStream(<br>    new FileInputStream(file)))) {</p>\n<pre><code>Long licenseKid = in.readLong();\nif (kid != licenseKid) {\n    return false;\n}\nbyte[] license = new byte[(int) file.length() - 8];\nin.read(license);\n\nRSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(&amp;quot;RSA&amp;quot;)\n    .generatePublic(\n        new RSAPublicKeySpec(new BigInteger(modulus),\n            new BigInteger(publicExponent)));\n\nString licenseJsonString = RSAUtil.decryptByPublicKey(\n    RSAUtil.bcd2Str(license), pubKey);\nJSONObject jsonObject = (JSONObject) new JSONParser()\n    .parse(licenseJsonString);\n\nString code = (String) jsonObject.get(&amp;quot;code&amp;quot;);\nif (null != code &amp;amp;&amp;amp; !getSigarSequence().equals(code)) {\n    return false;\n}\nLong beginDate = (Long) jsonObject.get(&amp;quot;beginDate&amp;quot;);\nif (null != beginDate &amp;amp;&amp;amp; beginDate &amp;gt; new Date().getTime()) {\n    return false;\n}\nLong endDate = (Long) jsonObject.get(&amp;quot;endDate&amp;quot;);\nif (null != endDate &amp;amp;&amp;amp; endDate &amp;lt; new Date().getTime()) {\n    return false;\n}\nObject o = jsonObject.get(&amp;quot;count&amp;quot;);\nInteger count = o instanceof String ? Integer.valueOf((String) o)\n    : (Integer) o;\nif (null != count) {\n    //TODO 设置客户端数量\n}\nreturn true;\n</code></pre><p>} catch (Exception e) {<br>    e.printStackTrace();<br>    return false;<br>}<br>[/java]</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说虽然在学习python方面花了不少时间，但是python的开发效率的确很高，对同类元素的高度整合使得python开发的过程中用于很少为了「哪一种方案更好」这种事而浪费时间。虽然执行效率偏低，但是这对于一些轻量级的工具应用而言，省下来的开发时间远比程序执行所花费的时间来的多，的确是开发各种小工具的首选。</p>\n<p>另外，上面提到过rsa无法打包的问题，附件中已经用我自己实现的库代替了rsa，源代码下载后可以使用cxfreeze打包为exe文件。</p>\n<p><a href=\"http://www.woodensail.tk/archives/26/reg\" target=\"_blank\" rel=\"external\">python3实现注册机源码</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个注册机本来是用java写的的，但是在完成后收到了新的需求————添加gui。作为一个被java gui坑过一次的人，我绝不愿意再被坑第二次，而我手头又没装vs，所以便选择据说开发效率极高的python。<br>一边学一边做，开发过程虽说磕磕碰碰但是最后也算是顺利完成了，贴到网上，既是分享也是备忘。</p>\n<p>整个项目主要用到了tkinter,pyDes,rsa,multiprocessing等库。tkinter用于实现gui。pyDes用于对key文件加密。multiprocessing用于实现多线程素性测试以提高rsaKey的生成效率。而最关键的则是rsa库了，但是事实上最后的版本中是没有引入rsa库的，原因是rsa库在打包过程中出现了问题，所以我参考rsa库和网上的一篇论文实现了一个简单myrsa库。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>一个相当简陋的对话框带着四个同样简陋的按钮。<br>生成授权：接受用户输入的授权信息包括机器码，授权开始结束日期等<br>选择密钥：选择授权时所使用的key<br>创建密钥：随机生成rsaKey<br>导出公钥：导出rsa算法中的e和n，这两个参数需要写死在被保护的程序的验证模块中<br>[python]<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    root = Tk()<br>    Button(root, text=’生成授权’, relief=RAISED, command=register).pack()<br>    Button(root, text=’选择密钥’, relief=RAISED, command=select_key).pack()<br>    Button(root, text=’创建密钥’, relief=RAISED, command=create_key).pack()<br>    Button(root, text=’导出公钥’, relief=RAISED, command=get_pubkey).pack()<br>    root.mainloop()<br>[/python]</p>\n<h3 id=\"创建密钥\"><a href=\"#创建密钥\" class=\"headerlink\" title=\"创建密钥\"></a>创建密钥</h3><p>首先接受用户输入的密钥位数和密钥别名，然后调用myrsa库中的newkeys生成密钥，myrsa会根据当前机器的cpu核心数量开启相应数量的线程进行计算。「此处没有对length最大最小值进行约束，存在安全隐患」<br>密钥生成完毕后会调用save_key进行保存。程序将在key文件下下根据用户输入的别名生成一个文件夹，然后用文件头部的_des_key对密钥对加密，最后保存为pub.key和pri.key。加入des算法是因为注册机与key文件分离，为了防止key文件流出导致第三方任意授权所以对key进行加密。加入des后必须有key文件保存时所用的_des_key否则无法读取key文件。<br>此外，程序还会向同目录下生成一个xml文件保存key的别名、位数和kid，其中kid可写入被保护程序，用于判断授权文件所使用的key。<br>[python]<br>def create_key():<br>    length = simpledialog.askinteger(root, &quot;请输入密钥长度&quot;)<br>    remark = simpledialog.askstring(root, &quot;输入密钥名称&quot;)<br>    (pubkey, prikey) = newkeys(length)<br>    config = configparser.ConfigParser()<br>    config.add_section(‘info’)<br>    config.set(‘info’, ‘length’, str(length))<br>    save_key(pubkey, prikey, config, remark)<br>    messagebox.showinfo(&quot;&quot;, &quot;密钥生成完毕&quot;)</p>\n<p>def save_key(pubkey, prikey, config, remark):<br>    pub = pubkey.save_pkcs1()<br>    pri = prikey.save_pkcs1()<br>    encrypter = des(&quot;DESCRYPT&quot;, CBC, _des_key, pad=None, padmode=PAD_PKCS5)</p>\n<pre><code>time_stamp = int(time.time() * 1000)\nif os.path.exists(&apos;key/&apos; + remark):\n    i = 1\n    while os.path.exists(&apos;key/&apos; + remark + &apos;_&apos; + str(i)):\n        i += 1\n    remark = remark + &apos;_&apos; + str(i)\nconfig.set(&apos;info&apos;, &apos;kid&apos;, str(time_stamp))\ne_pub = encrypter.encrypt(pub)\ne_pri = encrypter.encrypt(pri)\n\nfile_prefix = &apos;key/&apos; + remark\nos.makedirs(file_prefix)\nwith open(file_prefix + &apos;/info.ini&apos;, &apos;w&apos;) as f:\n    config.write(f)\nwith open(file_prefix + &apos;/pub.key&apos;, &apos;wb&apos;) as f:\n    f.write(e_pub)\nwith open(file_prefix + &apos;/pri.key&apos;, &apos;wb&apos;) as f:\n    f.write(e_pri)\n</code></pre><p>[/python]</p>\n<h3 id=\"选择密钥\"><a href=\"#选择密钥\" class=\"headerlink\" title=\"选择密钥\"></a>选择密钥</h3><p>之前的控制台版可以列出所有密钥进行选择，gui版本只做了根据用户输入寻找key文件夹然后写入配置文件。<br>[python]<br>def select_key():<br>    key_dir = filedialog.askdirectory()<br>    if None == key_dir:<br>        return<br>    config = configparser.ConfigParser()<br>    config.read(‘config.ini’)<br>    if not config.has_section(‘info’):<br>        config.add_section(‘info’)<br>    config.set(‘info’, ‘current_key’, key_dir)<br>    with open(‘config.ini’, ‘w’) as f:<br>        config.write(f)<br>[/python]</p>\n<h3 id=\"导出公钥\"><a href=\"#导出公钥\" class=\"headerlink\" title=\"导出公钥\"></a>导出公钥</h3><p>这里和上面的选择密钥原本在控制台版中都属于密钥管理的功能，为了适应gui做了弱化，会读取当前选择的key然后将kid,n,e写入指定的配置文件。<br>[python]<br>def get_pubkey():<br>    key_dir = filedialog.askdirectory()<br>    (pubkey, prikey, config) = load_key(key_dir)<br>    name = filedialog.asksaveasfilename(defaultextension=’.ini’, initialfile=’pubkey’,<br>                                        initialdir=’’, filetypes=[(‘公钥’, ‘.ini’)])<br>    pubkey_cfg = configparser.ConfigParser()<br>    pubkey_cfg.add_section(‘pubkey’)<br>    pubkey_cfg.set(‘pubkey’, ‘kid’, config.get(‘info’, ‘kid’))<br>    pubkey_cfg.set(‘pubkey’, ‘n’, str(getattr(pubkey, ‘n’)))<br>    pubkey_cfg.set(‘pubkey’, ‘e’, str(getattr(pubkey, ‘e’)))<br>    with open(name, ‘w’) as f:<br>        pubkey_cfg.write(f)<br>[/python]</p>\n<h3 id=\"生成授权\"><a href=\"#生成授权\" class=\"headerlink\" title=\"生成授权\"></a>生成授权</h3><p>首先会读取配置文件获得当前的key，然后接受用户输入的授权信息并拼接成json串，最后调用_encrypt加密。加密完后会进行解密与原信息比对如果无法通过校验会提示密钥可能失效。<br>最后新建一个二进制文件在前8位写入kid，然后写入加密后的授权信息<br>[python]<br>def register():<br>    if not os.path.exists(‘config.ini’):<br>        select_key()<br>        print(1)<br>    config = configparser.ConfigParser()<br>    config.read(‘config.ini’)<br>    try:<br>        current_key = config.get(‘info’, ‘current_key’)<br>        print(current_key)<br>        load_key(current_key)<br>        print(3)<br>    except Exception:<br>        select_key()<br>        current_key = config.get(‘info’, ‘current_key’)</p>\n<pre><code>code = simpledialog.askstring(root, &apos;请输入机器码&apos;)\nbegin_str = simpledialog.askstring(root, &apos;请输入授权开始日期(yyyy-MM-dd)&apos;)\nend_str = simpledialog.askstring(root, &apos;请输入授权结束日期(yyyy-MM-dd)&apos;)\ncount = simpledialog.askstring(root, &apos;请输入客户端数量&apos;)\nname = filedialog.asksaveasfilename(defaultextension=&apos;.license&apos;, initialdir=&apos;&apos;, initialfile=str(int(time.time())),\n                                    filetypes=[(&apos;授权文件&apos;, &apos;.license&apos;)])\nreg_info = {}\nif not None == code:\n    reg_info[&apos;code&apos;] = code\nif not None == begin_str:\n    begin_date = time.strptime(begin_str, &amp;quot;%Y-%m-%d&amp;quot;)\n    reg_info[&apos;beginDate&apos;] = int(time.mktime(begin_date) * 1000)\nif not None == end_str:\n    end_date = time.strptime(end_str, &amp;quot;%Y-%m-%d&amp;quot;)\n    reg_info[&apos;endDate&apos;] = int(time.mktime(end_date) * 1000)\nif not None == count:\n    reg_info[&apos;count&apos;] = count\njson = JSONEncoder().encode(reg_info)\n\n(pubkey, prikey, config) = load_key(current_key)\ne = getattr(prikey, &apos;e&apos;)\nd = getattr(prikey, &apos;d&apos;)\nsetattr(prikey, &apos;e&apos;, d)\nsetattr(prikey, &apos;d&apos;, e)\nsetattr(pubkey, &apos;e&apos;, d)\ne_json = _encrypt(json.encode(), pubkey)\nd_json = _decrypt(e_json, prikey)\n\nif not json.encode() == d_json:\n    print(&amp;quot;校验失败，密钥可能损坏。请确认license是否有效&amp;quot;)\n\nwith open(name, &apos;wb&apos;) as f:\n    f.write(struct.pack(&apos;&amp;gt;q&apos;, int(config.get(&apos;info&apos;, &apos;kid&apos;))))\n    f.write(e_json)\n</code></pre><p>[/python]</p>\n<h3 id=\"验证部分\"><a href=\"#验证部分\" class=\"headerlink\" title=\"验证部分\"></a>验证部分</h3><p>关于被保护的程序中的验证部分这里以java举例，需要将导出公钥中得到的e,d,kid以常量形式写入程序，如果对不同版本需要隔离只需要修改常量即可。<br>在验证部分会读取指定文件，然后读取前八位与常量kid比较如果不同则认为授权与软件版本不匹配，如果相同则利用常量n和e生成公钥对剩余部分进行解密。解密后得到授权信息开始对机器码等参数进行验证并返回结果。<br>[java]<br>private static final String modulus = &quot;<strong><em>&quot;;<br>private static final String publicExponent = &quot;65537&quot;;<br>private static final long kid = </em></strong>L;</p>\n<p>try (DataInputStream in = new DataInputStream(new BufferedInputStream(<br>    new FileInputStream(file)))) {</p>\n<pre><code>Long licenseKid = in.readLong();\nif (kid != licenseKid) {\n    return false;\n}\nbyte[] license = new byte[(int) file.length() - 8];\nin.read(license);\n\nRSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(&amp;quot;RSA&amp;quot;)\n    .generatePublic(\n        new RSAPublicKeySpec(new BigInteger(modulus),\n            new BigInteger(publicExponent)));\n\nString licenseJsonString = RSAUtil.decryptByPublicKey(\n    RSAUtil.bcd2Str(license), pubKey);\nJSONObject jsonObject = (JSONObject) new JSONParser()\n    .parse(licenseJsonString);\n\nString code = (String) jsonObject.get(&amp;quot;code&amp;quot;);\nif (null != code &amp;amp;&amp;amp; !getSigarSequence().equals(code)) {\n    return false;\n}\nLong beginDate = (Long) jsonObject.get(&amp;quot;beginDate&amp;quot;);\nif (null != beginDate &amp;amp;&amp;amp; beginDate &amp;gt; new Date().getTime()) {\n    return false;\n}\nLong endDate = (Long) jsonObject.get(&amp;quot;endDate&amp;quot;);\nif (null != endDate &amp;amp;&amp;amp; endDate &amp;lt; new Date().getTime()) {\n    return false;\n}\nObject o = jsonObject.get(&amp;quot;count&amp;quot;);\nInteger count = o instanceof String ? Integer.valueOf((String) o)\n    : (Integer) o;\nif (null != count) {\n    //TODO 设置客户端数量\n}\nreturn true;\n</code></pre><p>} catch (Exception e) {<br>    e.printStackTrace();<br>    return false;<br>}<br>[/java]</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说虽然在学习python方面花了不少时间，但是python的开发效率的确很高，对同类元素的高度整合使得python开发的过程中用于很少为了「哪一种方案更好」这种事而浪费时间。虽然执行效率偏低，但是这对于一些轻量级的工具应用而言，省下来的开发时间远比程序执行所花费的时间来的多，的确是开发各种小工具的首选。</p>\n<p>另外，上面提到过rsa无法打包的问题，附件中已经用我自己实现的库代替了rsa，源代码下载后可以使用cxfreeze打包为exe文件。</p>\n<p><a href=\"http://www.woodensail.tk/archives/26/reg\">python3实现注册机源码</a></p>\n"},{"title":"PythonChallenge解题记录(0-17)","id":"56","date":"2014-12-24T02:15:11.000Z","_content":"\n群里的每日一题计划似乎进行了没几次就被群主遗忘了，我在闲极无聊之下找到了PythonChallenge。pc的玩法基本上就是根据每一关的提示找出下一关的密码，和闯关游戏类似。不过pc的特点是解析下一关地址的过程极其复杂，无法人工完成，只能借助计算机编程实现。pc主要涉及了网络爬虫，图像处理和文件操作，虽说没有涉及python高级技巧，但是对于python的常用功能也算是基本都覆盖到了，因此非常适合新手在缺少练手机会是拿来熟练python。最后，我的解题过程基本上市先看网上的攻略找到题目中谜题的含义，然后自己编写代码来解题，我建议大家尽量也采用这种方法，可以减少在谜面上浪费的脑细胞。\n\n**0**\nhttp://www.pythonchallenge.com/pc/def/0.html\n根据提示2^38得到274877906944\n[python]\n2 ** 38\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/274877906944.html\n\n**1**\nhttp://www.pythonchallenge.com/pc/def/map.html\n页面包含一段乱码：g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \n文字提示：everybody thinks twice before solving this.\n图片提示：k->m,o->q,e->g\n根据图片提示得出是凯撒密码，将字母后移两位得到\"i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long. using string. maketrans() is recommended. now apply on the url.\"\n用同样的方式处理url\"map\"得到\"ocr\"\n此处使用正则表达式匹配所有字母以避免影响到其他字符，匹配成功后使用lambda表达式完成字符替换\n[python]\n re.compile('[a-z]').sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), hint)\n re.compile('[a-z]').sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), 'map')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/ocr.html\n\n**2**\nhttp://www.pythonchallenge.com/pc/def/ocr.html\n根据提示在源代码中找到需要统计的字符串，统计完成后获得出现最少的次数min_times，筛选出所有出现次数为mint_times的字符拼接后得到equality\n[python]\nfor i in level2_str:\n    if None == count.get(i):\n        count[i] = 1\n        char.append(i)\n    else:\n        count[i] += 1\nmin_times = min(count.items(), key=lambda x: x[1])[1]\nchar = filter(lambda x: min_times == count[x], char)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/equality.html\n\n**3**\nhttp://www.pythonchallenge.com/pc/def/equality.html\n老样子在源代码中找到字符串，然后正则匹配出左右刚好各有三个大写字母的小写字母，最后拼接得到linkedlist\n[python]\nre.compile('[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]').findall(level3_str)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/linkedlist.html\n\n**4**\nhttp://www.pythonchallenge.com/pc/def/linkedlist.php\n根据页面提示打开下一个页面，只不过这关页面太多，必须要借助爬虫才行。\n需要注意的是这关有两处陷阱，第一处提示\"Yes. Divide by two and keep going.\"，需要将之前的数字直接除二得到下一个页面。第二处在中间有一个假数字，会导向一个错误页面。\n[python]\npattern = '(?&lt;=[^0-9])\\d+$' pattern = '(?&lt;=[^0-9])\\d+$'\nwhile 1:\n        page = request.urlopen(base + nothing).read().decode()\n        match = re.search(pattern, page)\n        if not match:\n            if 'Yes. Divide by two and keep going.' == page:\n                nothing = str(int(nothing) / 2)\n            else:\n                break\n        else:\n            nothing = match.group(0)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/peak.html\n\n**5**\nhttp://www.pythonchallenge.com/pc/def/peak.html\n这一关涉及到利用pickle模块进行反序列化，爬取banner.p，然后反序列化可以得到类似[[(' ', 95)], [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)]……]的数据，列表解析后输出可以得到用井号和空格拼成的channel单词\n[python]\nbanner = pickle.load(request.urlopen('http://www.pythonchallenge.com/pc/def/banner.p'))\nreturn ''.join(''.join([pair[0] * pair[1] for pair in line]) + '\\n' for line in banner)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/channel.html\n\n**6**\nhttp://www.pythonchallenge.com/pc/def/channel.html\n这关和第4关类似，也是循环读取，只不过这回变成了读取压缩文件。按第四关的方法读到最后提示需要压缩文件的注释，于是把所有注释拼接起来就可以得到类似上一关的字符画，内容为hockey。进入hockey.html后提示\"it's in the air. look at the letters. \"，观察组成字符画所用的字母分别是o,x,y,g,e,n。于是输入oxygen.html，成功到达下一关。\n[python]\n# 只展示与第4关不同的部分\nchannel = zipfile.ZipFile('channel.zip')\ncomments.append(channel.getinfo(nothing+'.txt').comment.decode())\nchannel.read(nothing+'.txt').decode()\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/oxygen.html\n\n**7**\n这一关用到了图像处理，需要借助pillow库完成。\n图片中央有一条灰阶，读取灰阶中每一格的RGB任一通道值，得到数字，转化为字符串后可以得到下一关的提示。再用正则将提示中的数字取出后再次转化就可以得到下一关的地址integrity。\nhttp://www.pythonchallenge.com/pc/def/oxygen.html\n[python]\nimg = Image.open('oxygen.png')\nhint = ''.join([chr(img.getpixel((i, 50))[0]) for i in range(0, 609, 7)])\nreturn ''.join([chr(int(i)) for i in re.findall('\\d+', hint)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/integrity.html\n\n**8**\n这一关是用bz2解压缩，在源代码中有两个字符串，分别解压后得到'huge'和'file'，点击蜜蜂提示输入账号密码，将量单词分别输入跳转至下一个页面。\nhttp://www.pythonchallenge.com/pc/def/integrity.html\n[python]\nbz2.decompress(un).decode()\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/good.html\n\n**9**\n这题搞得跟脑筋急转弯似的，但仍然是图像处理。源代码中有两个数组first和second，分别将其中的数字两两一组做为坐标在图上画点。完成后可以得到两幅画，分别是牛的侧身和牛头，所以答案是bull。\nhttp://www.pythonchallenge.com/pc/return/good.html\n[python]\nim = Image.new(&quot;RGB&quot;, (500, 500))\n    for i in range(0, len(level9_first), 2):\n        im.putpixel((level9_first[i], level9_first[i + 1]), (255, 255, 255))\n    im.save('level9_1.png')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/bull.html\n\n**10**\n找规律的脑筋急转弯：\n1 = 1个1 = 11\n11 = 2个1 = 21\n21 = 1个2加1个1 = 1211\n依次类推。\n我采用正则表达式的方式对数字进行分组，如将111221拆分为[111,22,1]。然后用列表解析的方式生成下一个数，[111,22,1]将被解析为[31,22,11],最后用join合并后进行下一轮处理。最后得到第31个数长度为5808\nhttp://www.pythonchallenge.com/pc/return/bull.html\n[python]\nnum = '1'\nfor i in range(0, 30):\nnum = ''.join([str(len(x[1]) + 1) + x[0] for x in re.findall(r'(\\d)(\\1*)', num)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/5808.html\n\n**11**\n还是图像处理，这次是将原图中所有xy坐标都为奇数和都为偶数的点取出生成单独的图片，生成完后可以明显的看到右上角有evil字样。\nhttp://www.pythonchallenge.com/pc/return/5808.html\n[python]\nim = Image.open('cave.jpg')\nx, y = im.size\nim_new = Image.new(im.mode, (int(x / 2), int(y / 2)))\nfor i in range(0, x, 2):\n    for j in range(0, y, 2):\n        im_new.putpixel((int(i / 2), int(j / 2)), im.getpixel((i, j)))\nim_new.save('level11_1.jpg')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/evil.html\n\n**12**\n又是一道脑筋急转弯的题。第一页中图名字是evil1.jpg，修改为evil2.jpg后看到提示将后缀名修改为gfx。修改完后成功下载evil2.gfx文件。另外根据evil1中分牌的提示可知需要将文件按分牌方式分成五份。我使用的方式是先将文件全部读出然后列表解析生成5个子bytes，最后写入新文件。写入完成后看图可知下一关地址为disproportional\nlenge.com/pc/return/evil.html\n[python]\nsource = bytearray(file.read())\ns1 = bytes([source[i] for i in range(0, len(source), 5)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/disproportional.html\n\n**13**\n页面提示\"phone that evil\"于是在图片中的电话上按键，按到e所在的5键时跳转到了phonebook.php，内容是一个报错的xml。查了一下这里是用到了xml远程调用，需要导入xmlrpc，用xmlrpc连接上phonebook.php后调用listMethods发现有一个phone方法。于是调用phone('evil')，提示\"He is not the evil\"。再上网查了一下发现上一关中evil4.jpg有提示\"Bert is evil\"，于是phone('Bert')，返回555-ITALY，下一关为italy\nhttp://www.pythonchallenge.com/pc/return/disproportional.html\n[python]\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/italy.html\n\n**14**\n根据图片和源代码中的\"100*100 = (100+99+99+98) + (...\"提示，可知需要将下方10000*1的图从外向里盘绕形成一个100*100的新图片。按要求生成图片后结果是一只猫，进入cat.html提示\"and its name is uzi. you'll hear from him later.\"。下一关地址为uzi\nhttp://www.pythonchallenge.com/pc/return/italy.html\n[python]\nim = Image.open('pc/wire.png')\nim_new = Image.new(im.mode, (100, 100))\ncount = 0\nfor i in range(0, 50):\n    jump = 99 - 2 * i\n    for j in range(i, 99 - i):\n        im_new.putpixel((j, i), im.getpixel((count, 0)))\n        im_new.putpixel((99 - i, j), im.getpixel((count + jump, 0)))\n        im_new.putpixel((99 - j, 99 - i), im.getpixel((count + 2 * jump, 0)))\n        im_new.putpixel((i, 99 - j), im.getpixel((count + 3 * jump, 0)))\n        count += 1\n    count += jump * 3\nim_new.save(&quot;pc/level14.jpg&quot;)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/uzi.html\n\n**15**\n日历显示为1xx6年1月26日周一，且右下角显示二月有29天为闰年，找出所有符合该条件的日期，分别为1176，1356，1576，1756，1976年的1月26日。然后根据源文件中的提示\"he ain't the youngest, he is the second. buy flowers for tomorrow\"。5个年份中第二靠后的是1756，搜索1756年1月27日为莫扎特的生日，符合所有提示。所以，下一关地址为mozart\nhttp://www.pythonchallenge.com/pc/return/uzi.html\n[python]\nfor year in range(1016, 2000, 20):\n    t = date(year, 1, 26)\n    if (t+timedelta(34)).month == 2 and t.weekday() == 0:\n        print(t.isoformat())\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/mozart.html\n\n**16**\n依旧是图像处理，干脆改名叫image challenge得了……这题是根据图片中的红色线段对齐每一行像素，对齐完后得到的图中有romance字样。\nhttp://www.pythonchallenge.com/pc/return/mozart.html\n[python]\nfor i in range(0, 480):\n    flag = 0\n    for j in range(0, 640):\n        if 195 == im.getpixel((j, i)):\n            flag += 1\n        if 5 == flag:\n            flag = j\n            break\n    for j in range(0, 640):\n        im_new.putpixel(((j - flag) % 640, i), im.getpixel((j, i)))\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/romance.html\n\n**17**\n这一关算是一个总结，涉及了前面关卡中出图像处理外的大部分内容，同时加入了cookie的处理，而且猜谜性质更加突出了。为了完成这一关在网上差了不少的资料，总算是勉强完成了。\n这一关的主图是一堆饼干，暗示的是cookie，而左下角的小图是第四关的图片，于是进入第四关,发现第四关的cookie中有提示：\"info=you+should+have+followed+busynothing...\"。尝试将用busynothing替换nothing，结果可行。接下来按照第四关的方式迭代，不过迭代的过程中需要收集cookie信息，每个网页都带有一字节的信息，将这些信息提取出来并且拼接得到一个bytes类型，开头是b'BZh91AY&SY',一看就是第8关的内容bz2，用bz2解压后得到'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he'll understand.'。顺便一说，在'linkedlist.php?busynothing=19242'中cookie为'+',但实际上应该是空格，我不清楚到底是官方出错还是有什么其他的我没发现的暗示，但是我在这上面几乎浪费了一上午的时间，最后选择了当busynothing为19242时手动替换结果，才算是成功解压出信息。\n言归正传，上面的提示可以看出跟之前的莫扎特有关，上网查莫扎特的父亲名字是'Leopold Mozart'。接下来用第13关的方法phone('Leopold'),结果是'no! i mean yes! but ../stuff/violin.php.'，进入该页面后有一张莫扎特的照片，页面标题是'it's me. what do you want?'，总算是找到莫扎特了……接下来通过cookie给莫扎特鲜花，也就是请求时在cookie中带上'the flowers are on their way'的信息，得到结果'oh well, don\\'t you dare to forget the balloons.'其中balloons就是下一关的地址\nhttp://www.pythonchallenge.com/pc/return/romance.html\n[python]\npage = ''\nbase = 'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='\nnothing = '12345'\npattern = '(?&lt;=[^0-9])\\d+$'\ncookies = []\nwhile 1:\n    while 1:\n        try:\n            page = request.urlopen(base + nothing, timeout=1)\n            break\n        except:\n            pass\n    data = page.read().decode()\n    match = re.search(pattern, data)\n    cookie = page.info().get(&quot;Set-Cookie&quot;)\n    cookies.append(parse.unquote_to_bytes(re.search(&quot;(?&lt;==)[^;]+(?=;)&quot;, cookie).group(0)))\n    if '19242' == nothing:\n        cookies.pop()\n        cookies.append(b' ')\n    if not match:\n        if 'Yes. Divide by two and keep going.' == page:\n            nothing = str(int(nothing) / 2)\n        else:\n            break\n    else:\n        nothing = match.group(0)\n\ndata = bz2.decompress(b''.join(cookies))\nserver = client.Server(&quot;http://www.pythonchallenge.com/pc/phonebook.php&quot;)\nserver.phone('Leopold')\nhttp = urllib3.PoolManager().request('GET', 'http://www.pythonchallenge.com/pc/stuff/violin.php',\n                                     headers={'Cookie': &quot;info=the flowers are on their way&quot;})\nprint(http.data)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/balloons.html\n\nPythonChallenge做到这里也算是告一段落了，后面还有十多关没做，不过接下来这段时间会很忙，所以只能找机会慢慢完成了。","source":"_posts/pythonchallenge-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-950-17.md","raw":"---\ntitle: PythonChallenge解题记录(0-17)\ntags:\n  - python\n  - PythonChallenge\n  - 练习\nid: 56\ncategories:\n  - python\ndate: 2014-12-24 10:15:11\n---\n\n群里的每日一题计划似乎进行了没几次就被群主遗忘了，我在闲极无聊之下找到了PythonChallenge。pc的玩法基本上就是根据每一关的提示找出下一关的密码，和闯关游戏类似。不过pc的特点是解析下一关地址的过程极其复杂，无法人工完成，只能借助计算机编程实现。pc主要涉及了网络爬虫，图像处理和文件操作，虽说没有涉及python高级技巧，但是对于python的常用功能也算是基本都覆盖到了，因此非常适合新手在缺少练手机会是拿来熟练python。最后，我的解题过程基本上市先看网上的攻略找到题目中谜题的含义，然后自己编写代码来解题，我建议大家尽量也采用这种方法，可以减少在谜面上浪费的脑细胞。\n\n**0**\nhttp://www.pythonchallenge.com/pc/def/0.html\n根据提示2^38得到274877906944\n[python]\n2 ** 38\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/274877906944.html\n\n**1**\nhttp://www.pythonchallenge.com/pc/def/map.html\n页面包含一段乱码：g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \n文字提示：everybody thinks twice before solving this.\n图片提示：k->m,o->q,e->g\n根据图片提示得出是凯撒密码，将字母后移两位得到\"i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long. using string. maketrans() is recommended. now apply on the url.\"\n用同样的方式处理url\"map\"得到\"ocr\"\n此处使用正则表达式匹配所有字母以避免影响到其他字符，匹配成功后使用lambda表达式完成字符替换\n[python]\n re.compile('[a-z]').sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), hint)\n re.compile('[a-z]').sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), 'map')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/ocr.html\n\n**2**\nhttp://www.pythonchallenge.com/pc/def/ocr.html\n根据提示在源代码中找到需要统计的字符串，统计完成后获得出现最少的次数min_times，筛选出所有出现次数为mint_times的字符拼接后得到equality\n[python]\nfor i in level2_str:\n    if None == count.get(i):\n        count[i] = 1\n        char.append(i)\n    else:\n        count[i] += 1\nmin_times = min(count.items(), key=lambda x: x[1])[1]\nchar = filter(lambda x: min_times == count[x], char)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/equality.html\n\n**3**\nhttp://www.pythonchallenge.com/pc/def/equality.html\n老样子在源代码中找到字符串，然后正则匹配出左右刚好各有三个大写字母的小写字母，最后拼接得到linkedlist\n[python]\nre.compile('[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]').findall(level3_str)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/linkedlist.html\n\n**4**\nhttp://www.pythonchallenge.com/pc/def/linkedlist.php\n根据页面提示打开下一个页面，只不过这关页面太多，必须要借助爬虫才行。\n需要注意的是这关有两处陷阱，第一处提示\"Yes. Divide by two and keep going.\"，需要将之前的数字直接除二得到下一个页面。第二处在中间有一个假数字，会导向一个错误页面。\n[python]\npattern = '(?&lt;=[^0-9])\\d+$' pattern = '(?&lt;=[^0-9])\\d+$'\nwhile 1:\n        page = request.urlopen(base + nothing).read().decode()\n        match = re.search(pattern, page)\n        if not match:\n            if 'Yes. Divide by two and keep going.' == page:\n                nothing = str(int(nothing) / 2)\n            else:\n                break\n        else:\n            nothing = match.group(0)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/peak.html\n\n**5**\nhttp://www.pythonchallenge.com/pc/def/peak.html\n这一关涉及到利用pickle模块进行反序列化，爬取banner.p，然后反序列化可以得到类似[[(' ', 95)], [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)]……]的数据，列表解析后输出可以得到用井号和空格拼成的channel单词\n[python]\nbanner = pickle.load(request.urlopen('http://www.pythonchallenge.com/pc/def/banner.p'))\nreturn ''.join(''.join([pair[0] * pair[1] for pair in line]) + '\\n' for line in banner)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/channel.html\n\n**6**\nhttp://www.pythonchallenge.com/pc/def/channel.html\n这关和第4关类似，也是循环读取，只不过这回变成了读取压缩文件。按第四关的方法读到最后提示需要压缩文件的注释，于是把所有注释拼接起来就可以得到类似上一关的字符画，内容为hockey。进入hockey.html后提示\"it's in the air. look at the letters. \"，观察组成字符画所用的字母分别是o,x,y,g,e,n。于是输入oxygen.html，成功到达下一关。\n[python]\n# 只展示与第4关不同的部分\nchannel = zipfile.ZipFile('channel.zip')\ncomments.append(channel.getinfo(nothing+'.txt').comment.decode())\nchannel.read(nothing+'.txt').decode()\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/oxygen.html\n\n**7**\n这一关用到了图像处理，需要借助pillow库完成。\n图片中央有一条灰阶，读取灰阶中每一格的RGB任一通道值，得到数字，转化为字符串后可以得到下一关的提示。再用正则将提示中的数字取出后再次转化就可以得到下一关的地址integrity。\nhttp://www.pythonchallenge.com/pc/def/oxygen.html\n[python]\nimg = Image.open('oxygen.png')\nhint = ''.join([chr(img.getpixel((i, 50))[0]) for i in range(0, 609, 7)])\nreturn ''.join([chr(int(i)) for i in re.findall('\\d+', hint)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/def/integrity.html\n\n**8**\n这一关是用bz2解压缩，在源代码中有两个字符串，分别解压后得到'huge'和'file'，点击蜜蜂提示输入账号密码，将量单词分别输入跳转至下一个页面。\nhttp://www.pythonchallenge.com/pc/def/integrity.html\n[python]\nbz2.decompress(un).decode()\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/good.html\n\n**9**\n这题搞得跟脑筋急转弯似的，但仍然是图像处理。源代码中有两个数组first和second，分别将其中的数字两两一组做为坐标在图上画点。完成后可以得到两幅画，分别是牛的侧身和牛头，所以答案是bull。\nhttp://www.pythonchallenge.com/pc/return/good.html\n[python]\nim = Image.new(&quot;RGB&quot;, (500, 500))\n    for i in range(0, len(level9_first), 2):\n        im.putpixel((level9_first[i], level9_first[i + 1]), (255, 255, 255))\n    im.save('level9_1.png')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/bull.html\n\n**10**\n找规律的脑筋急转弯：\n1 = 1个1 = 11\n11 = 2个1 = 21\n21 = 1个2加1个1 = 1211\n依次类推。\n我采用正则表达式的方式对数字进行分组，如将111221拆分为[111,22,1]。然后用列表解析的方式生成下一个数，[111,22,1]将被解析为[31,22,11],最后用join合并后进行下一轮处理。最后得到第31个数长度为5808\nhttp://www.pythonchallenge.com/pc/return/bull.html\n[python]\nnum = '1'\nfor i in range(0, 30):\nnum = ''.join([str(len(x[1]) + 1) + x[0] for x in re.findall(r'(\\d)(\\1*)', num)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/5808.html\n\n**11**\n还是图像处理，这次是将原图中所有xy坐标都为奇数和都为偶数的点取出生成单独的图片，生成完后可以明显的看到右上角有evil字样。\nhttp://www.pythonchallenge.com/pc/return/5808.html\n[python]\nim = Image.open('cave.jpg')\nx, y = im.size\nim_new = Image.new(im.mode, (int(x / 2), int(y / 2)))\nfor i in range(0, x, 2):\n    for j in range(0, y, 2):\n        im_new.putpixel((int(i / 2), int(j / 2)), im.getpixel((i, j)))\nim_new.save('level11_1.jpg')\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/evil.html\n\n**12**\n又是一道脑筋急转弯的题。第一页中图名字是evil1.jpg，修改为evil2.jpg后看到提示将后缀名修改为gfx。修改完后成功下载evil2.gfx文件。另外根据evil1中分牌的提示可知需要将文件按分牌方式分成五份。我使用的方式是先将文件全部读出然后列表解析生成5个子bytes，最后写入新文件。写入完成后看图可知下一关地址为disproportional\nlenge.com/pc/return/evil.html\n[python]\nsource = bytearray(file.read())\ns1 = bytes([source[i] for i in range(0, len(source), 5)])\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/disproportional.html\n\n**13**\n页面提示\"phone that evil\"于是在图片中的电话上按键，按到e所在的5键时跳转到了phonebook.php，内容是一个报错的xml。查了一下这里是用到了xml远程调用，需要导入xmlrpc，用xmlrpc连接上phonebook.php后调用listMethods发现有一个phone方法。于是调用phone('evil')，提示\"He is not the evil\"。再上网查了一下发现上一关中evil4.jpg有提示\"Bert is evil\"，于是phone('Bert')，返回555-ITALY，下一关为italy\nhttp://www.pythonchallenge.com/pc/return/disproportional.html\n[python]\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/italy.html\n\n**14**\n根据图片和源代码中的\"100*100 = (100+99+99+98) + (...\"提示，可知需要将下方10000*1的图从外向里盘绕形成一个100*100的新图片。按要求生成图片后结果是一只猫，进入cat.html提示\"and its name is uzi. you'll hear from him later.\"。下一关地址为uzi\nhttp://www.pythonchallenge.com/pc/return/italy.html\n[python]\nim = Image.open('pc/wire.png')\nim_new = Image.new(im.mode, (100, 100))\ncount = 0\nfor i in range(0, 50):\n    jump = 99 - 2 * i\n    for j in range(i, 99 - i):\n        im_new.putpixel((j, i), im.getpixel((count, 0)))\n        im_new.putpixel((99 - i, j), im.getpixel((count + jump, 0)))\n        im_new.putpixel((99 - j, 99 - i), im.getpixel((count + 2 * jump, 0)))\n        im_new.putpixel((i, 99 - j), im.getpixel((count + 3 * jump, 0)))\n        count += 1\n    count += jump * 3\nim_new.save(&quot;pc/level14.jpg&quot;)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/uzi.html\n\n**15**\n日历显示为1xx6年1月26日周一，且右下角显示二月有29天为闰年，找出所有符合该条件的日期，分别为1176，1356，1576，1756，1976年的1月26日。然后根据源文件中的提示\"he ain't the youngest, he is the second. buy flowers for tomorrow\"。5个年份中第二靠后的是1756，搜索1756年1月27日为莫扎特的生日，符合所有提示。所以，下一关地址为mozart\nhttp://www.pythonchallenge.com/pc/return/uzi.html\n[python]\nfor year in range(1016, 2000, 20):\n    t = date(year, 1, 26)\n    if (t+timedelta(34)).month == 2 and t.weekday() == 0:\n        print(t.isoformat())\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/mozart.html\n\n**16**\n依旧是图像处理，干脆改名叫image challenge得了……这题是根据图片中的红色线段对齐每一行像素，对齐完后得到的图中有romance字样。\nhttp://www.pythonchallenge.com/pc/return/mozart.html\n[python]\nfor i in range(0, 480):\n    flag = 0\n    for j in range(0, 640):\n        if 195 == im.getpixel((j, i)):\n            flag += 1\n        if 5 == flag:\n            flag = j\n            break\n    for j in range(0, 640):\n        im_new.putpixel(((j - flag) % 640, i), im.getpixel((j, i)))\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/romance.html\n\n**17**\n这一关算是一个总结，涉及了前面关卡中出图像处理外的大部分内容，同时加入了cookie的处理，而且猜谜性质更加突出了。为了完成这一关在网上差了不少的资料，总算是勉强完成了。\n这一关的主图是一堆饼干，暗示的是cookie，而左下角的小图是第四关的图片，于是进入第四关,发现第四关的cookie中有提示：\"info=you+should+have+followed+busynothing...\"。尝试将用busynothing替换nothing，结果可行。接下来按照第四关的方式迭代，不过迭代的过程中需要收集cookie信息，每个网页都带有一字节的信息，将这些信息提取出来并且拼接得到一个bytes类型，开头是b'BZh91AY&SY',一看就是第8关的内容bz2，用bz2解压后得到'is it the 26th already? call his father and inform him that \"the flowers are on their way\". he'll understand.'。顺便一说，在'linkedlist.php?busynothing=19242'中cookie为'+',但实际上应该是空格，我不清楚到底是官方出错还是有什么其他的我没发现的暗示，但是我在这上面几乎浪费了一上午的时间，最后选择了当busynothing为19242时手动替换结果，才算是成功解压出信息。\n言归正传，上面的提示可以看出跟之前的莫扎特有关，上网查莫扎特的父亲名字是'Leopold Mozart'。接下来用第13关的方法phone('Leopold'),结果是'no! i mean yes! but ../stuff/violin.php.'，进入该页面后有一张莫扎特的照片，页面标题是'it's me. what do you want?'，总算是找到莫扎特了……接下来通过cookie给莫扎特鲜花，也就是请求时在cookie中带上'the flowers are on their way'的信息，得到结果'oh well, don\\'t you dare to forget the balloons.'其中balloons就是下一关的地址\nhttp://www.pythonchallenge.com/pc/return/romance.html\n[python]\npage = ''\nbase = 'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing='\nnothing = '12345'\npattern = '(?&lt;=[^0-9])\\d+$'\ncookies = []\nwhile 1:\n    while 1:\n        try:\n            page = request.urlopen(base + nothing, timeout=1)\n            break\n        except:\n            pass\n    data = page.read().decode()\n    match = re.search(pattern, data)\n    cookie = page.info().get(&quot;Set-Cookie&quot;)\n    cookies.append(parse.unquote_to_bytes(re.search(&quot;(?&lt;==)[^;]+(?=;)&quot;, cookie).group(0)))\n    if '19242' == nothing:\n        cookies.pop()\n        cookies.append(b' ')\n    if not match:\n        if 'Yes. Divide by two and keep going.' == page:\n            nothing = str(int(nothing) / 2)\n        else:\n            break\n    else:\n        nothing = match.group(0)\n\ndata = bz2.decompress(b''.join(cookies))\nserver = client.Server(&quot;http://www.pythonchallenge.com/pc/phonebook.php&quot;)\nserver.phone('Leopold')\nhttp = urllib3.PoolManager().request('GET', 'http://www.pythonchallenge.com/pc/stuff/violin.php',\n                                     headers={'Cookie': &quot;info=the flowers are on their way&quot;})\nprint(http.data)\n[/python]\n下一关地址：http://www.pythonchallenge.com/pc/return/balloons.html\n\nPythonChallenge做到这里也算是告一段落了，后面还有十多关没做，不过接下来这段时间会很忙，所以只能找机会慢慢完成了。","slug":"pythonchallenge-e8-a7-a3-e9-a2-98-e8-ae-b0-e5-bd-950-17","published":1,"updated":"2016-05-06T02:34:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z3f0021d0ch3a0co6z0","content":"<p>群里的每日一题计划似乎进行了没几次就被群主遗忘了，我在闲极无聊之下找到了PythonChallenge。pc的玩法基本上就是根据每一关的提示找出下一关的密码，和闯关游戏类似。不过pc的特点是解析下一关地址的过程极其复杂，无法人工完成，只能借助计算机编程实现。pc主要涉及了网络爬虫，图像处理和文件操作，虽说没有涉及python高级技巧，但是对于python的常用功能也算是基本都覆盖到了，因此非常适合新手在缺少练手机会是拿来熟练python。最后，我的解题过程基本上市先看网上的攻略找到题目中谜题的含义，然后自己编写代码来解题，我建议大家尽量也采用这种方法，可以减少在谜面上浪费的脑细胞。</p>\n<p><strong>0</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/0.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/0.html</a><br>根据提示2^38得到274877906944<br>[python]<br>2 ** 38<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/274877906944.html</a></p>\n<p><strong>1</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/map.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/map.html</a><br>页面包含一段乱码：g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr’q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.<br>文字提示：everybody thinks twice before solving this.<br>图片提示：k-&gt;m,o-&gt;q,e-&gt;g<br>根据图片提示得出是凯撒密码，将字母后移两位得到”i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string. maketrans() is recommended. now apply on the url.”<br>用同样的方式处理url”map”得到”ocr”<br>此处使用正则表达式匹配所有字母以避免影响到其他字符，匹配成功后使用lambda表达式完成字符替换<br>[python]<br> re.compile(‘[a-z]’).sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), hint)<br> re.compile(‘[a-z]’).sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), ‘map’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>\n<p><strong>2</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/ocr.html</a><br>根据提示在源代码中找到需要统计的字符串，统计完成后获得出现最少的次数min_times，筛选出所有出现次数为mint_times的字符拼接后得到equality<br>[python]<br>for i in level2_str:<br>    if None == count.get(i):<br>        count[i] = 1<br>        char.append(i)<br>    else:<br>        count[i] += 1<br>min_times = min(count.items(), key=lambda x: x[1])[1]<br>char = filter(lambda x: min_times == count[x], char)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/equality.html</a></p>\n<p><strong>3</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/equality.html</a><br>老样子在源代码中找到字符串，然后正则匹配出左右刚好各有三个大写字母的小写字母，最后拼接得到linkedlist<br>[python]<br>re.compile(‘[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]’).findall(level3_str)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/linkedlist.html</a></p>\n<p><strong>4</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br>根据页面提示打开下一个页面，只不过这关页面太多，必须要借助爬虫才行。<br>需要注意的是这关有两处陷阱，第一处提示”Yes. Divide by two and keep going.”，需要将之前的数字直接除二得到下一个页面。第二处在中间有一个假数字，会导向一个错误页面。<br>[python]<br>pattern = ‘(?&lt;=[^0-9])\\d+$’ pattern = ‘(?&lt;=[^0-9])\\d+$’<br>while 1:<br>        page = request.urlopen(base + nothing).read().decode()<br>        match = re.search(pattern, page)<br>        if not match:<br>            if ‘Yes. Divide by two and keep going.’ == page:<br>                nothing = str(int(nothing) / 2)<br>            else:<br>                break<br>        else:<br>            nothing = match.group(0)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/peak.html</a></p>\n<p><strong>5</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/peak.html</a><br>这一关涉及到利用pickle模块进行反序列化，爬取banner.p，然后反序列化可以得到类似[[(‘ ‘, 95)], [(‘ ‘, 14), (‘#’, 5), (‘ ‘, 70), (‘#’, 5), (‘ ‘, 1)]……]的数据，列表解析后输出可以得到用井号和空格拼成的channel单词<br>[python]<br>banner = pickle.load(request.urlopen(‘<a href=\"http://www.pythonchallenge.com/pc/def/banner.p\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/banner.p</a>‘))<br>return ‘’.join(‘’.join([pair[0] * pair[1] for pair in line]) + ‘\\n’ for line in banner)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/channel.html</a></p>\n<p><strong>6</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/channel.html</a><br>这关和第4关类似，也是循环读取，只不过这回变成了读取压缩文件。按第四关的方法读到最后提示需要压缩文件的注释，于是把所有注释拼接起来就可以得到类似上一关的字符画，内容为hockey。进入hockey.html后提示”it’s in the air. look at the letters. “，观察组成字符画所用的字母分别是o,x,y,g,e,n。于是输入oxygen.html，成功到达下一关。<br>[python]</p>\n<h1 id=\"只展示与第4关不同的部分\"><a href=\"#只展示与第4关不同的部分\" class=\"headerlink\" title=\"只展示与第4关不同的部分\"></a>只展示与第4关不同的部分</h1><p>channel = zipfile.ZipFile(‘channel.zip’)<br>comments.append(channel.getinfo(nothing+’.txt’).comment.decode())<br>channel.read(nothing+’.txt’).decode()<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/oxygen.html</a></p>\n<p><strong>7</strong><br>这一关用到了图像处理，需要借助pillow库完成。<br>图片中央有一条灰阶，读取灰阶中每一格的RGB任一通道值，得到数字，转化为字符串后可以得到下一关的提示。再用正则将提示中的数字取出后再次转化就可以得到下一关的地址integrity。<br><a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/oxygen.html</a><br>[python]<br>img = Image.open(‘oxygen.png’)<br>hint = ‘’.join([chr(img.getpixel((i, 50))[0]) for i in range(0, 609, 7)])<br>return ‘’.join([chr(int(i)) for i in re.findall(‘\\d+’, hint)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>\n<p><strong>8</strong><br>这一关是用bz2解压缩，在源代码中有两个字符串，分别解压后得到’huge’和’file’，点击蜜蜂提示输入账号密码，将量单词分别输入跳转至下一个页面。<br><a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/integrity.html</a><br>[python]<br>bz2.decompress(un).decode()<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/good.html</a></p>\n<p><strong>9</strong><br>这题搞得跟脑筋急转弯似的，但仍然是图像处理。源代码中有两个数组first和second，分别将其中的数字两两一组做为坐标在图上画点。完成后可以得到两幅画，分别是牛的侧身和牛头，所以答案是bull。<br><a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/good.html</a><br>[python]<br>im = Image.new(&quot;RGB&quot;, (500, 500))<br>    for i in range(0, len(level9_first), 2):<br>        im.putpixel((level9_first[i], level9_first[i + 1]), (255, 255, 255))<br>    im.save(‘level9_1.png’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/bull.html</a></p>\n<p><strong>10</strong><br>找规律的脑筋急转弯：<br>1 = 1个1 = 11<br>11 = 2个1 = 21<br>21 = 1个2加1个1 = 1211<br>依次类推。<br>我采用正则表达式的方式对数字进行分组，如将111221拆分为[111,22,1]。然后用列表解析的方式生成下一个数，[111,22,1]将被解析为[31,22,11],最后用join合并后进行下一轮处理。最后得到第31个数长度为5808<br><a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/bull.html</a><br>[python]<br>num = ‘1’<br>for i in range(0, 30):<br>num = ‘’.join([str(len(x[1]) + 1) + x[0] for x in re.findall(r’(\\d)(\\1*)’, num)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/5808.html</a></p>\n<p><strong>11</strong><br>还是图像处理，这次是将原图中所有xy坐标都为奇数和都为偶数的点取出生成单独的图片，生成完后可以明显的看到右上角有evil字样。<br><a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/5808.html</a><br>[python]<br>im = Image.open(‘cave.jpg’)<br>x, y = im.size<br>im_new = Image.new(im.mode, (int(x / 2), int(y / 2)))<br>for i in range(0, x, 2):<br>    for j in range(0, y, 2):<br>        im_new.putpixel((int(i / 2), int(j / 2)), im.getpixel((i, j)))<br>im_new.save(‘level11_1.jpg’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/evil.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/evil.html</a></p>\n<p><strong>12</strong><br>又是一道脑筋急转弯的题。第一页中图名字是evil1.jpg，修改为evil2.jpg后看到提示将后缀名修改为gfx。修改完后成功下载evil2.gfx文件。另外根据evil1中分牌的提示可知需要将文件按分牌方式分成五份。我使用的方式是先将文件全部读出然后列表解析生成5个子bytes，最后写入新文件。写入完成后看图可知下一关地址为disproportional<br>lenge.com/pc/return/evil.html<br>[python]<br>source = bytearray(file.read())<br>s1 = bytes([source[i] for i in range(0, len(source), 5)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>\n<p><strong>13</strong><br>页面提示”phone that evil”于是在图片中的电话上按键，按到e所在的5键时跳转到了phonebook.php，内容是一个报错的xml。查了一下这里是用到了xml远程调用，需要导入xmlrpc，用xmlrpc连接上phonebook.php后调用listMethods发现有一个phone方法。于是调用phone(‘evil’)，提示”He is not the evil”。再上网查了一下发现上一关中evil4.jpg有提示”Bert is evil”，于是phone(‘Bert’)，返回555-ITALY，下一关为italy<br><a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/disproportional.html</a><br>[python]<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/italy.html</a></p>\n<p><strong>14</strong><br>根据图片和源代码中的”100<em>100 = (100+99+99+98) + (…”提示，可知需要将下方10000</em>1的图从外向里盘绕形成一个100<em>100的新图片。按要求生成图片后结果是一只猫，进入cat.html提示”and its name is uzi. you’ll hear from him later.”。下一关地址为uzi<br><a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/italy.html</a><br>[python]<br>im = Image.open(‘pc/wire.png’)<br>im_new = Image.new(im.mode, (100, 100))<br>count = 0<br>for i in range(0, 50):<br>    jump = 99 - 2 </em> i<br>    for j in range(i, 99 - i):<br>        im_new.putpixel((j, i), im.getpixel((count, 0)))<br>        im_new.putpixel((99 - i, j), im.getpixel((count + jump, 0)))<br>        im_new.putpixel((99 - j, 99 - i), im.getpixel((count + 2 <em> jump, 0)))<br>        im_new.putpixel((i, 99 - j), im.getpixel((count + 3 </em> jump, 0)))<br>        count += 1<br>    count += jump * 3<br>im_new.save(&quot;pc/level14.jpg&quot;)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/uzi.html</a></p>\n<p><strong>15</strong><br>日历显示为1xx6年1月26日周一，且右下角显示二月有29天为闰年，找出所有符合该条件的日期，分别为1176，1356，1576，1756，1976年的1月26日。然后根据源文件中的提示”he ain’t the youngest, he is the second. buy flowers for tomorrow”。5个年份中第二靠后的是1756，搜索1756年1月27日为莫扎特的生日，符合所有提示。所以，下一关地址为mozart<br><a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/uzi.html</a><br>[python]<br>for year in range(1016, 2000, 20):<br>    t = date(year, 1, 26)<br>    if (t+timedelta(34)).month == 2 and t.weekday() == 0:<br>        print(t.isoformat())<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/mozart.html</a></p>\n<p><strong>16</strong><br>依旧是图像处理，干脆改名叫image challenge得了……这题是根据图片中的红色线段对齐每一行像素，对齐完后得到的图中有romance字样。<br><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/mozart.html</a><br>[python]<br>for i in range(0, 480):<br>    flag = 0<br>    for j in range(0, 640):<br>        if 195 == im.getpixel((j, i)):<br>            flag += 1<br>        if 5 == flag:<br>            flag = j<br>            break<br>    for j in range(0, 640):<br>        im_new.putpixel(((j - flag) % 640, i), im.getpixel((j, i)))<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/romance.html</a></p>\n<p><strong>17</strong><br>这一关算是一个总结，涉及了前面关卡中出图像处理外的大部分内容，同时加入了cookie的处理，而且猜谜性质更加突出了。为了完成这一关在网上差了不少的资料，总算是勉强完成了。<br>这一关的主图是一堆饼干，暗示的是cookie，而左下角的小图是第四关的图片，于是进入第四关,发现第四关的cookie中有提示：”info=you+should+have+followed+busynothing…”。尝试将用busynothing替换nothing，结果可行。接下来按照第四关的方式迭代，不过迭代的过程中需要收集cookie信息，每个网页都带有一字节的信息，将这些信息提取出来并且拼接得到一个bytes类型，开头是b’BZh91AY&amp;SY’,一看就是第8关的内容bz2，用bz2解压后得到’is it the 26th already? call his father and inform him that “the flowers are on their way”. he’ll understand.’。顺便一说，在’linkedlist.php?busynothing=19242’中cookie为’+’,但实际上应该是空格，我不清楚到底是官方出错还是有什么其他的我没发现的暗示，但是我在这上面几乎浪费了一上午的时间，最后选择了当busynothing为19242时手动替换结果，才算是成功解压出信息。<br>言归正传，上面的提示可以看出跟之前的莫扎特有关，上网查莫扎特的父亲名字是’Leopold Mozart’。接下来用第13关的方法phone(‘Leopold’),结果是’no! i mean yes! but ../stuff/violin.php.’，进入该页面后有一张莫扎特的照片，页面标题是’it’s me. what do you want?’，总算是找到莫扎特了……接下来通过cookie给莫扎特鲜花，也就是请求时在cookie中带上’the flowers are on their way’的信息，得到结果’oh well, don\\’t you dare to forget the balloons.’其中balloons就是下一关的地址<br><a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/romance.html</a><br>[python]<br>page = ‘’<br>base = ‘<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=</a>‘<br>nothing = ‘12345’<br>pattern = ‘(?&lt;=[^0-9])\\d+$’<br>cookies = []<br>while 1:<br>    while 1:<br>        try:<br>            page = request.urlopen(base + nothing, timeout=1)<br>            break<br>        except:<br>            pass<br>    data = page.read().decode()<br>    match = re.search(pattern, data)<br>    cookie = page.info().get(&quot;Set-Cookie&quot;)<br>    cookies.append(parse.unquote_to_bytes(re.search(&quot;(?&lt;==)[^;]+(?=;)&quot;, cookie).group(0)))<br>    if ‘19242’ == nothing:<br>        cookies.pop()<br>        cookies.append(b’ ‘)<br>    if not match:<br>        if ‘Yes. Divide by two and keep going.’ == page:<br>            nothing = str(int(nothing) / 2)<br>        else:<br>            break<br>    else:<br>        nothing = match.group(0)</p>\n<p>data = bz2.decompress(b’’.join(cookies))<br>server = client.Server(&quot;<a href=\"http://www.pythonchallenge.com/pc/phonebook.php&amp;quot\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/phonebook.php&amp;quot</a>;)<br>server.phone(‘Leopold’)<br>http = urllib3.PoolManager().request(‘GET’, ‘<a href=\"http://www.pythonchallenge.com/pc/stuff/violin.php\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/stuff/violin.php</a>‘,<br>                                     headers={‘Cookie’: &quot;info=the flowers are on their way&quot;})<br>print(http.data)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\" target=\"_blank\" rel=\"external\">http://www.pythonchallenge.com/pc/return/balloons.html</a></p>\n<p>PythonChallenge做到这里也算是告一段落了，后面还有十多关没做，不过接下来这段时间会很忙，所以只能找机会慢慢完成了。</p>\n","excerpt":"","more":"<p>群里的每日一题计划似乎进行了没几次就被群主遗忘了，我在闲极无聊之下找到了PythonChallenge。pc的玩法基本上就是根据每一关的提示找出下一关的密码，和闯关游戏类似。不过pc的特点是解析下一关地址的过程极其复杂，无法人工完成，只能借助计算机编程实现。pc主要涉及了网络爬虫，图像处理和文件操作，虽说没有涉及python高级技巧，但是对于python的常用功能也算是基本都覆盖到了，因此非常适合新手在缺少练手机会是拿来熟练python。最后，我的解题过程基本上市先看网上的攻略找到题目中谜题的含义，然后自己编写代码来解题，我建议大家尽量也采用这种方法，可以减少在谜面上浪费的脑细胞。</p>\n<p><strong>0</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/0.html\">http://www.pythonchallenge.com/pc/def/0.html</a><br>根据提示2^38得到274877906944<br>[python]<br>2 ** 38<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\">http://www.pythonchallenge.com/pc/def/274877906944.html</a></p>\n<p><strong>1</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/map.html\">http://www.pythonchallenge.com/pc/def/map.html</a><br>页面包含一段乱码：g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr’q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.<br>文字提示：everybody thinks twice before solving this.<br>图片提示：k-&gt;m,o-&gt;q,e-&gt;g<br>根据图片提示得出是凯撒密码，将字母后移两位得到”i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string. maketrans() is recommended. now apply on the url.”<br>用同样的方式处理url”map”得到”ocr”<br>此处使用正则表达式匹配所有字母以避免影响到其他字符，匹配成功后使用lambda表达式完成字符替换<br>[python]<br> re.compile(‘[a-z]’).sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), hint)<br> re.compile(‘[a-z]’).sub(lambda m: chr((ord(m.group(0)) - 97 + 2) % 26 + 97), ‘map’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>\n<p><strong>2</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\">http://www.pythonchallenge.com/pc/def/ocr.html</a><br>根据提示在源代码中找到需要统计的字符串，统计完成后获得出现最少的次数min_times，筛选出所有出现次数为mint_times的字符拼接后得到equality<br>[python]<br>for i in level2_str:<br>    if None == count.get(i):<br>        count[i] = 1<br>        char.append(i)<br>    else:<br>        count[i] += 1<br>min_times = min(count.items(), key=lambda x: x[1])[1]<br>char = filter(lambda x: min_times == count[x], char)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/equality.html\">http://www.pythonchallenge.com/pc/def/equality.html</a></p>\n<p><strong>3</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/equality.html\">http://www.pythonchallenge.com/pc/def/equality.html</a><br>老样子在源代码中找到字符串，然后正则匹配出左右刚好各有三个大写字母的小写字母，最后拼接得到linkedlist<br>[python]<br>re.compile(‘[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]’).findall(level3_str)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\">http://www.pythonchallenge.com/pc/def/linkedlist.html</a></p>\n<p><strong>4</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php\">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br>根据页面提示打开下一个页面，只不过这关页面太多，必须要借助爬虫才行。<br>需要注意的是这关有两处陷阱，第一处提示”Yes. Divide by two and keep going.”，需要将之前的数字直接除二得到下一个页面。第二处在中间有一个假数字，会导向一个错误页面。<br>[python]<br>pattern = ‘(?&lt;=[^0-9])\\d+$’ pattern = ‘(?&lt;=[^0-9])\\d+$’<br>while 1:<br>        page = request.urlopen(base + nothing).read().decode()<br>        match = re.search(pattern, page)<br>        if not match:<br>            if ‘Yes. Divide by two and keep going.’ == page:<br>                nothing = str(int(nothing) / 2)<br>            else:<br>                break<br>        else:<br>            nothing = match.group(0)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/peak.html\">http://www.pythonchallenge.com/pc/def/peak.html</a></p>\n<p><strong>5</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/peak.html\">http://www.pythonchallenge.com/pc/def/peak.html</a><br>这一关涉及到利用pickle模块进行反序列化，爬取banner.p，然后反序列化可以得到类似[[(‘ ‘, 95)], [(‘ ‘, 14), (‘#’, 5), (‘ ‘, 70), (‘#’, 5), (‘ ‘, 1)]……]的数据，列表解析后输出可以得到用井号和空格拼成的channel单词<br>[python]<br>banner = pickle.load(request.urlopen(‘<a href=\"http://www.pythonchallenge.com/pc/def/banner.p\">http://www.pythonchallenge.com/pc/def/banner.p</a>‘))<br>return ‘’.join(‘’.join([pair[0] * pair[1] for pair in line]) + ‘\\n’ for line in banner)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/channel.html\">http://www.pythonchallenge.com/pc/def/channel.html</a></p>\n<p><strong>6</strong><br><a href=\"http://www.pythonchallenge.com/pc/def/channel.html\">http://www.pythonchallenge.com/pc/def/channel.html</a><br>这关和第4关类似，也是循环读取，只不过这回变成了读取压缩文件。按第四关的方法读到最后提示需要压缩文件的注释，于是把所有注释拼接起来就可以得到类似上一关的字符画，内容为hockey。进入hockey.html后提示”it’s in the air. look at the letters. “，观察组成字符画所用的字母分别是o,x,y,g,e,n。于是输入oxygen.html，成功到达下一关。<br>[python]</p>\n<h1 id=\"只展示与第4关不同的部分\"><a href=\"#只展示与第4关不同的部分\" class=\"headerlink\" title=\"只展示与第4关不同的部分\"></a>只展示与第4关不同的部分</h1><p>channel = zipfile.ZipFile(‘channel.zip’)<br>comments.append(channel.getinfo(nothing+’.txt’).comment.decode())<br>channel.read(nothing+’.txt’).decode()<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\">http://www.pythonchallenge.com/pc/def/oxygen.html</a></p>\n<p><strong>7</strong><br>这一关用到了图像处理，需要借助pillow库完成。<br>图片中央有一条灰阶，读取灰阶中每一格的RGB任一通道值，得到数字，转化为字符串后可以得到下一关的提示。再用正则将提示中的数字取出后再次转化就可以得到下一关的地址integrity。<br><a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\">http://www.pythonchallenge.com/pc/def/oxygen.html</a><br>[python]<br>img = Image.open(‘oxygen.png’)<br>hint = ‘’.join([chr(img.getpixel((i, 50))[0]) for i in range(0, 609, 7)])<br>return ‘’.join([chr(int(i)) for i in re.findall(‘\\d+’, hint)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>\n<p><strong>8</strong><br>这一关是用bz2解压缩，在源代码中有两个字符串，分别解压后得到’huge’和’file’，点击蜜蜂提示输入账号密码，将量单词分别输入跳转至下一个页面。<br><a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\">http://www.pythonchallenge.com/pc/def/integrity.html</a><br>[python]<br>bz2.decompress(un).decode()<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/good.html\">http://www.pythonchallenge.com/pc/return/good.html</a></p>\n<p><strong>9</strong><br>这题搞得跟脑筋急转弯似的，但仍然是图像处理。源代码中有两个数组first和second，分别将其中的数字两两一组做为坐标在图上画点。完成后可以得到两幅画，分别是牛的侧身和牛头，所以答案是bull。<br><a href=\"http://www.pythonchallenge.com/pc/return/good.html\">http://www.pythonchallenge.com/pc/return/good.html</a><br>[python]<br>im = Image.new(&quot;RGB&quot;, (500, 500))<br>    for i in range(0, len(level9_first), 2):<br>        im.putpixel((level9_first[i], level9_first[i + 1]), (255, 255, 255))<br>    im.save(‘level9_1.png’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/bull.html\">http://www.pythonchallenge.com/pc/return/bull.html</a></p>\n<p><strong>10</strong><br>找规律的脑筋急转弯：<br>1 = 1个1 = 11<br>11 = 2个1 = 21<br>21 = 1个2加1个1 = 1211<br>依次类推。<br>我采用正则表达式的方式对数字进行分组，如将111221拆分为[111,22,1]。然后用列表解析的方式生成下一个数，[111,22,1]将被解析为[31,22,11],最后用join合并后进行下一轮处理。最后得到第31个数长度为5808<br><a href=\"http://www.pythonchallenge.com/pc/return/bull.html\">http://www.pythonchallenge.com/pc/return/bull.html</a><br>[python]<br>num = ‘1’<br>for i in range(0, 30):<br>num = ‘’.join([str(len(x[1]) + 1) + x[0] for x in re.findall(r’(\\d)(\\1*)’, num)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/5808.html\">http://www.pythonchallenge.com/pc/return/5808.html</a></p>\n<p><strong>11</strong><br>还是图像处理，这次是将原图中所有xy坐标都为奇数和都为偶数的点取出生成单独的图片，生成完后可以明显的看到右上角有evil字样。<br><a href=\"http://www.pythonchallenge.com/pc/return/5808.html\">http://www.pythonchallenge.com/pc/return/5808.html</a><br>[python]<br>im = Image.open(‘cave.jpg’)<br>x, y = im.size<br>im_new = Image.new(im.mode, (int(x / 2), int(y / 2)))<br>for i in range(0, x, 2):<br>    for j in range(0, y, 2):<br>        im_new.putpixel((int(i / 2), int(j / 2)), im.getpixel((i, j)))<br>im_new.save(‘level11_1.jpg’)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/evil.html\">http://www.pythonchallenge.com/pc/return/evil.html</a></p>\n<p><strong>12</strong><br>又是一道脑筋急转弯的题。第一页中图名字是evil1.jpg，修改为evil2.jpg后看到提示将后缀名修改为gfx。修改完后成功下载evil2.gfx文件。另外根据evil1中分牌的提示可知需要将文件按分牌方式分成五份。我使用的方式是先将文件全部读出然后列表解析生成5个子bytes，最后写入新文件。写入完成后看图可知下一关地址为disproportional<br>lenge.com/pc/return/evil.html<br>[python]<br>source = bytearray(file.read())<br>s1 = bytes([source[i] for i in range(0, len(source), 5)])<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>\n<p><strong>13</strong><br>页面提示”phone that evil”于是在图片中的电话上按键，按到e所在的5键时跳转到了phonebook.php，内容是一个报错的xml。查了一下这里是用到了xml远程调用，需要导入xmlrpc，用xmlrpc连接上phonebook.php后调用listMethods发现有一个phone方法。于是调用phone(‘evil’)，提示”He is not the evil”。再上网查了一下发现上一关中evil4.jpg有提示”Bert is evil”，于是phone(‘Bert’)，返回555-ITALY，下一关为italy<br><a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\">http://www.pythonchallenge.com/pc/return/disproportional.html</a><br>[python]<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/italy.html\">http://www.pythonchallenge.com/pc/return/italy.html</a></p>\n<p><strong>14</strong><br>根据图片和源代码中的”100<em>100 = (100+99+99+98) + (…”提示，可知需要将下方10000</em>1的图从外向里盘绕形成一个100<em>100的新图片。按要求生成图片后结果是一只猫，进入cat.html提示”and its name is uzi. you’ll hear from him later.”。下一关地址为uzi<br><a href=\"http://www.pythonchallenge.com/pc/return/italy.html\">http://www.pythonchallenge.com/pc/return/italy.html</a><br>[python]<br>im = Image.open(‘pc/wire.png’)<br>im_new = Image.new(im.mode, (100, 100))<br>count = 0<br>for i in range(0, 50):<br>    jump = 99 - 2 </em> i<br>    for j in range(i, 99 - i):<br>        im_new.putpixel((j, i), im.getpixel((count, 0)))<br>        im_new.putpixel((99 - i, j), im.getpixel((count + jump, 0)))<br>        im_new.putpixel((99 - j, 99 - i), im.getpixel((count + 2 <em> jump, 0)))<br>        im_new.putpixel((i, 99 - j), im.getpixel((count + 3 </em> jump, 0)))<br>        count += 1<br>    count += jump * 3<br>im_new.save(&quot;pc/level14.jpg&quot;)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\">http://www.pythonchallenge.com/pc/return/uzi.html</a></p>\n<p><strong>15</strong><br>日历显示为1xx6年1月26日周一，且右下角显示二月有29天为闰年，找出所有符合该条件的日期，分别为1176，1356，1576，1756，1976年的1月26日。然后根据源文件中的提示”he ain’t the youngest, he is the second. buy flowers for tomorrow”。5个年份中第二靠后的是1756，搜索1756年1月27日为莫扎特的生日，符合所有提示。所以，下一关地址为mozart<br><a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\">http://www.pythonchallenge.com/pc/return/uzi.html</a><br>[python]<br>for year in range(1016, 2000, 20):<br>    t = date(year, 1, 26)<br>    if (t+timedelta(34)).month == 2 and t.weekday() == 0:<br>        print(t.isoformat())<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\">http://www.pythonchallenge.com/pc/return/mozart.html</a></p>\n<p><strong>16</strong><br>依旧是图像处理，干脆改名叫image challenge得了……这题是根据图片中的红色线段对齐每一行像素，对齐完后得到的图中有romance字样。<br><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\">http://www.pythonchallenge.com/pc/return/mozart.html</a><br>[python]<br>for i in range(0, 480):<br>    flag = 0<br>    for j in range(0, 640):<br>        if 195 == im.getpixel((j, i)):<br>            flag += 1<br>        if 5 == flag:<br>            flag = j<br>            break<br>    for j in range(0, 640):<br>        im_new.putpixel(((j - flag) % 640, i), im.getpixel((j, i)))<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/romance.html\">http://www.pythonchallenge.com/pc/return/romance.html</a></p>\n<p><strong>17</strong><br>这一关算是一个总结，涉及了前面关卡中出图像处理外的大部分内容，同时加入了cookie的处理，而且猜谜性质更加突出了。为了完成这一关在网上差了不少的资料，总算是勉强完成了。<br>这一关的主图是一堆饼干，暗示的是cookie，而左下角的小图是第四关的图片，于是进入第四关,发现第四关的cookie中有提示：”info=you+should+have+followed+busynothing…”。尝试将用busynothing替换nothing，结果可行。接下来按照第四关的方式迭代，不过迭代的过程中需要收集cookie信息，每个网页都带有一字节的信息，将这些信息提取出来并且拼接得到一个bytes类型，开头是b’BZh91AY&amp;SY’,一看就是第8关的内容bz2，用bz2解压后得到’is it the 26th already? call his father and inform him that “the flowers are on their way”. he’ll understand.’。顺便一说，在’linkedlist.php?busynothing=19242’中cookie为’+’,但实际上应该是空格，我不清楚到底是官方出错还是有什么其他的我没发现的暗示，但是我在这上面几乎浪费了一上午的时间，最后选择了当busynothing为19242时手动替换结果，才算是成功解压出信息。<br>言归正传，上面的提示可以看出跟之前的莫扎特有关，上网查莫扎特的父亲名字是’Leopold Mozart’。接下来用第13关的方法phone(‘Leopold’),结果是’no! i mean yes! but ../stuff/violin.php.’，进入该页面后有一张莫扎特的照片，页面标题是’it’s me. what do you want?’，总算是找到莫扎特了……接下来通过cookie给莫扎特鲜花，也就是请求时在cookie中带上’the flowers are on their way’的信息，得到结果’oh well, don\\’t you dare to forget the balloons.’其中balloons就是下一关的地址<br><a href=\"http://www.pythonchallenge.com/pc/return/romance.html\">http://www.pythonchallenge.com/pc/return/romance.html</a><br>[python]<br>page = ‘’<br>base = ‘<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=\">http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=</a>‘<br>nothing = ‘12345’<br>pattern = ‘(?&lt;=[^0-9])\\d+$’<br>cookies = []<br>while 1:<br>    while 1:<br>        try:<br>            page = request.urlopen(base + nothing, timeout=1)<br>            break<br>        except:<br>            pass<br>    data = page.read().decode()<br>    match = re.search(pattern, data)<br>    cookie = page.info().get(&quot;Set-Cookie&quot;)<br>    cookies.append(parse.unquote_to_bytes(re.search(&quot;(?&lt;==)[^;]+(?=;)&quot;, cookie).group(0)))<br>    if ‘19242’ == nothing:<br>        cookies.pop()<br>        cookies.append(b’ ‘)<br>    if not match:<br>        if ‘Yes. Divide by two and keep going.’ == page:<br>            nothing = str(int(nothing) / 2)<br>        else:<br>            break<br>    else:<br>        nothing = match.group(0)</p>\n<p>data = bz2.decompress(b’’.join(cookies))<br>server = client.Server(&quot;<a href=\"http://www.pythonchallenge.com/pc/phonebook.php&amp;quot\">http://www.pythonchallenge.com/pc/phonebook.php&amp;quot</a>;)<br>server.phone(‘Leopold’)<br>http = urllib3.PoolManager().request(‘GET’, ‘<a href=\"http://www.pythonchallenge.com/pc/stuff/violin.php\">http://www.pythonchallenge.com/pc/stuff/violin.php</a>‘,<br>                                     headers={‘Cookie’: &quot;info=the flowers are on their way&quot;})<br>print(http.data)<br>[/python]<br>下一关地址：<a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\">http://www.pythonchallenge.com/pc/return/balloons.html</a></p>\n<p>PythonChallenge做到这里也算是告一段落了，后面还有十多关没做，不过接下来这段时间会很忙，所以只能找机会慢慢完成了。</p>\n"},{"title":"Python每日一题 第1期","id":"37","date":"2014-12-11T04:20:12.000Z","_content":"\n这两天参加的一个群里开展了每日一题的活动，虽然题目简单了点，但是拿来练练手也挺不错的。\n\n[【我们一起学Python吧】每日一题 第1期](http://www.pythonla.com/read-13.html \"【我们一起学Python吧】每日一题 第1期\")\n题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？[](http://www.pythonla.com/read-13.html \"【我们一起学Python吧】每日一题 第1期\")\n[python]\ncount = 0\nfor i in range(1, 4 ** 3):\n    a = i % 4\n    b = int(i / 4) % 4\n    c = int(i / 16)\n    if (a != b) &amp; (a != c) &amp; (b != c):\n        count += 1\n        print(str(c + 1) + str(b + 1) + str(a + 1))\nprint('total:%d' % count)\n[/python]\n\n这是群中高手的解法，用到了列表解析。\n[python]\nlis = {1, 2, 3, 4}\nl = [x * 100 + y * 10 + z for x in lis for y in lis - {x} for z in lis - {x} - {y}]\nprint(len(l), l)\n[/python]","source":"_posts/python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98.md","raw":"---\ntitle: Python每日一题 第1期\ntags:\n  - python\n  - 每日一题\n  - 练习\nid: 37\ncategories:\n  - python\ndate: 2014-12-11 12:20:12\n---\n\n这两天参加的一个群里开展了每日一题的活动，虽然题目简单了点，但是拿来练练手也挺不错的。\n\n[【我们一起学Python吧】每日一题 第1期](http://www.pythonla.com/read-13.html \"【我们一起学Python吧】每日一题 第1期\")\n题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？[](http://www.pythonla.com/read-13.html \"【我们一起学Python吧】每日一题 第1期\")\n[python]\ncount = 0\nfor i in range(1, 4 ** 3):\n    a = i % 4\n    b = int(i / 4) % 4\n    c = int(i / 16)\n    if (a != b) &amp; (a != c) &amp; (b != c):\n        count += 1\n        print(str(c + 1) + str(b + 1) + str(a + 1))\nprint('total:%d' % count)\n[/python]\n\n这是群中高手的解法，用到了列表解析。\n[python]\nlis = {1, 2, 3, 4}\nl = [x * 100 + y * 10 + z for x in lis for y in lis - {x} for z in lis - {x} - {y}]\nprint(len(l), l)\n[/python]","slug":"python-e6-af-8f-e6-97-a5-e4-b8-80-e9-a2-98","published":1,"updated":"2016-05-06T02:34:31.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinv54z3h0025d0chct2ajvnj","content":"<p>这两天参加的一个群里开展了每日一题的活动，虽然题目简单了点，但是拿来练练手也挺不错的。</p>\n<p><a href=\"http://www.pythonla.com/read-13.html\" title=\"【我们一起学Python吧】每日一题 第1期\" target=\"_blank\" rel=\"external\">【我们一起学Python吧】每日一题 第1期</a><br>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？<a href=\"http://www.pythonla.com/read-13.html\" title=\"【我们一起学Python吧】每日一题 第1期\" target=\"_blank\" rel=\"external\"></a><br>[python]<br>count = 0<br>for i in range(1, 4 ** 3):<br>    a = i % 4<br>    b = int(i / 4) % 4<br>    c = int(i / 16)<br>    if (a != b) &amp; (a != c) &amp; (b != c):<br>        count += 1<br>        print(str(c + 1) + str(b + 1) + str(a + 1))<br>print(‘total:%d’ % count)<br>[/python]</p>\n<p>这是群中高手的解法，用到了列表解析。<br>[python]<br>lis = {1, 2, 3, 4}<br>l = [x <em> 100 + y </em> 10 + z for x in lis for y in lis - {x} for z in lis - {x} - {y}]<br>print(len(l), l)<br>[/python]</p>\n","excerpt":"","more":"<p>这两天参加的一个群里开展了每日一题的活动，虽然题目简单了点，但是拿来练练手也挺不错的。</p>\n<p><a href=\"http://www.pythonla.com/read-13.html\" title=\"【我们一起学Python吧】每日一题 第1期\">【我们一起学Python吧】每日一题 第1期</a><br>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？<a href=\"http://www.pythonla.com/read-13.html\" title=\"【我们一起学Python吧】每日一题 第1期\"></a><br>[python]<br>count = 0<br>for i in range(1, 4 ** 3):<br>    a = i % 4<br>    b = int(i / 4) % 4<br>    c = int(i / 16)<br>    if (a != b) &amp; (a != c) &amp; (b != c):<br>        count += 1<br>        print(str(c + 1) + str(b + 1) + str(a + 1))<br>print(‘total:%d’ % count)<br>[/python]</p>\n<p>这是群中高手的解法，用到了列表解析。<br>[python]<br>lis = {1, 2, 3, 4}<br>l = [x <em> 100 + y </em> 10 + z for x in lis for y in lis - {x} for z in lis - {x} - {y}]<br>print(len(l), l)<br>[/python]</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cinv54z1c0000d0chdco737cc","category_id":"cinv54z1n0003d0chrexkb3n3","_id":"cinv54z1u000ad0chlqd9dj49"},{"post_id":"cinv54z1i0001d0chktjqqthr","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2a000id0chhfw4buss"},{"post_id":"cinv54z1o0004d0ch10ehaqia","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2g000od0chsfc2jw04"},{"post_id":"cinv54z29000hd0ch0xbbfzxt","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2j000sd0chm4vm85n7"},{"post_id":"cinv54z2d000ld0ch7iizc6cs","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2l000ud0chkl646kjl"},{"post_id":"cinv54z1p0005d0chvgy7h4m5","category_id":"cinv54z2b000jd0chop644o8k","_id":"cinv54z2n000yd0chkfrqz2p8"},{"post_id":"cinv54z2f000nd0chvy1xgk2z","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2o0010d0ch3wujdvy6"},{"post_id":"cinv54z2h000rd0ch67l3k3fz","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2t0014d0chimxzejmm"},{"post_id":"cinv54z1q0007d0chn7sqr3hr","category_id":"cinv54z2b000jd0chop644o8k","_id":"cinv54z2w0017d0chg34bn2pg"},{"post_id":"cinv54z2k000td0ch39zreju2","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z2z001bd0chdzgk6468"},{"post_id":"cinv54z2m000xd0ch9yjg19he","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z30001fd0chsf064ka3"},{"post_id":"cinv54z1s0009d0ch0kqwv53g","category_id":"cinv54z2b000jd0chop644o8k","_id":"cinv54z33001id0chuyqb5bju"},{"post_id":"cinv54z2o000zd0chuzq21adb","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z35001ld0che1mg8pag"},{"post_id":"cinv54z1u000bd0chtm271z73","category_id":"cinv54z2p0011d0ch8iplvo1d","_id":"cinv54z37001od0char5o35ly"},{"post_id":"cinv54z2v0016d0chf6ghiz4b","category_id":"cinv54z2p0011d0ch8iplvo1d","_id":"cinv54z39001sd0ch5mw0golk"},{"post_id":"cinv54z2y001ad0chfut7z0l8","category_id":"cinv54z2p0011d0ch8iplvo1d","_id":"cinv54z3c001vd0chym7nfes8"},{"post_id":"cinv54z23000fd0chewtl9kpz","category_id":"cinv54z2p0011d0ch8iplvo1d","_id":"cinv54z3f001zd0chmoots8p7"},{"post_id":"cinv54z2z001ed0chn92cdfq9","category_id":"cinv54z1n0003d0chrexkb3n3","_id":"cinv54z3g0022d0chyh0e358v"},{"post_id":"cinv54z32001hd0chnrmyhs37","category_id":"cinv54z1n0003d0chrexkb3n3","_id":"cinv54z3j0026d0ch9peswfh5"},{"post_id":"cinv54z35001kd0ch2sxza1b5","category_id":"cinv54z1n0003d0chrexkb3n3","_id":"cinv54z3l0028d0chj1gaydge"},{"post_id":"cinv54z2p0013d0ch9i7wz9l0","category_id":"cinv54z2b000jd0chop644o8k","_id":"cinv54z3m002bd0chb3u6cfqn"},{"post_id":"cinv54z2p0013d0ch9i7wz9l0","category_id":"cinv54z32001gd0chlsq96px1","_id":"cinv54z3m002dd0ch69x4z4e8"},{"post_id":"cinv54z36001nd0choxboimq4","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3m002gd0cht8zma3le"},{"post_id":"cinv54z38001rd0chl0p46dip","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3m002id0chtog9fjqo"},{"post_id":"cinv54z3a001ud0chbid6m98r","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3n002ld0chb637se87"},{"post_id":"cinv54z3d001yd0chgv495xdn","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3n002nd0cha9mub9tu"},{"post_id":"cinv54z3f0021d0ch3a0co6z0","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3o002qd0chrkvqw540"},{"post_id":"cinv54z3h0025d0chct2ajvnj","category_id":"cinv54z1r0008d0ch3isaz4b0","_id":"cinv54z3o002sd0chy6j0b62l"}],"PostTag":[{"post_id":"cinv54z1c0000d0chdco737cc","tag_id":"cinv54z1l0002d0chvcm6cje3","_id":"cinv54z23000ed0chq4wdvszx"},{"post_id":"cinv54z1c0000d0chdco737cc","tag_id":"cinv54z1q0006d0chcttxwwn1","_id":"cinv54z29000gd0chnru8jiev"},{"post_id":"cinv54z1i0001d0chktjqqthr","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z2e000md0cha085bw6w"},{"post_id":"cinv54z1o0004d0ch10ehaqia","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z2u0015d0chnv96weaf"},{"post_id":"cinv54z1o0004d0ch10ehaqia","tag_id":"cinv54z2g000pd0ch2dfini97","_id":"cinv54z2x0018d0chx3hhwvou"},{"post_id":"cinv54z1o0004d0ch10ehaqia","tag_id":"cinv54z2m000wd0ch0xzcnw83","_id":"cinv54z2z001dd0chy67zymih"},{"post_id":"cinv54z1p0005d0chvgy7h4m5","tag_id":"cinv54z2p0012d0ch847scsrz","_id":"cinv54z36001md0chhsubh2z6"},{"post_id":"cinv54z1p0005d0chvgy7h4m5","tag_id":"cinv54z2z001cd0chz0xhzoch","_id":"cinv54z37001pd0chmfye5u12"},{"post_id":"cinv54z32001hd0chnrmyhs37","tag_id":"cinv54z1l0002d0chvcm6cje3","_id":"cinv54z39001td0chl8r5eu5y"},{"post_id":"cinv54z35001kd0ch2sxza1b5","tag_id":"cinv54z1l0002d0chvcm6cje3","_id":"cinv54z3c001wd0chd8ruvznc"},{"post_id":"cinv54z35001kd0ch2sxza1b5","tag_id":"cinv54z1q0006d0chcttxwwn1","_id":"cinv54z3f0020d0chfoca77f9"},{"post_id":"cinv54z36001nd0choxboimq4","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3g0023d0chksejsczv"},{"post_id":"cinv54z38001rd0chl0p46dip","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3k0027d0chtj7rkz4l"},{"post_id":"cinv54z38001rd0chl0p46dip","tag_id":"cinv54z2g000pd0ch2dfini97","_id":"cinv54z3l0029d0chiz5956bd"},{"post_id":"cinv54z38001rd0chl0p46dip","tag_id":"cinv54z2m000wd0ch0xzcnw83","_id":"cinv54z3m002cd0chzh6u6naq"},{"post_id":"cinv54z1q0007d0chn7sqr3hr","tag_id":"cinv54z2z001cd0chz0xhzoch","_id":"cinv54z3m002ed0ch4y8am33a"},{"post_id":"cinv54z1q0007d0chn7sqr3hr","tag_id":"cinv54z37001qd0chwie5iab2","_id":"cinv54z3m002hd0chi7dqp1aa"},{"post_id":"cinv54z3a001ud0chbid6m98r","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3n002jd0ch3xg1qxpd"},{"post_id":"cinv54z3a001ud0chbid6m98r","tag_id":"cinv54z2g000pd0ch2dfini97","_id":"cinv54z3n002md0ch3rstfs3l"},{"post_id":"cinv54z3a001ud0chbid6m98r","tag_id":"cinv54z2m000wd0ch0xzcnw83","_id":"cinv54z3n002od0chqe9jyib6"},{"post_id":"cinv54z3h0025d0chct2ajvnj","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3o002rd0chsnwcsom5"},{"post_id":"cinv54z3h0025d0chct2ajvnj","tag_id":"cinv54z2g000pd0ch2dfini97","_id":"cinv54z3o002td0chn6jj95ir"},{"post_id":"cinv54z3h0025d0chct2ajvnj","tag_id":"cinv54z2m000wd0ch0xzcnw83","_id":"cinv54z3o002vd0ch6s5gnmze"},{"post_id":"cinv54z1s0009d0ch0kqwv53g","tag_id":"cinv54z2p0012d0ch847scsrz","_id":"cinv54z3o002wd0chubd6a3o6"},{"post_id":"cinv54z1s0009d0ch0kqwv53g","tag_id":"cinv54z2z001cd0chz0xhzoch","_id":"cinv54z3p002yd0chitmd45z2"},{"post_id":"cinv54z29000hd0ch0xbbfzxt","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3p002zd0chcjapgbho"},{"post_id":"cinv54z29000hd0ch0xbbfzxt","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3p0031d0ch3st5b4bd"},{"post_id":"cinv54z2d000ld0ch7iizc6cs","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3p0032d0ch797z3ayi"},{"post_id":"cinv54z2d000ld0ch7iizc6cs","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3r0034d0chlgjpqgc5"},{"post_id":"cinv54z2f000nd0chvy1xgk2z","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3r0035d0chx8zvp2ok"},{"post_id":"cinv54z2f000nd0chvy1xgk2z","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3s0037d0chbu5jjymu"},{"post_id":"cinv54z2h000rd0ch67l3k3fz","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3t0038d0chj2c0bs6c"},{"post_id":"cinv54z2h000rd0ch67l3k3fz","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3t003ad0chlzj6x2i2"},{"post_id":"cinv54z2k000td0ch39zreju2","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3u003bd0chf9xsyams"},{"post_id":"cinv54z2k000td0ch39zreju2","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3u003dd0chnebridoh"},{"post_id":"cinv54z2m000xd0ch9yjg19he","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3u003ed0cha7zlhxw0"},{"post_id":"cinv54z2m000xd0ch9yjg19he","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3u003fd0chn2cnzbyb"},{"post_id":"cinv54z2o000zd0chuzq21adb","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3v003hd0chf05yvbs8"},{"post_id":"cinv54z2o000zd0chuzq21adb","tag_id":"cinv54z3l002ad0ch0g9d6nlo","_id":"cinv54z3v003id0chpb9ikzr8"},{"post_id":"cinv54z2p0013d0ch9i7wz9l0","tag_id":"cinv54z2z001cd0chz0xhzoch","_id":"cinv54z3w003kd0ch7wg42efr"},{"post_id":"cinv54z2p0013d0ch9i7wz9l0","tag_id":"cinv54z37001qd0chwie5iab2","_id":"cinv54z3w003ld0chbf1maxmb"},{"post_id":"cinv54z2z001ed0chn92cdfq9","tag_id":"cinv54z3t0039d0ch3w22glvf","_id":"cinv54z3x003nd0chy8or3t90"},{"post_id":"cinv54z2z001ed0chn92cdfq9","tag_id":"cinv54z3u003cd0ch5n6vsxdn","_id":"cinv54z3x003od0chke6bpjdr"},{"post_id":"cinv54z2z001ed0chn92cdfq9","tag_id":"cinv54z1l0002d0chvcm6cje3","_id":"cinv54z3x003qd0chyp42xt6p"},{"post_id":"cinv54z3d001yd0chgv495xdn","tag_id":"cinv54z3v003gd0chcyq2a5ef","_id":"cinv54z3x003rd0chni6k71ck"},{"post_id":"cinv54z3d001yd0chgv495xdn","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3x003sd0choum9qzuv"},{"post_id":"cinv54z3d001yd0chgv495xdn","tag_id":"cinv54z3v003jd0chat9a9nc5","_id":"cinv54z3y003td0chhlpzapi4"},{"post_id":"cinv54z3d001yd0chgv495xdn","tag_id":"cinv54z3w003md0chzu4c3kae","_id":"cinv54z3y003ud0ch8tr5n861"},{"post_id":"cinv54z3f0021d0ch3a0co6z0","tag_id":"cinv54z1x000cd0chn6czfkzw","_id":"cinv54z3y003vd0chsng1oc7l"},{"post_id":"cinv54z3f0021d0ch3a0co6z0","tag_id":"cinv54z3x003pd0chkln6vakl","_id":"cinv54z3y003wd0ch2255lg4e"},{"post_id":"cinv54z3f0021d0ch3a0co6z0","tag_id":"cinv54z2m000wd0ch0xzcnw83","_id":"cinv54z3y003xd0chn61m6h0i"}],"Tag":[{"name":"java","_id":"cinv54z1l0002d0chvcm6cje3"},{"name":"JVM","_id":"cinv54z1q0006d0chcttxwwn1"},{"name":"python","_id":"cinv54z1x000cd0chn6czfkzw"},{"name":"每日一题","_id":"cinv54z2g000pd0ch2dfini97"},{"name":"练习","_id":"cinv54z2m000wd0ch0xzcnw83"},{"name":"bootstrap","_id":"cinv54z2p0012d0ch847scsrz"},{"name":"javaScript","_id":"cinv54z2z001cd0chz0xhzoch"},{"name":"jQuery","_id":"cinv54z37001qd0chwie5iab2"},{"name":"数据分析","_id":"cinv54z3l002ad0ch0g9d6nlo"},{"name":"ip","_id":"cinv54z3t0039d0ch3w22glvf"},{"name":"j2ee","_id":"cinv54z3u003cd0ch5n6vsxdn"},{"name":"keygen","_id":"cinv54z3v003gd0chcyq2a5ef"},{"name":"rsa","_id":"cinv54z3v003jd0chat9a9nc5"},{"name":"加密","_id":"cinv54z3w003md0chzu4c3kae"},{"name":"PythonChallenge","_id":"cinv54z3x003pd0chkln6vakl"}]}}